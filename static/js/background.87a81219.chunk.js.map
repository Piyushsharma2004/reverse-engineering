{"version":3,"sources":["../../../../components/BackgroundShuffleContext/BackgroundShuffleContext.tsx","../../../styles/backgroundColors.ts","../../../../components/BackgroundShuffleContext/BackgroundShuffleProvider.tsx","../../../../components/BackgroundShuffleContext/utils.ts","../../../../components/Portal/Portal.tsx","../../../../components/Modal/Modal.tsx","../../../../components/UpgradeModal/UpgradeModal.styled.ts","../../../../components/UpgradeModal/UpgradeModal.tsx","../../../../components/ErrorBanner/ErrorBanner.styled.ts","../../../../components/ErrorBanner/ErrorBanner.tsx","../../../pages/_app.tsx","../../../../utils/GoogleAnalytics/gtag.ts","../../../Api/AxiosInstance.ts","../../../../components/withAuth/withAuth.tsx","../../../../../redux/middleware/ShuffleMiddleware/ShuffleManager.ts","../../../../../redux/middleware/ShuffleMiddleware/Shuffler.ts","../../../../../redux/middleware/ShuffleMiddleware/ShuffleMiddleware.ts","../../../../../redux/middleware/OscillationMiddleware/Oscillator.ts","../../../../../redux/middleware/OscillationMiddleware/OscillationManager.ts","../../../../../redux/middleware/OscillationMiddleware/OscillationMiddleware.ts","../../../../../redux/middleware/TimerMiddleware/Timer.ts","../../../../../redux/middleware/TimerMiddleware/TimerManager.ts","../../../../../redux/middleware/TimerMiddleware/TimerMiddleware.ts","../../../../../redux/middleware/FavouritesMiddleware/FavouritesMiddleware.ts","../../../../../redux/middleware/PlaylistsMiddleware/PlaylistsMiddleware.ts","../../../../redux/utils/catchAuthError.ts","../../../../../redux/modules/users/users.epics.ts","../../../../../redux/modules/favourites/favourites.epics.ts","../../../Api/Text.api.ts","../../../../../redux/modules/texts/texts.epics.ts","../../../../../redux/modules/timer/timer.epics.ts","../../../utils/localStorage.ts","../../../../../redux/middleware/AuthMiddleware/AuthMiddleware.ts","../../../redux/index.ts","../../../../../redux/modules/favourites/favourites.state.ts","../../../../../redux/modules/favourites/index.ts","../../../../../redux/modules/favourites/favourites.reducers.ts","../../../../../redux/modules/users/users.socketHandlers.ts","../../../../../redux/middleware/SocketMiddleware/Socket.handlers.ts","../../../../../redux/modules/favourites/favourites.socketHandlers.ts","../../../../../redux/modules/timer/timer.socketHandlers.ts","../../../Api/UserLimitConnect.api.ts","../../../../../redux/middleware/UserLimitMiddleware/UserLimitMiddleware.ts","../../../../../redux/modules/playlists/playlists.state.ts","../../../../../redux/modules/playlists/index.ts","../../../../../redux/modules/playlists/playlists.reducers.ts","../../../styles/theme.ts","redux/background/aliases.ts","background/auth.ts","../../../../styles/external/slick-carousel.ts","../../../../styles/external/tooltip.ts","../../../../styles/external/draftjs.ts","../../../styles/fonts.ts","../../../styles/reset.ts","../../../styles/transitions.ts","../../../styles/global.ts","../../../../../../components/_Core/Player/Player/HlsInstance.ts","../../../../../../components/_Core/Player/Player/Easings.ts","../../../../../../components/_Core/Player/Player/PlayerContainer.tsx","../../../../../../components/_Core/Player/Player/Player.tsx","../../../../../../components/_Core/PlayerMasterController/PlayerMasterController/PlayerMasterController.tsx","../../../styles/rwd.ts","../../../src/Websockets/UserSocketEvent.enum.ts","../../../src/PlayerIcons/index.tsx","../../../../../redux/modules/base/base.state.ts","../../../../../redux/modules/base/index.ts","../../../../../redux/modules/base/base.reducers.ts","../../../../../redux/modules/timer/timer.helpers.ts","../../src/index.ts","../../../../../redux/modules/players/players.utils.ts","../../../../../redux/modules/players/players.state.ts","../../../../../redux/modules/players/index.ts","../../../../../redux/modules/players/players.reducers.ts","../../../src/User/index.ts","../../../src/User/accountType.enum.ts","../../../src/User/OauthProvider.enum.ts","../../../src/Api/index.ts","../../../src/Api/messageStatus.enum.ts","../../../src/Share/index.ts","../../../src/Share/ShareType.enum.ts","../../../src/Subscription/index.ts","../../../src/Subscription/HighRiskTransactionStatus.enum.ts","../../../src/Subscription/Subscription.enums.ts","../../../src/Timer/index.ts","../../../src/Timer/Timer.interface.ts","../../../src/Websockets/index.ts","../../../src/Websockets/TimerSocketEvent.enum.ts","../../../src/Websockets/FavouriteSocketEvent.enum.ts","../../../src/Account/index.tsx","../../../src/Badges/index.tsx","../../../src/InterfaceIcons/index.tsx","../../../src/PagesIcons/index.tsx","../../../src/OnboardingIcons/index.tsx","../../../src/PlaylistIcons/index.tsx","../../../../../redux/modules/players/players.thunks.ts","../../../Api/Users.api.ts","../../../../components/Grid/Grid.styled.ts","../../../../../redux/modules/players/players.selectors.ts","../../../../components/Button/Button.styled.ts","../../../../../redux/modules/subscriptions/subscriptions.state.ts","../../../../../redux/modules/subscriptions/index.ts","../../../../../redux/modules/subscriptions/subscriptions.reducers.ts","../../../../../redux/modules/timer/timer.webAudio.ts","../../../utils/webAudioTouchUnlock.ts","../../../../../redux/modules/timer/timer.thunks.ts","../../../../components/Modal/Modal.styled.ts","../../../../components/Tooltip/Tooltip.styled.ts","../../app/dist/WebWorkers/tick.worker.js","redux/middleware/FavouriteObserverMiddleware/FavouriteObserverMiddleware.ts","redux/middleware/OfflineStateObserverMiddleware/OfflineStateObserverMiddleware.ts","redux/middleware/UserAccountChangeObserver/UserAccountChangeObserver.ts","redux/background/index.ts","redux/modules/chromeExtension/chromeExtension.state.ts","redux/modules/chromeExtension/index.ts","redux/modules/chromeExtension/chromeExtension.reducers.ts","../../../../../redux/modules/playlists/playlists.selectors.ts","redux/modules/chromeExtension/chromeExtension.interfaces.ts","../../../../../redux/modules/favourites/favourites.selectors.ts","../../../../../redux/modules/users/users.state.ts","../../../../../redux/modules/users/index.ts","../../../../../redux/modules/users/users.reducers.ts","background/App.tsx","background/index.tsx","../../../../../redux/modules/playlists/playlists.utils.ts","../../../Api/Subscriptions.api.ts","../../../Api/Team.api.ts","../../../../../redux/modules/subscriptions/subscriptions.thunks.ts","../../../../../redux/modules/users/users.thunks.ts","../../../styles/_colors.ts","../../../utils/mobileDetect.ts","../../../../../redux/modules/timer/timer.state.ts","../../../../../redux/modules/timer/timer.reducers.ts","../../../../../redux/modules/timer/index.ts","../../../../../redux/modules/texts/texts.state.ts","../../../../../redux/modules/texts/index.ts","../../../../../redux/modules/texts/texts.reducers.ts","../../../Api/Timer.api.ts","../../../styles/utils.ts","../../../config/config.ts","../../../Api/Favourites.api.ts","utils/GoogleAnalytics.ts"],"names":["color","colors","primary","colorCycler","CyclingBackgroundColors","index","random","StaticColorState","rgbToParts","rgb","r","g","b","partsToRgb","Math","colorToRGBParts","hex2Rgb","BackgroundShuffleProvider","TRANSITION_DURATION","TIMEOUT_DURATION","INTERVAL","force","hasStaticColor","proPlayersGradientMask","document","footer","header","prevArrow","nextArrow","textEditorGradient","textEditorOptionsWrapper","transparentColor","hex2Rgba","rgbaSetAlpha","proPlayersGradient","prevArrowGradient","nextArrowGradient","textEditorHeaderGradient","textEditorOptionsWrapperGradient","player","backgroundColor","lastBackgroundColor","isInitialized","this","prevProps","prevState","value","cyclerOnMessageHandler","bind","command","payload","timeout","config","startParts","nextParts","startColor","endColor","step","resultColor","steps","colorStep","partsDelta","getPartsStep","endParts","stepFunction","basePart","addPart","setTimeout","children","changeColor","colorCyclerGenerator","forceReapplyOfColor","forceColorUpdate","nextProps","NO_USER","React","Component","connect","state","selector","element","ReactDOM","transitionStyles","entered","transition","opacity","overflow","exiting","entering","exited","unmounted","onCloseClick","isOpen","appear","unmountOnExit","in","style","onClick","UpgradeImage","styled","ButtonWrapper","dispatch","useDispatch","showUpgradeModal","useSelector","handleOnCloseClick","setShowUpgradeModal","doubleSpace","center","withSimpleShadow","StyledBanner","props","ErrorIcon","CloseIcon","message","show","timeoutId","setTimeoutId","clearTimeout","id","Router","url","process","page_path","anonymize_ip","gtag","isServer","window","NEXT_REDUX_STORE","getOrCreateStore","initialState","undefined","initializeLiteStore","initializeStore","NoisliApp","isMobile","showOfflineAlert","mobileDetect","setIsMobile","setAuthHeader","pageProps","theme","store","reduxStore","useHomepage","src","App","a","async","appProps","res","appContext","protectedPaths","axiosInstance","axios","error","path","jwt","token","parseCookies","Shuffler","fromCombo","toCombo","reducers","shuffleConfig","interval","time","activeCombo","revertToOriginal","runShuffleCycle","transitionDuration","items","map","delta","comboItem","startVolume","actualVolume","targetVolume","isInNext","item","inComboItem","isInPrev","fromComboVolume","ticks","toComboVolume","returnToDefault","tick","setActiveCombo","combo","renewShuffle","resolve","transitionDelay","comboVolume","toTargetVolume","playersVolume","volume","setPlayersVolume","isShuffling","setShufflingTranstionState","setComboIsShuffling","comboId","playersIds","setPlayersShuffling","startupPlayersArray","startupPlayersForShuffle","stopPlayersArray","stopPlayersAfterShuffleThunk","revertPlayersVolume","handleOnlineEvent","ShuffleType","ShuffleManager","setPlayerVolume","markActive","unmarkActive","unmarkFavourite","unmarkActiveCombo","combosList","type","notActiveCombos","nextCombo","sample","setShuffledCombos","createShuffleMiddleware","shuffleManager","getState","AccountType","next","isShufflingTransition","activeFavourite","getActiveFavourite","activePlaylist","getActivePlaylist","activePlaylistCombo","getActivePlaylistCombo","action","setShufflingState","favourites","FAVOURITES","PLAYLIST","updateShuffle","destroyShuffle","markActiveFavourite","markActivePlaylistCombo","unmarkActiveFavourite","unmarkActivePlaylistCombo","playerInstance","getPlayerInstance","stopAllPlayers","setIsTerminatingSession","Oscillator","oscillationConfig","throttle","trailing","runOscillatorCycle","setPlayerOscillating","playerId","isOscillating","rand","customPlayerSettings","find","rules","minVolumeValue","maxVolumeValue","haveMinVolume","haveMaxVolume","minTime","maxTime","changeTime","volumeStep","updateOscillator","oscillationDelay","OscillationManager","oscillator","oscillators","newOscillator","filter","createOscillationMiddleware","oscillationManager","isOscillationOn","startOscillator","clearOscillator","setPlayerPlaying","scheduledOscillation","immediate","Timer","timerConfig","times","timerType","fadeInterval","fadeDuration","dayjs","pause","resume","timestamp","pauseTimestamp","secondsDiff","goalTime","add","isCancelled","isTerminating","isBefore","stopTimerThunk","totalSeconds","diff","totalHours","totalMinutes","shouldFadeOut","TimerType","actualTime","formatActualTime","setActualTime","setActiveComboInTimerThunk","comboItems","fadeComboVolume","TimerManager","args","createTimerMiddleware","timerManager","timer","players","users","startTimer","stopTimer","isLongBreakSkipped","pauseTimer","resumeTimer","isPlayerInFavourite","isPlayerInCombo","setPlaylistBackground","playlistBackground","generateBackgroundVariant","of","handleUserUnauthorizedThunk","setUserDetailsResolver","userDetails","setUserDetails","action$","ofType","completeOnboarding","mergeMap","from","didOnboarding","flatMap","scheduled","setUser","data","catchError","rootState","shuffle","setOscillatorState","oscillation","setMasterPlayerIsMuted","masterVolumeMuted","isMuted","debounce","setMasterPlayerVolume","masterVolume","fetchFavourites","FavouritesApi","setFavourites","createFavourite","markFavourite","savedFavourite","uuid","updateFavourite","deleteFavourite","TextApi","body","withCredentials","response","writingTimestamp","setText","tap","timeDiff","apiCall$","fromPromise","text","writingTime","setIsLoading","isLoading","concat","updateTimerConfig","TimerApi","ignoreElements","setActiveTimerCombo","savedTimerCombo","timerCombo","setSessionsCompleted","currentTimerType","setTimerTitle","title","setTimerPageTitle","setItem","getItem","removeItem","logoutWhitelist","createAuthMiddleware","event","Boolean","resetUser","localStorage","rootEpic","combineEpics","appReducerFactory","additionalReducers","combineReducers","base","playlists","subscriptions","texts","timerReducer","rootReducerFactory","appReducer","middlewares","createUserLimitMiddleware","epicMiddleware","createEpicMiddleware","configureStore","reducer","devTools","middleware","getDefaultMiddleware","preloadedState","initalState","sharedFavourite","favouritesSlice","createSlice","slice","idx","favourite","setFavouriteIsShuffling","newFavourite","isPlaying","oldFavourite","fav","setSharedFavourite","setSharedFavouritePlaying","resetUserFavourites","actions","selectors","getFavourites","onTerminateSession","curState","UserSocketEvent","setLimitReached","limitReached","setUserDataWithIncludesThunk","FavouriteSocketEvent","TimerSocketEvent","reloadTimerConfigThunk","UsersLimitConnectApi","isChromeExtension","UsersApi","apiUrl","UserLimitEvents","handler","emmiter","on","userLimitConnection","middlewareAPI","hasCheckedForLimit","tickWorker","limitReachedEventListener","accountTypeEventListener","terminatePlaying","closeAllModals","setShowLimitReachedModal","showModal","getRandomTimeoutTime","user","socketHandlers","actualState","userAccountTypeMismatch","setMasterPlayerPlaying","act","timezoneOffset","Date","getTimezoneOffset","checkLimitReached","playlistSliderPosition","playlistsSlice","playlist","comboIdx","playlistId","setPlaylistComboIsShuffling","activePlaylistIdx","markActiveCombo","setPlaylists","setPlaylistsSliderPosition","getPlaylists","fontPrimary","fontSecondary","backgroundTransition","height","space","shadow","home","zIndex","CHECK_USER_AUTH","originalAction","performAuthCheck","setShowShareModal","showShareModal","setTimerConfig","toString","reloadTimerConfig","defaults","headers","Authorization","auth","includes","checkUser","logout","generatePlaylistsState","setChromeExtensionPage","page","ChromeExtensionPage","ONBOARDING","chrome","cookies","get","name","cookie","userRO","eventAction","eventCategory","chromeExtension","PLAYLISTS","isOffline","interceptors","use","status","Promise","reject","css","rwd","Breakpoint","tooltipBound","keyframes","GlobalStyle","createGlobalStyle","HlsInstance","Hls","enableWorker","maxBufferSize","maxMaxBufferLength","mediaEl","canPlayType","easeOutQuart","t","easeLinear","SupportLevel","fadeIn","fadeOut","crossFade","isSwappingInstances","volumeTransitionId","isVolumeTransitioning","shouldReloadWhenOnline","offlineTimeoutId","masterController","setShowSoundsLockedModal","showSoundsLockedModal","setPlayerPlay","setVolume","play","hlsInstance","playPromise","e","instant","muteTransition","isMutedSet","getNormalizedVolume","volumeFadeIn","volumeFadeOut","volumeTransition","volumeFadeDuration","duration","easing","worker","masterControllerVolume","clearInterval","terminate","volumeModifier","transitionId","setInterval","setIsLoaded","isLoaded","DURATION_TOLERANCE","instanceReplacement","fadeOutWorker","fadeInWorker","swapVideos","hlsInstancePrimary","hlsInstanceSecondary","useAudio","hiddenStyle","width","visibility","ref","playsInline","newState","PureComponent","supportLevel","setSupportLevel","video","setPlayerIsLoaded","setPlaying","setShowSoundsLockedModalAction","HLS_NATIVE","mapDispatchToProps","setMasterPlayerIsMutedThunk","ownProps","playersLoaded","setUseHomepagePlayers","isIOS","isIpadOS","playerContainer","audioEls","audioEl","handleSpaceClickThrottled","leading","useEventListener","key","sizes","acc","DisplayOnBreakpoint","airplane","bonfire","brownnoise","bubbles","cicadas","cityscape","coffeeshop","fan","fire","fireplace","forest","leaves","oceanwaves","office","pinknoise","rain","rainontent","seaside","spaceengine","summernight","thunderstorm","train","tropicalforest","underwater","washingmachine","water","waterfall","waterstream","whitenoise","wind","windintrees","Icons","Object","Icon","showHomepageModal","playerPage","sharedComboIsLoading","sharedCombo","showSharePlayModal","baseTitle","baseSlice","setShowHomepageModal","setPlayerPage","setSharedCombo","setSharedComboIsLoading","setShowSharePlayModal","setBaseTitle","getBase","hours","minutes","seconds","formatSessionTime","actualTimeText","sendPushNotification","Push","icon","showBreakNotification","generatePlayerUrl","lastVolume","scheduledShuffle","crossFadeInStartTime","crossFadeInDuration","crossFadeInDelay","crossFadeOutStartTime","crossFadeOutDuration","pro","playersHomepage","as","disabled","comboVolumeReturnTime","changeValue","returnTime","playersSlice","el","playerItem","setPlayerShuffling","stopPlayersAfterShuffle","setVolumeAfterShuffle","setShuffleTime","getPlayers","MultiColors","MultiColorsIcon","appStoreBadge","playStoreBadge","chromeStoreBadge","AppStoreBadge","PlayStoreBadge","ChromeStoreBadge","account","accountSmall","audioPreview","check","decrease","deleteIcon","download","edit","fbFooter","increase","info","leftArrow","markdownPreview","muted","mutedSmall","note","remove","rename","rightArrow","saved","share","sound","soundSmall","textEditor","textEditorSmall","twFooter","email","fb","tw","cancel","replay","settings","skip","delete","AccountIcon","AccountSmallIcon","AudioPreviewIcon","CheckIcon","DecreaseIcon","DeleteIcon","DownloadIcon","EditIcon","FbFooterDarkIcon","IncreaseIcon","InfoIcon","LeftArrowIcon","MarkdownPreviewIcon","MutedIcon","MutedSmallIcon","NoteIcon","OscillationIcon","RemoveIcon","RenameIcon","RightArrowIcon","SavedIcon","ShareIcon","ShuffleIcon","SoundIcon","SoundSmallIcon","TextEditorIcon","TextEditorSmallIcon","TwFooterIcon","EmailIcon","FbIcon","TwIcon","CancelIcon","PauseIcon","PlayIcon","ReplayIcon","SettingsIcon","SkipIcon","google","fbFooterDark","twFooterDark","GoogleIcon","FbFooterIcon","TwFooterDarkIcon","onboardingStep11","onboardingStep12","onboardingStep13","onboardingStep14","onboardingStep2","onboardingStep3","onboardingStep4","onboardingStep5","onboardingStep6","OnboardingStep11Icon","OnboardingStep12Icon","OnboardingStep13Icon","OnboardingStep14Icon","OnboardingStep2Icon","OnboardingStep3Icon","OnboardingStep4Icon","OnboardingStep5Icon","OnboardingStep6Icon","beautifulAmbients","creativeThinking","motivation","noiseBlocker","productivity","relax","sleep","studying","writing","PlayerIcons","setPlayerPlayingThunk","setMasterPlayerVolumeThunk","setOscillationThunk","params","setCookie","expires","secure","httpOnly","req","Row","GridWrapper","createSelector","argIndex","getPlayersAreLoaded","GhostButton","OutlineButton","SolidButton","plans","isLoadingPlans","currentSubscription","paymentHistory","teamMembers","highRiskTransaction","highRiskTransactionModalIsOpen","subscriptionsSlice","setSubscriptionPlans","setIsLoadingPlans","setSubscription","setPaymentHistory","setTeamMembers","addTeamMember","removeTeamMember","teamMember","resetSubscriptions","setHighRiskTransaction","setHighRiskTransactionModalIsOpen","setUserWasSubscriber","getSubscriptions","context","cachedBuffers","timeEndNotification","breakEndNotification","prepareWebAudioContext","fetch","resp","buffer","audioContext","decodedData","decodedBuffer","getSourceBuffer","sourceBuffer","playWebAudioTimeEndNotification","isSafariDesktop","playWebAudioBreakEndNotification","webAudioTouchUnlock","unlock","Error","console","getSessionCountForDayThunk","day","setSessionsForDay","sessionsForDay","sessionCount","setAllSessionsCompleted","allSessionsCompleted","allTimeSessionCount","startTimerThunk","wasTimerRun","setTimerIsActive","isActive","pauseTimerThunk","mutedByTimer","resumeTimerThunk","ShareType","content","setTimerComboPlayingThunk","playlistToPlay","position","isSkipped","sessionsCompleted","isPaused","longBreak","shortBreak","workInSession","isUserFree","previousTimerType","setCurrentTimerType","incrementAllSessionsCompleted","savedSessionState","sessionType","dismissSessionThunk","resetSavedSessionState","setTimerConfigThunk","updateTimerConfigThunk","isRunning","saveReplayCount","replayCount","ModalRoot","Mask","Container","CloseButton","Title","Text","Arrow","TooltipMessage","CancelAction","DeleteAction","ActionsWrapper","__export","module","exports","Worker","FavouritesObserverMiddleware","OfflineStateObserverMiddleware","addEventListener","setOfflineState","UserAccountChangeObserver","actualUser","accountType","alias","aliases","chromeExtensionReducer","wrapStore","noisliStore","hasAskForPermission","setHasAskForPermissionInSession","extraReducers","runtime","reload","getChromeExtension","passwordLock","showLimitReachedModal","setPasswordLock","getUsers","useEffect","PlayerMasterController","location","render","getElementById","backgroundVariant","variant","randomNumber","SubscriptionsApi","coupon","xForwardedFor","ips","userIp","ipChunks","realIp","ip","TeamApi","setHighRiskTransactionThunk","HighRiskTransactionStatus","userData","shuffleTime","subscription","wasSubscriber","primaryDark","primaryLight","primaryLighter","primary5","white","white15","white30","white40","white50","white66","black","black02","black04","black05","black08","black10","black13","black16","black20","black25","black35","grey50","grey25","lightGrey1","lightGrey2","lightGrey3","lightGrey4","lightGrey5","red1","red2","red3","red4","test","navigator","userAgent","vendor","md","configLoaded","isTerminatingSession","isLongBreak","isShortBreak","timerTitle","autoStart","sessionsCount","showTimerOnBrowserTab","webNotification","updateTimerConfigReducer","textsSlice","Session","getTimer","resetText","getTexts","hex","match","exec","cdnUrl","prodCdnUrl","looptestCdnUrl","webAudioUrl","webAudioChunkUrl","timeEndNotificationUrl","breakEndNotificationUrl","pageview","ga","useGoogleAnalytics","actionName","eventLabel","FREE","BUSINESS_MEMBER","BUSINESS_ADMIN","PRO"],"mappings":"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","file":"static/js/background.87a81219.chunk.js","sourcesContent":["import * as React from 'react';\nimport colors from 'app/styles/_colors';\nimport { colorCycler } from '../../styles/backgroundColors';\n\nexport interface BackgroundShuffleContextProps {\n  color: string;\n  forceColorUpdate?: () => void;\n  changeColor?: (color: string, force?: boolean) => void;\n  colorCycler?: ReturnType<typeof colorCycler>;\n}\n\n/**\n * React contenxt that holds current background shuffle color and references to provider functions\n * @type {React.Context<BackgroundShuffleContextProps>}\n */\nconst BackgroundShuffleContext = React.createContext<BackgroundShuffleContextProps>({\n  color: colors.primary,\n});\n\nexport default BackgroundShuffleContext;\n","import random from 'lodash/random';\n\n/**\n * Static background colors lsit\n * @type {string[]}\n */\nexport const StaticBackgroundColors = [\n  '#14614B',\n  '#FFCE1A',\n  '#FEBE12',\n  '#FA7900',\n  '#F16B6B',\n  '#E54B4B',\n  '#DB334E',\n  '#F99899',\n  '#CC89A2',\n  '#AB2669',\n  '#CB92E2',\n  '#4940AA',\n  '#1C128B',\n  '#52BAD5',\n  '#3498DB',\n  '#29366E',\n  '#63D386',\n  '#1ABC9C',\n  '#5CE5B4',\n  '#345773',\n];\n\n/**\n * Colros available for background cycling\n * @type {string[]}\n */\nexport const CyclingBackgroundColors = [\n  '#FED156',\n  '#FFCE1A',\n  '#F1C40F',\n  '#E3B63D',\n  '#FEBE12',\n  '#F39C12',\n  '#E67E22',\n  '#FA7900',\n  '#D35400',\n  '#BA591F',\n  '#FFA69E',\n  '#F99899',\n  '#F16B6B',\n  '#EA6F5B',\n  '#FF5B5B',\n  '#E54B4B',\n  '#D25A5A',\n  '#D83939',\n  '#D92929',\n  '#BA1616',\n  '#DB334E',\n  '#CC89A2',\n  '#C26787',\n  '#DC3D66',\n  '#BD3559',\n  '#AB2669',\n  '#993366',\n  '#782344',\n  '#CB92E2',\n  '#9B59B6',\n  '#8E368B',\n  '#4940AA',\n  '#1C128B',\n  '#52BAD5',\n  '#3498DB',\n  '#0B8CE3',\n  '#2980B9',\n  '#16528E',\n  '#29366E',\n  '#8A9BB1',\n  '#345773',\n  '#34495E',\n  '#2C9AB7',\n  '#06B3DB',\n  '#72BDC2',\n  '#72C1B0',\n  '#1ABC9C',\n  '#6DBC99',\n  '#449A88',\n  '#16A085',\n  '#398D70',\n  '#167C80',\n  '#27695E',\n  '#66CC99',\n  '#5CE5B4',\n  '#63D386',\n  '#3BB561',\n  '#219953',\n  '#96D35B',\n  '#64AE60',\n  '#78AD45',\n  '#98AE60',\n  '#547B30',\n  '#527D5A',\n];\n\n/**\n * Generator of new color for background shuffler\n * @returns {Generator<string, void, unknown>}\n */\nexport function* colorCycler(): IterableIterator<string> {\n  while (true) {\n    const index = random(0, CyclingBackgroundColors.length - 1);\n    yield CyclingBackgroundColors[index];\n  }\n}\n","import React from 'react';\nimport colors from 'app/styles/_colors';\nimport { connect } from 'react-redux';\n// eslint-disable-next-line import/no-unresolved,import/no-webpack-loader-syntax\nimport TickWorker from 'worker-loader?name=static/[hash].worker.js!../../WebWorkers/tick.worker';\nimport BackgroundShuffleContext from './BackgroundShuffleContext';\nimport { colorCycler } from '../../styles/backgroundColors';\nimport { RootState } from '../../redux';\nimport { TickWorkerInterface } from '../../WebWorkers/tick.worker';\nimport {\n  colorToRGBParts, RGBParts, getPartsDelta, getPartsStep, partsToRgb, sumParts,\n} from './utils';\nimport {hex2Rgba, rgbaSetAlpha} from \"../../styles/utils\";\n\nenum StaticColorState {\n  STATIC,\n  DYNAMIC,\n  NO_USER,\n}\n\ninterface Props {\n  backgroundColor: string;\n}\n\ninterface State {\n  color: string;\n  hasStaticColor: StaticColorState;\n\n  backgroundColor: string;\n  lastBackgroundColor: string;\n\n  isInitialized: boolean;\n}\n\n/**\n * Provider class that implements background shuffle logic and\n * share background shuffle context to components\n */\nclass BackgroundShuffleProvider extends React.Component<Props, State> {\n  readonly colorCyclerGenerator = colorCycler();\n\n  // Cycler config\n  readonly config = {\n    TRANSITION_DURATION: 10000,\n    TIMEOUT_DURATION: 20000,\n    INTERVAL: 1000 / 6,\n  };\n\n  tickWorker?: TickWorkerInterface;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      color: colors.primary,\n      hasStaticColor: StaticColorState.NO_USER,\n\n      backgroundColor: '',\n      lastBackgroundColor: '',\n\n      isInitialized: false,\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: Readonly<Props>) {\n    // if user is logged of\n    if (!nextProps.backgroundColor) {\n      return {\n        hasStaticColor: StaticColorState.NO_USER,\n      };\n    }\n\n    const hasStaticColor = nextProps.backgroundColor !== 'multicolor'\n      ? StaticColorState.STATIC\n      : StaticColorState.DYNAMIC;\n\n    return {\n      hasStaticColor,\n    };\n  }\n\n  componentDidMount(): void {\n    this.handleStaticColorChange();\n  }\n\n  // Check backgroud ssettings on update and run static or dynamic background\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>): void {\n    const { backgroundColor } = this.props;\n    const { hasStaticColor } = this.state;\n\n    if (prevState.hasStaticColor !== hasStaticColor) {\n      this.handleStaticColorChange();\n    }\n\n    if (prevProps.backgroundColor !== backgroundColor\n      && hasStaticColor === StaticColorState.STATIC\n    ) {\n      if (backgroundColor === 'multicolor') return;\n      this.changeColor(backgroundColor, true);\n    }\n  }\n\n  /**\n   * Method that generate new background transition target\n   */\n  setNextBackgroundColor() {\n    this.setState((prevState) => ({\n      lastBackgroundColor: prevState.backgroundColor,\n      backgroundColor: this.colorCyclerGenerator.next().value,\n    }));\n  }\n\n  /**\n   * Method that apply color change\n   * @param color\n   * @param force\n   */\n  changeColor = (color: string, force = false) => {\n    const { hasStaticColor } = this.state;\n    if (hasStaticColor === StaticColorState.STATIC && !force) {\n      return;\n    }\n    this.setState({\n      color,\n    });\n    // direct change of colors\n    this.updateColor(color);\n  }\n\n  updateColor = (color: string) => {\n    const proPlayersGradientMask = document.querySelectorAll('.proPlayersGradientMask');\n    const footer = document.querySelector<HTMLDivElement>('.footer');\n    const header = document.querySelector<HTMLDivElement>('.header');\n    const prevArrow = document.querySelector<HTMLDivElement>('.playlistPrevArrow');\n    const nextArrow = document.querySelector<HTMLDivElement>('.playlistNextArrow');\n    const textEditorGradient = document.querySelector<HTMLDivElement>('.textEditorGradient');\n    const textEditorOptionsWrapper = document.querySelector<HTMLDivElement>('.textEditorOptionsWrapper');\n\n    let transparentColor;\n    if (color[0] === '#') {\n      transparentColor = hex2Rgba(color, 0);\n    } else {\n      transparentColor = rgbaSetAlpha(color, 0);\n    }\n\n    const proPlayersGradient = `linear-gradient(0deg, ${color} 0%, ${color} 30%, ${transparentColor} 100%)`;\n    const prevArrowGradient = `linear-gradient(90deg, ${color} 0%, ${color} 40%, ${transparentColor} 100%)`;\n    const nextArrowGradient = `linear-gradient(270deg, ${color} 0%, ${color} 40%, ${transparentColor} 100%)`;\n    const textEditorHeaderGradient = `linear-gradient(to bottom, ${color} 0%, ${color} 70%, ${transparentColor} 100%)`;\n    const textEditorOptionsWrapperGradient = `linear-gradient(90deg, ${transparentColor} 0%, ${color} 30%, ${color} 100%)`;\n\n    Array.from(proPlayersGradientMask).forEach((player) => {\n      (player as HTMLDivElement).style.background = proPlayersGradient;\n    });\n\n    if (prevArrow) prevArrow.style.background = prevArrowGradient;\n    if (nextArrow) nextArrow.style.background = nextArrowGradient;\n    if (textEditorGradient) textEditorGradient.style.background = textEditorHeaderGradient;\n    if (textEditorOptionsWrapper) textEditorOptionsWrapper.style.background = textEditorOptionsWrapperGradient;\n    if (footer) footer.style.backgroundColor = color;\n    if (header) header.style.backgroundColor = color;\n    document.body.style.backgroundColor = color;\n  }\n\n  /**\n   * Method that runs color change after update depending on current static color setup\n   */\n  handleStaticColorChange() {\n    const { hasStaticColor } = this.state;\n\n    switch (hasStaticColor) {\n      case StaticColorState.DYNAMIC: {\n        this.setState({\n          backgroundColor: colors.primary,\n        });\n        this.changeColor(colors.primary);\n        this.updateColor(colors.primary);\n        this.runCycler();\n        break;\n      }\n\n      case StaticColorState.STATIC: {\n        this.stopColorCycling();\n        this.applyUserSelectedColor();\n        break;\n      }\n\n      case StaticColorState.NO_USER: {\n        this.changeColor('');\n        this.updateColor('');\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    this.setState({\n      isInitialized: true,\n    })\n  }\n\n  /**\n   * Method that run cycle on worker\n   */\n  runCycler() {\n    if (!this.tickWorker) {\n      this.tickWorker = new TickWorker();\n    }\n\n    this.tickWorker.onmessage = this.cyclerOnMessageHandler.bind(this);\n\n    this.tickWorker.postMessage({\n      command: 'start_timeout',\n      payload: {\n        timeout: this.config.TIMEOUT_DURATION,\n      },\n    });\n  }\n\n  /**\n   * Method that is handler of tick from worker\n   * it runs new color and prepares parts to animate\n   * then it runs method that cycle to target\n   */\n  cyclerOnMessageHandler() {\n    this.setNextBackgroundColor();\n\n    const { lastBackgroundColor, backgroundColor } = this.state;\n    const startParts = colorToRGBParts(lastBackgroundColor);\n    const nextParts = colorToRGBParts(backgroundColor);\n\n    if (!startParts || !nextParts) {\n      return;\n    }\n\n    this.runColorChange(startParts, nextParts);\n  }\n\n  /**\n   * Method that runs color cycling\n   * @param startColor\n   * @param endColor\n   */\n  runColorChange(startColor: RGBParts, endColor: RGBParts) {\n    // setup\n    let step = 1;\n    let resultColor: RGBParts = { ...startColor };\n    const steps = Math.floor(this.config.TRANSITION_DURATION / this.config.INTERVAL);\n    const colorDelta = getPartsDelta(startColor, endColor);\n    const colorStep = getPartsStep(colorDelta, steps);\n\n    // Function that is called in every step\n    const stepFunction = () => {\n      if (step > steps) return;\n      // if last step, change color to target color and run next cycle\n      if (step === steps) {\n        this.changeColor(partsToRgb(endColor));\n        this.runCycler();\n        return;\n      }\n\n      step += 1;\n      resultColor = sumParts(resultColor, colorStep);\n      this.changeColor(partsToRgb(resultColor));\n\n      // send command to tick worker to start next timeout\n      this.tickWorker?.postMessage({\n        command: 'start_timeout',\n        payload: {\n          timeout: this.config.INTERVAL,\n        },\n      });\n    };\n\n    // run step function\n    if (this.tickWorker) {\n      this.tickWorker.onmessage = stepFunction.bind(this);\n      stepFunction();\n    }\n  }\n\n  /**\n   * Stop tick worker\n   */\n  stopColorCycling() {\n    this.tickWorker?.postMessage({\n      command: 'stop',\n    });\n    this.tickWorker?.terminate();\n    this.tickWorker = undefined;\n  }\n\n  /**\n   *  Method that applies user selected static color\n   */\n  applyUserSelectedColor() {\n    const { backgroundColor } = this.props;\n    this.changeColor(backgroundColor, true);\n    this.updateColor(backgroundColor);\n  }\n\n  forceReapplyOfColor() {\n    const { backgroundColor } = this.props;\n    const { hasStaticColor, color, isInitialized } = this.state;\n\n    if (!isInitialized) {\n      setTimeout(() => this.forceReapplyOfColor(), 200);\n    }\n\n    switch (hasStaticColor) {\n      case StaticColorState.DYNAMIC: {\n        this.updateColor(color);\n        break;\n      }\n\n      case StaticColorState.STATIC: {\n        this.updateColor(backgroundColor);\n        break;\n      }\n\n      case StaticColorState.NO_USER: {\n        this.updateColor('');\n        break;\n      }\n\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const { color } = this.state;\n    const { changeColor, colorCyclerGenerator, forceReapplyOfColor } = this;\n\n    return (\n      <BackgroundShuffleContext.Provider\n        value={{\n          color,\n          changeColor,\n          colorCycler: colorCyclerGenerator,\n          forceColorUpdate: forceReapplyOfColor.bind(this),\n        }}\n      >\n        {children}\n      </BackgroundShuffleContext.Provider>\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  backgroundColor: state.users.userDetails.backgroundColor,\n});\n\nexport default connect(\n  mapStateToProps,\n)(BackgroundShuffleProvider);\n","import { hex2Rgb } from '../../styles/utils';\n\nexport interface RGBParts {\n  r: number;\n  g: number;\n  b: number;\n}\n\n/**\n * Convert rgb to color parts\n * @param color {string} - color in rgb format\n * @returns {{r: number; b: number; g: number} | null}\n */\nexport const rgbToParts = (color: string): RGBParts | null => {\n  const rgb = color.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n  if (rgb) {\n    return {\n      r: parseInt(rgb[1], 10),\n      g: parseInt(rgb[2], 10),\n      b: parseInt(rgb[3], 10),\n    };\n  }\n\n  return null;\n};\n\n/**\n * Convert parts to rgb color\n * @param r\n * @param g\n * @param b\n * @returns {string}\n */\nexport const partsToRgb = (\n  { r, g, b }: RGBParts,\n): string => `rgb(${Math.floor(r)}, ${Math.floor(g)}, ${Math.floor(b)})`;\n\n\n/**\n * Function that convert color to rgb parts\n * @param color {string} - hexadecimal or rgb notation\n * @returns {RGBParts | null}\n */\nexport const colorToRGBParts = (color: string) => {\n  if (color[0] === '#') {\n    return rgbToParts(hex2Rgb(color));\n  }\n  return rgbToParts(color);\n};\n\n/**\n * Calculate delta between 2 rgb parts\n * @param startParts\n * @param endParts\n * @returns {{r: number; b: number; g: number}}\n */\nexport const getPartsDelta = (startParts: RGBParts, endParts: RGBParts): RGBParts => ({\n  r: endParts.r - startParts.r,\n  g: endParts.g - startParts.g,\n  b: endParts.b - startParts.b,\n});\n\n/**\n * Get step value of each part\n * @param partsDelta\n * @param steps\n * @returns {{r: number; b: number; g: number}}\n */\nexport const getPartsStep = (partsDelta: RGBParts, steps: number): RGBParts => ({\n  r: partsDelta.r / steps,\n  g: partsDelta.g / steps,\n  b: partsDelta.b / steps,\n});\n\n/**\n * Sum rgb parts\n * @param basePart\n * @param addPart\n * @returns {{r: number; b: number; g: number}}\n */\nexport const sumParts = (basePart: RGBParts, addPart: RGBParts): RGBParts => ({\n  r: basePart.r + addPart.r,\n  g: basePart.g + addPart.g,\n  b: basePart.b + addPart.b,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface Props {\n  selector: string;\n}\n\n/**\n * Portal component. Us it to create custom portal on page element\n */\nclass Portal extends React.Component<Props> {\n  element: Element | null = null;\n\n  componentDidMount() {\n    const { selector } = this.props;\n    this.element = document.querySelector(selector);\n    this.forceUpdate();\n  }\n\n  render(): React.ReactPortal | null {\n    const { children } = this.props;\n\n    if (this.element === null) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(children, this.element);\n  }\n}\n\nexport default Portal;\n","import React from 'react';\nimport { Transition } from 'react-transition-group';\nimport { RemoveIcon } from '@noisli/icons';\nimport Portal from '../Portal/Portal';\nimport {\n  Container, Mask, ModalRoot, CloseButton,\n} from './Modal.styled';\n\nconst duration = 300;\n\nconst transitionStyles = {\n  entered: {\n    transition: `opacity ${duration}ms ease-in-out`,\n    opacity: 1,\n    overflow: 'auto',\n  },\n  exiting: {\n    transition: `opacity ${duration}ms ease-in-out`,\n    opacity: 0,\n    overflow: 'visible',\n  },\n  entering: {},\n  exited: {},\n  unmounted: {},\n};\n\ninterface Props {\n  isOpen?: boolean;\n  onCloseClick?: () => void;\n}\n\n/**\n * Main modal component. Use it for building custom modals\n * @param children\n * @param onCloseClick\n * @param isOpen\n * @returns {any}\n * @constructor\n */\nconst Modal: React.FC<Props> = ({\n  children,\n  onCloseClick,\n  isOpen = false,\n}) => {\n  React.useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'auto';\n    }\n\n    return () => {\n      document.body.style.overflow = '';\n    };\n  }, [isOpen]);\n\n  return (\n    <Portal selector=\"#modal\">\n      <Transition\n        appear\n        // mountOnEnter\n        unmountOnExit\n        in={isOpen}\n        timeout={duration}\n      >\n        {(state) => (\n          <ModalRoot\n            style={{\n              ...transitionStyles[state],\n            }}\n          >\n            <Mask>\n              <Container>\n                { onCloseClick && (\n                  <CloseButton onClick={onCloseClick}><RemoveIcon /></CloseButton>\n                )}\n                {children}\n              </Container>\n            </Mask>\n          </ModalRoot>\n        )}\n      </Transition>\n    </Portal>\n  );\n};\n\nexport default Modal;\n","import styled from 'styled-components';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const UpgradeImage = styled.div`\n  background: url('/img/upgrade.svg') no-repeat center;\n  background-size: contain;\n  width: 290px;\n  height: 91px;\n  margin: auto;\n`;\n\nexport const ButtonWrapper = styled.div`\n  width: 200px;\n  padding-bottom: 32px;\n  margin: 0 auto;\n`;\n","import React from 'react';\nimport { Text, Title } from 'app/components/Modal/Modal.styled';\n\nimport { SolidButton } from 'app/components/Button/Button.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getBase, setShowUpgradeModal } from 'app/redux/modules/base';\nimport { GridWrapper } from '../Grid/Grid.styled';\nimport Modal from '../Modal/Modal';\nimport { UpgradeImage, ButtonWrapper } from './UpgradeModal.styled';\n\n\nconst UpgradeModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const { showUpgradeModal } = useSelector(getBase);\n\n  const handleOnCloseClick = () => {\n    dispatch(setShowUpgradeModal({\n      showUpgradeModal: false,\n    }));\n  };\n\n  return (\n    <Modal\n      isOpen={showUpgradeModal}\n      onCloseClick={handleOnCloseClick}\n    >\n      <GridWrapper doubleSpace>\n        <UpgradeImage />\n      </GridWrapper>\n      <GridWrapper>\n        <Title>\n          Want to upgrade?\n        </Title>\n      </GridWrapper>\n      <GridWrapper doubleSpace>\n        <Text center>\n          Please access Noisli from a desktop\n          <br />\n          or a laptop device to upgrade your plan.\n        </Text>\n      </GridWrapper>\n      <ButtonWrapper>\n        <SolidButton onClick={handleOnCloseClick} withSimpleShadow>Ok</SolidButton>\n      </ButtonWrapper>\n    </Modal>\n  );\n};\n\nexport default UpgradeModal;\n","import styled from 'styled-components';\n\nexport interface StyledBannerProps {\n  show?: boolean;\n}\n\nexport const StyledBanner = styled.div<StyledBannerProps>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  background-color: ${(props) => props.theme.colors.lightGrey2};\n  padding: 16px 40px;\n  transform: translateY(-100%);\n  transition: transform ${(props) => props.theme.transition};\n\n  color: ${(props) => props.theme.colors.lightGrey1};\n  font-size: 13px;\n  font-weight: 600;\n  line-height: 22px;\n  min-height: 54px;\n\n  z-index: 10000;\n  visibility: hidden;\n\n  ${(props) => props.show && `\n    visibility: visible;\n    transform: translateY(0);\n  `}\n`;\n\nexport const ErrorIcon = styled.span`\n  position: absolute;\n  top: 19px;\n  left: 16px;\n  color: ${(props) => props.theme.colors.red1};\n`;\n\nexport const CloseIcon = styled.span`\n  position: absolute;\n  top: 20px;\n  right: 16px;\n  color: ${(props) => props.theme.colors.lightGrey3};\n  cursor: pointer;\n  transition: color ${(props) => props.theme.transition};\n\n  &:hover {\n    color: ${(props) => props.theme.colors.lightGrey1};\n  }\n`;\n","import React from 'react';\nimport { NoteIcon, RemoveIcon } from '@noisli/icons';\nimport {\n  StyledBanner, ErrorIcon, CloseIcon, StyledBannerProps,\n} from './ErrorBanner.styled';\nimport Portal from '../Portal/Portal';\n\ninterface ErrorBannerProps extends StyledBannerProps {\n  message?: string;\n  onCloseClick?: () => void;\n}\n\n/**\n * Error banner component that appear on top of page if something happen\n * @param message\n * @param show\n * @param onCloseClick\n * @returns {any}\n * @constructor\n */\nconst ErrorBanner: React.FC<ErrorBannerProps> = ({\n  message, show, onCloseClick,\n}) => {\n  const [timeoutId, setTimeoutId] = React.useState(0);\n\n  React.useEffect(() => {\n    if (show) {\n      clearTimeout(timeoutId);\n\n      const id = setTimeout(() => {\n        if (onCloseClick) {\n          onCloseClick();\n        }\n      }, 5000);\n\n      setTimeoutId(id);\n    }\n  }, [show]);\n\n  return (\n    <Portal selector=\"#portal\">\n      <StyledBanner show={show}>\n        <ErrorIcon>\n          <NoteIcon />\n        </ErrorIcon>\n        {message}\n        <CloseIcon onClick={onCloseClick}>\n          <RemoveIcon />\n        </CloseIcon>\n      </StyledBanner>\n    </Portal>\n  );\n};\n\nexport default ErrorBanner;\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport App from 'next/app';\nimport Router from 'next/router';\nimport { AppWithReduxInterface } from 'app/redux/with-redux-store';\nimport { setIsMobile } from 'app/redux/modules/base';\nimport theme from 'app/styles/theme';\nimport GlobalStyle from 'app/styles/global';\nimport { setAuthHeader } from 'app/components/withAuth/withAuth';\nimport {\n  initializeLiteStore, initializeStore, RootState, Store,\n} from '../redux';\nimport PlayerMasterController\n  from '../components/_Core/PlayerMasterController/PlayerMasterController/PlayerMasterController';\nimport BackgroundShuffleProvider from '../components/BackgroundShuffleContext/BackgroundShuffleProvider';\nimport UpgradeModal from '../components/UpgradeModal/UpgradeModal';\nimport ErrorBanner from '../components/ErrorBanner/ErrorBanner';\nimport mobileDetect from '../utils/mobileDetect';\nimport * as gtag from '../utils/GoogleAnalytics/gtag';\n\n// Send pageview after every route change\nRouter.events.on('routeChangeComplete', url => gtag.pageview(url?.split('?')[0]));\n\n// Define if we are on server\nconst isServer = typeof window === 'undefined';\nconst NEXT_REDUX_STORE = 'CSSUnitValues';\n\n/**\n * Function that initialize store or retirive already existing store\n * Store is assgned to window for compabiblity purposes of next.js\n * @param initialState\n * @returns {EnhancedStore<RootState, AnyAction> | any}\n */\nexport function getOrCreateStore(initialState: RootState | undefined = undefined): Store {\n  // Create store if unavailable on the client and set it on the window object\n  // @ts-ignore\n  if (isServer) {\n    return initializeLiteStore(initialState);\n  }\n  // @ts-ignore\n  if (!window[NEXT_REDUX_STORE]) {\n    // @ts-ignore\n    window[NEXT_REDUX_STORE] = initializeStore(initialState);\n  }\n  // @ts-ignore\n  return window[NEXT_REDUX_STORE];\n}\n\n/**\n * Base App component\n * It is used on every page as top level component\n * Refer to next.js docs to find out more\n *\n * IMPORTANT!!!!\n * NoisliApp component is using pageProp called `withPlayer` to determine if players should be loaded on page\n * You can pass that prop in getInitialProps static method of page component\n * One of examples of usage you might look into: ./timer/index.tsx\n * Without passing this prop, the sound players will be removed\n * !!!!\n */\nclass NoisliApp extends App<AppWithReduxInterface> {\n  reduxStore: Store = getOrCreateStore();\n\n  state = {\n    isMobile: false,\n    showOfflineAlert: false,\n  };\n\n  showOfflineAlert = () => {\n    this.setState({\n      showOfflineAlert: true,\n    });\n  };\n\n  hideOfflineAlert = () => {\n    this.setState({\n      showOfflineAlert: false,\n    });\n  };\n\n  componentDidMount() {\n    this.setState({\n      isMobile: mobileDetect(),\n    });\n\n    if (this.reduxStore) {\n      this.reduxStore.dispatch(setIsMobile({\n        isMobile: mobileDetect(),\n      }));\n    }\n\n    setAuthHeader();\n\n    window.addEventListener('offline', this.showOfflineAlert);\n    window.addEventListener('online', this.hideOfflineAlert);\n  }\n\n  componentWillUnmount(): void {\n    window.removeEventListener('offline', this.showOfflineAlert);\n    window.removeEventListener('online', this.hideOfflineAlert);\n  }\n\n  render() {\n    const { showOfflineAlert } = this.state;\n    const { Component, pageProps } = this.props;\n\n    return (\n      <ThemeProvider theme={theme}>\n        <Provider store={this.reduxStore}>\n          <BackgroundShuffleProvider>\n            <GlobalStyle />\n            <Component {...pageProps} />\n            {pageProps.withPlayer && (\n              <>\n                <PlayerMasterController useHomepage={pageProps.useHomepage} />\n                <audio src=\"https://cdn2.noisli.com/alerts/timerend.mp3\" id=\"noisli-timer-end\" />\n                <audio src=\"https://cdn2.noisli.com/alerts/breakend.mp3\" id=\"noisli-break-end\" />\n              </>\n            )}\n            <UpgradeModal />\n            <ErrorBanner\n              show={showOfflineAlert}\n              message=\"Oops, it looks like you're offline. Please check your Internet connection.\"\n            />\n          </BackgroundShuffleProvider>\n        </Provider>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport type NoisliAppType = typeof NoisliApp;\n\nNoisliApp.getInitialProps = async (appContext) => {\n  const appProps = await App.getInitialProps(appContext);\n  const res = appContext?.ctx?.res;\n  res?.setHeader('X-Frame-Options', 'deny');\n  return { ...appProps };\n};\n\nexport default NoisliApp;\n","/* eslint-disable @typescript-eslint/camelcase */\nimport React from 'react';\nimport { AccountType } from '@noisli/common';\nimport { useSelector } from 'react-redux';\nimport { getUsers } from '../../redux/modules/users';\n\nexport const GA_TRACKING_ID = process.env.REACT_APP_GA_TRACKING_CODE;\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/pages\nexport const pageview = (url: string) => {\n  (window as any).gtag?.('config', GA_TRACKING_ID, {\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    page_path: url,\n  }, { anonymize_ip: true });\n};\n\ninterface EventProps {\n  action: string;\n  event_category: string;\n  event_label?: string;\n}\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/events\nexport const event = ({\n  action, ...props\n}: EventProps) => {\n  (window as any).gtag?.('event', action, props);\n};\n\ntype UseGoogleAnalyticsProps = {\n  action: string;\n  event_category: string;\n  accountType?: AccountType;\n}\n\n/**\n * Custom hook that handles google analytics report\n * It uses active user account type to define actions of event\n */\nexport const useGoogleAnalytics = () => {\n  const { user } = useSelector(getUsers);\n\n  React.useEffect(() => {\n    const event_category = 'Pageview';\n    let actionName;\n    let event_label;\n\n    switch (user.accountType) {\n      case AccountType.FREE:\n        event_label = 'Free';\n        actionName = 'In';\n        break;\n      case AccountType.BUSINESS_MEMBER:\n      case AccountType.BUSINESS_ADMIN:\n        event_label = 'Business';\n        actionName = 'In';\n        break;\n      case AccountType.PRO:\n        event_label = 'Pro';\n        actionName = 'In';\n        break;\n      default:\n        actionName = 'Out';\n        break;\n    }\n\n    event({\n      action: actionName,\n      event_category,\n      event_label,\n    });\n  }, []);\n};\n","import axios from 'axios';\nimport { getOrCreateStore } from '../pages/_app';\n\nconst protectedPaths = [\n  '/delete-account',\n  '/playlists',\n  '/favorites',\n  '/text-editor',\n  '/account',\n  '/billing',\n  '/billing/change-plan',\n  '/billing/edit-billing-cycle',\n  '/billing/edit-payment-details',\n  '/billing/edit-team-size',\n  '/discount',\n  '/preferences',\n  '/team',\n  '/timer',\n];\n\n/**\n * Setup custom axios instance with interceptor to handle unauthorized state\n */\nconst axiosInstance = axios.create();\naxiosInstance.interceptors.response.use((response) => response, (error) => {\n  if (error.response.status === 401) {\n    if (window) {\n      const store = getOrCreateStore();\n      // we need to check if we have user in store (if user is logged in)\n      if (store.getState()?.users?.user?.uuid || protectedPaths.some(path => window.location.pathname.includes(path))) {\n        window.location.replace('/login');\n      }\n    }\n  }\n  throw error;\n});\n\nexport default axiosInstance;\n","import React from 'react';\nimport Router from 'next/router';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { UserIncludes, UserRO } from '@noisli/common';\nimport { NextContextWithRedux } from 'app/redux/with-redux-store';\nimport { setUserDataWithIncludesThunk } from 'app/redux/modules/users/users.thunks';\nimport { destroyCookie, parseCookies } from 'nookies';\nimport UsersApi from 'app/Api/Users.api';\nimport axios from '../../Api/AxiosInstance';\n\n/**\n * Function that set auth header to axios instance for API requests validation\n * @param jwt\n * @param ctx\n * @returns {string}\n */\nexport const setAuthHeader = (jwt?: string, ctx?: NextContextWithRedux) => {\n  let token = jwt;\n\n  if (!token) {\n    const cookies = parseCookies(ctx);\n    token = cookies.jwt;\n  }\n\n  if (ctx) {\n    return token;\n  }\n\n  if (token) {\n    axios.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return token;\n};\n\n/**\n * Function that deletes AUthorization header\n */\nexport const resetAuthHeader = () => {\n  delete axios.defaults.headers.Authorization;\n};\n\n/**\n * Function to check state of user authorization\n * It calls checkUser method of UsersApi\n * Additionaly, we can define includes of user data\n * Function can be used both in server and client\n * If user is not authorized, do redirect to public pages\n * @param ctx\n * @param includes\n * @param next\n * @param redirectAfterFailedAuthCheck\n * @returns {Promise<UserRO | undefined | T>} - Returns user data if user is logged in or returns redirect to public page\n */\nconst auth = async (\n  ctx: NextContextWithRedux, { includes, next, redirectAfterFailedAuthCheck }: WithAuthOptions,\n): Promise<UserRO | undefined> => {\n  /*\n   * If `ctx.req` is available it means we are on the server.\n   * Additionally if there's no token it means the user is not logged in.\n   */\n  const token = setAuthHeader('', ctx);\n  try {\n    return await UsersApi.checkUser(ctx.req, includes, token);\n  } catch (e) {\n    if (token && e.response?.status !== 401) {\n      return ctx.user;\n    }\n    let Location = redirectAfterFailedAuthCheck || '/login';\n\n    if (ctx.req && ctx.res) {\n      const prevUrl = new URL(`${process.env.REACT_APP_APP_URL}${ctx.req.url}`);\n      const linkExpired = prevUrl.searchParams.get('linkExpired');\n      if (next) {\n        Location += `?next=${ctx.req.url}`;\n      }\n      if (linkExpired) {\n        Location = `${process.env.REACT_APP_APP_URL}/?linkExpired=true`;\n      }\n      ctx.res.writeHead(302, { Location });\n      ctx.res.end();\n      return undefined;\n    }\n\n    if (next) {\n      Location += `?next=${window.location.pathname}`;\n    }\n\n    Router.replace(Location);\n    return undefined;\n  }\n};\n\n/**\n * Function that calls logout to API and destroy any authorization items (cookie, header)\n * @param ctx\n * @returns {Promise<void>}\n */\nconst logout = async (ctx?: NextContextWithRedux) => {\n  try {\n    const { headers } = await UsersApi.logout();\n\n    if (ctx && ctx.req && ctx.res) {\n      destroyCookie(ctx, 'jwt', {\n        path: '/',\n      });\n      if (headers['set-cookie']) {\n        ctx.res.setHeader('set-cookie', headers['set-cookie']);\n      }\n      resetAuthHeader();\n    } else {\n      destroyCookie({}, 'jwt', {\n        path: '/',\n      });\n      resetAuthHeader();\n    }\n  } catch (e) {\n    destroyCookie(ctx, 'jwt', {\n      path: '/',\n    });\n    resetAuthHeader();\n  }\n};\n\n// Gets the display name of a JSX component for dev tools\nconst getDisplayName = (Component: React.ComponentType) => Component.displayName || Component.name || 'Component';\n\ninterface WithAuthOptions {\n  includes?: UserIncludes[];\n  next?: boolean;\n  redirectAfterFailedAuthCheck?: string;\n}\n\nexport interface Props {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  dispatch: Dispatch<any>;\n  userData?: UserRO;\n}\n\n\n/**\n * HOC function that locks page under the logged user only access\n * It calls auth check every time the page that user wants to reach is changed\n * It also provides options to get additional user data\n * @param WrappedComponent\n * @param options\n * @returns {ConnectedComponent<{displayName: string; getInitialProps(ctx: NextContextWithRedux): Promise<any>; new(props: Props): ({componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}} & React.Component<unknown, unknown>); contextType?: React.Context<any>; new<P, S>(props: Readonly<Props>): ({componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}} & React.Component<unknown, unknown>); new<P, S>(props: Props, context?: any): ({componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}} & React.Component<unknown, unknown>); prototype: {componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}}}, Omit<GetProps<{displayName: string; getInitialProps(ctx: NextContextWithRedux): Promise<any>; new(props: Props): ({componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}} & React.Component<unknown, unknown>); contextType?: React.Context<any>; new<P, S>(props: Readonly<Props>): ({componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}} & React.Component<unknown, unknown>); new<P, S>(props: Props, context?: any): ({componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}} & React.Component<unknown, unknown>); prototype: {componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}}}>, keyof Shared<DispatchProp<AnyAction>, GetProps<{displayName: string; getInitialProps(ctx: NextContextWithRedux): Promise<any>; new(props: Props): ({componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}} & React.Component<unknown, unknown>); contextType?: React.Context<any>; new<P, S>(props: Readonly<Props>): ({componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}} & React.Component<unknown, unknown>); new<P, S>(props: Props, context?: any): ({componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}} & React.Component<unknown, unknown>); prototype: {componentDidMount(): void; render: {(): any; (): React.ReactNode}; context: any; setState<K extends keyof unknown>(state: unknown, callback?: () => void): void; forceUpdate(callback?: () => void): void; readonly props: Readonly<Props> & Readonly<{children?: React.ReactNode}>; state: Readonly<unknown>; refs: {[p: string]: React.ReactInstance}}}>>> & {}>}\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withAuth(WrappedComponent: any, options: WithAuthOptions = {}) {\n  return connect()(\n    // @ts-ignore\n    class extends React.Component<Props> {\n      static displayName = `withAuth(${getDisplayName(WrappedComponent)})`;\n\n      static async getInitialProps(ctx: NextContextWithRedux) {\n        const data = await auth(ctx, options);\n\n        if (data) {\n          ctx.user = data;\n        }\n\n        const componentProps = WrappedComponent.getInitialProps\n          && await WrappedComponent.getInitialProps(ctx);\n\n        if (!data) {\n          return { ...componentProps };\n        }\n\n        return { ...componentProps, userData: data };\n      }\n\n      constructor(props: Props) {\n        super(props);\n\n        props.dispatch(setUserDataWithIncludesThunk(props.userData));\n      }\n\n      componentDidMount(): void {\n        const { dispatch, userData } = this.props;\n\n        dispatch(setUserDataWithIncludesThunk(userData));\n      }\n\n      render() {\n        return <WrappedComponent {...this.props} />;\n      }\n    },\n  );\n}\n\nexport { withAuth, auth, logout };\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Dispatch, AnyAction } from 'redux';\nimport sample from 'lodash/sample';\nimport { Combo } from 'app/redux/modules/common/combos.interfaces';\nimport {\n  ShuffleConfig, SetComboIsShuffling, MarkActive, UnmarkActive,\n} from 'app/redux/modules/common/shuffle.interfaces';\nimport { setFavouriteIsShuffling, markFavourite, unmarkFavourite } from 'app/redux/modules/favourites';\nimport { setPlaylistComboIsShuffling, markActiveCombo, unmarkActiveCombo } from 'app/redux/modules/playlists';\nimport { setPlayerVolume, setShuffledCombos } from 'app/redux/modules/players';\nimport Shuffler from './Shuffler';\n\nexport enum ShuffleType {\n  PLAYLIST,\n  FAVOURITES,\n}\n\nexport interface ShuffleReducers {\n  setComboIsShuffling: SetComboIsShuffling;\n  setPlayerVolume: typeof setPlayerVolume;\n  markActive: MarkActive;\n  unmarkActive: UnmarkActive;\n}\n\ninterface ShuffleManagerCreateArgs {\n  dispatch: Dispatch<AnyAction>;\n  shuffleConfig: ShuffleConfig;\n  combosList: Combo[];\n  activeCombo: Combo;\n  type: ShuffleType;\n}\n\n/**\n * Class that is responsible of managing the shuffler of playing players\n * It creates or updates shuffler when shuffling is on or favourite or playlist is activated\n * It ends transition and destroy the shuffler\n * It destroys shuffler immediately\n *\n * This class have different redux bindings depending on favourite or playlists playing\n */\nexport default class ShuffleManager {\n  shuffler: Shuffler | null = null;\n\n  shuffleFavouriteReducers: ShuffleReducers = {\n    setComboIsShuffling: setFavouriteIsShuffling,\n    setPlayerVolume,\n    markActive: markFavourite,\n    unmarkActive: unmarkFavourite,\n  }\n\n  shufflePlaylistReducers: ShuffleReducers = {\n    setComboIsShuffling: setPlaylistComboIsShuffling,\n    setPlayerVolume,\n    markActive: markActiveCombo,\n    unmarkActive: unmarkActiveCombo,\n  }\n\n  createOrUpdate({\n    dispatch,\n    shuffleConfig,\n    combosList,\n    activeCombo,\n    type,\n  }: ShuffleManagerCreateArgs) {\n    if (!this.shuffler) {\n      const notActiveCombos = combosList.filter((combo) => !combo.isPlaying);\n      const nextCombo = sample(notActiveCombos);\n\n      if (!nextCombo) {\n        return;\n      }\n\n      const reducers = type === ShuffleType.FAVOURITES\n        ? this.shuffleFavouriteReducers\n        : this.shufflePlaylistReducers;\n\n      this.shuffler = new Shuffler({\n        dispatch,\n        fromCombo: activeCombo,\n        toCombo: nextCombo,\n        shuffleConfig,\n        reducers,\n      });\n\n      dispatch(setShuffledCombos({\n        fromCombo: activeCombo.id,\n        toCombo: nextCombo.id,\n      }));\n    } else {\n      this.shuffler.update(activeCombo);\n    }\n  }\n\n  endTransitionAndDestroy() {\n    if (this.shuffler) {\n      this.shuffler.endTransitionAndDestroy().then(() => {\n        this.shuffler = null;\n      });\n    }\n  }\n\n  destroy(revertToOriginal = false) {\n    if (this.shuffler) {\n      this.shuffler.destroy(revertToOriginal);\n      this.shuffler = null;\n    }\n  }\n}\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Dispatch, AnyAction } from 'redux';\nimport { Combo } from 'app/redux/modules/common/combos.interfaces';\nimport { ShuffleConfig } from 'app/redux/modules/common/shuffle.interfaces';\nimport {\n  setShufflingTranstionState,\n  setActiveCombo,\n  renewShuffle,\n  setPlayersShuffling,\n  startupPlayersForShuffle,\n  setPlayersVolume,\n  revertPlayersVolume,\n} from 'app/redux/modules/players';\n\n// eslint-disable-next-line import/no-webpack-loader-syntax,import/no-unresolved\nimport TickWorker from 'worker-loader?name=static/[hash].worker.js!../../../WebWorkers/tick.worker';\n\nimport { TickWorkerInterface } from 'app/WebWorkers/tick.worker';\nimport { PlayerVolumePayload } from 'app/redux/modules/players/players.interfaces';\nimport { stopPlayersAfterShuffleThunk } from 'app/redux/modules/players/players.thunks';\nimport { ShuffleReducers } from './ShuffleManager';\n\n\ninterface ShufflerConstructorArgs {\n  fromCombo: Combo;\n  toCombo: Combo;\n  reducers: ShuffleReducers;\n  shuffleConfig: ShuffleConfig;\n  dispatch: Dispatch<AnyAction>;\n}\n\ninterface ComboVolume {\n  id: string;\n  step: number;\n  startVolume: number;\n  actualVolume: number;\n  targetVolume: number;\n  isInNext?: boolean;\n  isInPrev?: boolean;\n}\n\n/**\n * Class that is performing shuffle of sounds\n * It is created and managed by {ShuffleManager}\n */\nexport default class Shuffler {\n  config = {\n    interval: 300,\n  };\n\n  // Combo from which we will be transtioning\n  fromCombo: Combo;\n  // Combo to which we will be transtioning\n  toCombo: Combo;\n  // Combo volumes object from which we will be transtioning\n  fromComboVolume: ComboVolume[] = [];\n  // Combo volumes object to which we will be transtioning\n  toComboVolume: ComboVolume[] = [];\n  // Passed reducers for players or favourites\n  reducers: ShuffleReducers;\n\n  ticks = 1;\n\n  transitionDuration = 0;\n\n  transitionDelay = 0;\n\n  shuffleConfig: ShuffleConfig;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  dispatch: Dispatch<any>;\n\n  tickWorker: TickWorkerInterface;\n\n  isOffline = false;\n\n  onlineHandler: () => void = () => {};\n\n  constructor({\n    fromCombo,\n    toCombo,\n    reducers,\n    shuffleConfig,\n    dispatch,\n  }: ShufflerConstructorArgs) {\n    this.fromCombo = fromCombo;\n    this.toCombo = toCombo;\n    this.reducers = reducers;\n    this.shuffleConfig = shuffleConfig;\n    this.dispatch = dispatch;\n    this.tickWorker = new TickWorker();\n    this.init();\n    this.setOfflineStateListener();\n  }\n\n  init() {\n    this.transitionDuration = this.shuffleConfig.changeTime;\n    // change from minutes to miliseconds\n    this.transitionDelay = this.shuffleConfig.time * 60 * 1000;\n\n    this.setTicks();\n    this.runShuffleCycle();\n  }\n\n  /**\n   * Method that is updating fromCombo\n   * @param activeCombo\n   */\n  update(activeCombo: Combo) {\n    this.fromCombo = activeCombo;\n  }\n\n  /**\n   * Method that destroy the shuffler\n   * @param revertToOriginal\n   */\n  destroy(revertToOriginal = false) {\n    this.tickWorker.postMessage({\n      command: 'stop',\n    });\n    this.tickWorker.terminate();\n    this.setShuffling(false);\n    this.removeOfflineStateListener();\n    if (revertToOriginal) {\n      setTimeout(() => {\n        this.revertVolume();\n      }, 600);\n    }\n  }\n\n\n  /**\n   * Method for graceful shuffle shutdown\n   * @returns {Promise<unknown>}\n   */\n  endTransitionAndDestroy() {\n    this.tickWorker.postMessage({\n      command: 'stop',\n    });\n\n    this.transitionDuration = this.shuffleConfig.returnTime;\n    this.transitionDelay = 0;\n\n    this.setTicks();\n    this.recomputeVolumeSteps();\n    this.removeOfflineStateListener();\n    return this.runShuffleCycle(true);\n  }\n\n  setTicks() {\n    this.ticks = Math.floor(this.transitionDuration / this.config.interval);\n  }\n\n  /**\n   * Compute volume steps for each combo in fromCombo and toCombo items\n   * If fromCombo contains toCombo players, we need to calc difference between from and to\n   * Otherwise set fromCombo to target 0 and to Combo to their volume\n   */\n  computeVolumeSteps() {\n    this.fromComboVolume = this.fromCombo.items.map((comboItem): ComboVolume => {\n      const delta = -comboItem.volume;\n\n      return {\n        id: comboItem.id,\n        startVolume: comboItem.volume,\n        actualVolume: comboItem.volume,\n        targetVolume: 0,\n        step: delta / this.ticks,\n        isInNext: this.toCombo.items.some((item) => item.id === comboItem.id),\n      };\n    });\n\n    this.toComboVolume = this.toCombo.items.map((comboItem): ComboVolume => {\n      const inComboItem = this.fromCombo.items.find((item) => item.id === comboItem.id);\n\n      let delta = comboItem.volume;\n      let actualVolume = 0;\n\n      if (inComboItem) {\n        delta = comboItem.volume - inComboItem.volume;\n        actualVolume = inComboItem.volume;\n      }\n\n      return {\n        id: comboItem.id,\n        startVolume: actualVolume,\n        actualVolume,\n        targetVolume: comboItem.volume,\n        step: delta / this.ticks,\n        isInPrev: !!inComboItem,\n      };\n    });\n  }\n\n  // If change happen, recompute volume steps to match new values\n  recomputeVolumeSteps() {\n    this.fromComboVolume = this.fromComboVolume.map((comboItem): ComboVolume => {\n      const delta = -comboItem.actualVolume;\n\n      return {\n        ...comboItem,\n        step: delta / this.ticks,\n      };\n    });\n\n    this.toComboVolume = this.toComboVolume.map((comboItem): ComboVolume => {\n      const inComboItem = this.fromComboVolume.find((item) => item.id === comboItem.id);\n\n      let delta = comboItem.targetVolume - comboItem.actualVolume;\n\n      if (inComboItem) {\n        delta = comboItem.targetVolume - inComboItem.actualVolume;\n      }\n\n      return {\n        ...comboItem,\n        step: delta / this.ticks,\n      };\n    });\n  }\n\n  /**\n   * Method that runs shuffle cycle\n   * @param returnToDefault\n   * @returns {Promise<unknown>}\n   */\n  runShuffleCycle(returnToDefault = false) {\n    return new Promise((resolve) => {\n      let tick = 1;\n\n      const step = async () => {\n        if (tick === 1) {\n          // At first tick, notify that we are shuffling\n          this.setShuffling(true);\n\n          // compute steps to shuffling and startup needed players\n          if (!returnToDefault) {\n            this.computeVolumeSteps();\n            this.startupPlayers();\n          }\n        }\n\n        tick += 1;\n\n        await Promise.all([\n          this.setPlayersVolume(this.fromComboVolume),\n          this.setPlayersVolume(this.toComboVolume),\n        ]);\n\n        if (tick === this.ticks) {\n          // At last tick, change volume to target volume of each group\n          await Promise.all([\n            this.setPlayersVolume(this.fromComboVolume, true),\n            this.setPlayersVolume(this.toComboVolume, true),\n          ]);\n          // async players stop (only players not needed)\n          setTimeout(() => this.stopPlayers(), 10);\n          // notify that we stop shuffling\n          this.setShuffling(false);\n\n          // Unmark unactive combo\n          this.dispatch(this.reducers.unmarkActive({\n            id: this.fromCombo.id,\n          }));\n\n          // Mark active combo\n          this.dispatch(this.reducers.markActive({\n            id: this.toCombo.id,\n          }));\n\n          // Save combo to active combo\n          this.dispatch(setActiveCombo({\n            combo: this.toCombo,\n          }));\n\n          // If we were not gracefully shutting shuffler, reschedule it\n          if (!returnToDefault) {\n            this.dispatch(renewShuffle());\n          }\n          resolve();\n        }\n      };\n\n      this.tickWorker.onmessage = () => {\n        if (tick === 1) {\n          this.tickWorker.postMessage({\n            command: 'start_interval',\n            payload: {\n              interval: this.config.interval,\n            },\n          });\n        }\n\n        step();\n\n        if (tick === this.ticks) {\n          this.tickWorker.terminate();\n        }\n      };\n\n      this.tickWorker.postMessage({\n        command: 'start_timeout',\n        payload: {\n          timeout: this.transitionDelay,\n        },\n      });\n    });\n  }\n\n  /**\n   * Method that craetes object with volume change to pass to store actions\n   * @param comboVolume\n   * @param toTargetVolume\n   * @returns {Promise<void>}\n   */\n  setPlayersVolume(comboVolume: ComboVolume[], toTargetVolume = false): Promise<void> {\n    return new Promise((resolve) => {\n      comboVolume.forEach((item) => {\n        if (item.isInNext) {\n          return;\n        }\n        // eslint-disable-next-line no-param-reassign\n        item.actualVolume += item.step;\n      });\n\n      const playersVolume: PlayerVolumePayload[] = comboVolume\n        .filter((item) => !item.isInNext)\n        .map((item) => ({\n          id: item.id,\n          volume: toTargetVolume ? item.targetVolume : item.actualVolume,\n        }));\n\n      this.dispatch(setPlayersVolume({\n        items: playersVolume,\n      }));\n\n      resolve();\n    });\n  }\n\n  /**\n   * Method that notify all about shuffling changes\n   * @param isShuffling\n   */\n  setShuffling(isShuffling: boolean) {\n    this.dispatch(setShufflingTranstionState({\n      isShuffling,\n    }));\n\n    this.dispatch(this.reducers.setComboIsShuffling({\n      comboId: this.fromCombo.id,\n      isShuffling,\n    }));\n\n    this.dispatch(this.reducers.setComboIsShuffling({\n      comboId: this.toCombo.id,\n      isShuffling,\n    }));\n\n    const playersIds = [\n      ...this.fromCombo.items.map((item) => item.id),\n      ...this.toCombo.items.map((item) => item.id),\n    ];\n\n    this.dispatch(setPlayersShuffling({\n      playersIds,\n      isShuffling,\n    }));\n  }\n\n  /**\n   * Method that startup unactive players\n   */\n  startupPlayers() {\n    const startupPlayersArray = this.toComboVolume\n      .filter((item) => !item.isInPrev)\n      .map((item) => item.id);\n\n    this.dispatch(startupPlayersForShuffle(startupPlayersArray));\n  }\n\n  /**\n   * Method that stops unused players after shuffle is over\n   */\n  stopPlayers() {\n    const stopPlayersArray: PlayerVolumePayload[] = this.fromComboVolume\n      .filter((item) => !item.isInNext)\n      .map((item) => ({\n        id: item.id,\n        volume: item.startVolume,\n      }));\n\n    this.dispatch(stopPlayersAfterShuffleThunk(stopPlayersArray));\n  }\n\n  /**\n   * Method that retrives original volume and revert to it\n   */\n  revertVolume() {\n    const playersVolume: PlayerVolumePayload[] = [\n      ...this.fromCombo.items.map((item) => ({\n        id: item.id,\n        volume: item.volume,\n      })),\n      ...this.toCombo.items.map((item) => ({\n        id: item.id,\n        volume: item.volume,\n      })),\n    ];\n\n    this.dispatch(revertPlayersVolume({\n      items: playersVolume,\n    }));\n  }\n\n  /**\n   * Method that sets offline listener. If we are offline, we cant perform shuffle\n   * When we go online, we can renew\n   */\n  setOfflineStateListener() {\n    this.onlineHandler = this.handleOnlineEvent.bind(this);\n    window.addEventListener('online', this.onlineHandler);\n  }\n\n  removeOfflineStateListener() {\n    window.removeEventListener('online', this.onlineHandler);\n  }\n\n  handleOnlineEvent() {\n    if (this.tickWorker) {\n      this.tickWorker.terminate();\n    }\n    this.tickWorker = new TickWorker();\n    this.init();\n  }\n}\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  Action, AnyAction, Dispatch, Middleware, MiddlewareAPI,\n} from 'redux';\nimport { RootState } from 'app/redux';\nimport { PayloadAction } from 'redux-starter-kit';\nimport { getActiveFavourite } from 'app/redux/modules/favourites/favourites.selectors';\nimport { getActivePlaylist, getActivePlaylistCombo } from 'app/redux/modules/playlists/playlists.selectors';\nimport { SetShufflePayload } from 'app/redux/modules/common/shuffle.interfaces';\nimport {\n  destroyShuffle,\n  renewShuffle,\n  setPlayerVolume,\n  setShufflingState,\n  stopAllPlayers,\n  updateShuffle,\n} from 'app/redux/modules/players';\nimport { markActiveFavourite, unmarkActiveFavourite } from 'app/redux/modules/favourites';\nimport { markActivePlaylistCombo, unmarkActivePlaylistCombo } from 'app/redux/modules/playlists';\nimport { SetPlayerVolumePayload } from 'app/redux/modules/players/players.interfaces';\nimport { getPlayerInstance } from 'app/redux/modules/players/players.selectors';\nimport { AccountType } from '@noisli/common';\nimport ShuffleManager, { ShuffleType } from './ShuffleManager';\nimport { setIsTerminatingSession } from '../../modules/timer';\nimport { IsTerminatingSessionPayload } from '../../modules/timer/timer.interfaces';\n\n/**\n * Middleware that is responsible for handling shuffle actions\n * It is switched off on mobile devices or if user is free\n * It starts or update shuffle for active favourite or playlist only\n * It updates shuffle state when volume of player is changed by oscillator\n * It renew shuffle after successful change to reflect actual state\n * Difference between update and renew is that after update, the time for shuffle to start is not reloaded\n * It terminates gracefully shuffling, is shuffling is deactivated\n * It terminates immediately shuffling if players are cleared or if timer is ending session\n * It destroys oscillators if timer is terminating session\n *\n * Everything is running in switch/case block with visible actions names\n *\n * @returns {({dispatch, getState}: MiddlewareAPI<Dispatch<AnyAction>, RootState>) => (next: Dispatch) => (action: Action) => void}\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const createShuffleMiddleware: () => Middleware = () => {\n  const shuffleManager = new ShuffleManager();\n  // For development purposes\n  // (global as any).NoisliShuffleManager = shuffleManager;\n\n  return (\n    { dispatch, getState }: MiddlewareAPI<Dispatch<AnyAction>, RootState>,\n  ) => (next: Dispatch) => (action: Action) => {\n    const state = getState();\n\n    if (state.base.isMobile || state.users.user.accountType === AccountType.FREE) {\n      next(action);\n      return;\n    }\n\n    const { shuffleConfig, activeCombo } = state.players;\n    const { isShuffling, isShufflingTransition } = state.players.masterController;\n\n    const activeFavourite = getActiveFavourite(state);\n    const activePlaylist = getActivePlaylist(state);\n    const activePlaylistCombo = getActivePlaylistCombo(state);\n\n    switch (action.type) {\n      case (setShufflingState.toString()): {\n        const { payload } = (action as PayloadAction<SetShufflePayload, string>);\n\n        if (payload.isShuffling) {\n          if (activeFavourite) {\n            const { favourites } = state.favourites;\n\n            if (favourites.length > 1) {\n              shuffleManager.createOrUpdate({\n                dispatch,\n                shuffleConfig,\n                combosList: favourites,\n                activeCombo: activeCombo || activeFavourite,\n                type: ShuffleType.FAVOURITES,\n              });\n            }\n          } else if (activePlaylist && activePlaylistCombo) {\n            if (activePlaylist.items.length > 1) {\n              shuffleManager.createOrUpdate({\n                dispatch,\n                shuffleConfig,\n                combosList: activePlaylist.items,\n                activeCombo: activeCombo || activePlaylistCombo,\n                type: ShuffleType.PLAYLIST,\n              });\n            }\n          }\n        } else if (isShufflingTransition) {\n          shuffleManager.endTransitionAndDestroy();\n        } else {\n          shuffleManager.destroy();\n        }\n\n        next(action);\n        break;\n      }\n\n      case (updateShuffle.toString()): {\n        dispatch(setShufflingState({\n          isShuffling: true,\n        }));\n\n        break;\n      }\n\n      case (renewShuffle.toString()): {\n        shuffleManager.destroy();\n        dispatch(setShufflingState({\n          isShuffling: true,\n        }));\n\n        break;\n      }\n\n      case (destroyShuffle.toString()): {\n        shuffleManager.destroy();\n        break;\n      }\n\n      case (markActiveFavourite.toString()):\n      case (markActivePlaylistCombo.toString()): {\n        next(action);\n\n        if (isShuffling) {\n          dispatch(setShufflingState({\n            isShuffling: true,\n          }));\n        }\n\n        break;\n      }\n\n      case (unmarkActiveFavourite.toString()):\n      case (unmarkActivePlaylistCombo.toString()): {\n        next(action);\n\n        if (isShuffling) {\n          dispatch(destroyShuffle());\n        }\n\n        break;\n      }\n\n      case (setPlayerVolume.toString()): {\n        const { payload } = (action as PayloadAction<SetPlayerVolumePayload, string>);\n        const playerInstance = getPlayerInstance(state, { id: payload.id });\n\n        next(action);\n\n        if (isShuffling && playerInstance && playerInstance.isOscillating) {\n          dispatch(updateShuffle());\n        }\n\n        break;\n      }\n\n      case (stopAllPlayers.toString()): {\n        shuffleManager.destroy(isShufflingTransition);\n        next(action);\n        break;\n      }\n\n      case (setIsTerminatingSession.toString()): {\n        const { payload } = (action as PayloadAction<IsTerminatingSessionPayload, string>);\n\n        next(action);\n\n        if (payload.isTerminating) {\n          shuffleManager.destroy();\n        }\n\n        break;\n      }\n\n      default:\n        next(action);\n        break;\n    }\n  };\n};\n","import throttle from 'lodash/throttle';\nimport random from 'lodash/random';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Dispatch, AnyAction } from 'redux';\nimport { OscillationConfig, Player } from 'app/redux/modules/players/players.interfaces';\nimport { setPlayerVolume, updateOscillator, setPlayerOscillating } from 'app/redux/modules/players';\n\n// eslint-disable-next-line import/no-webpack-loader-syntax,import/no-unresolved\nimport TickWorker from 'worker-loader?name=static/[hash].worker.js!../../../WebWorkers/tick.worker';\n\nimport { TickWorkerInterface } from 'app/WebWorkers/tick.worker';\n\nexport type OscillatorCreateArgs = ({\n  dispatch: Dispatch<AnyAction>;\n  playerInstance: Player;\n  oscillationConfig: OscillationConfig;\n});\n\nexport type OscillatorUpdateArgs = Pick<OscillatorCreateArgs, 'playerInstance'>;\n\n/**\n * Class that is performing oscillation of sound\n * It is created and managed by {OscillatorManager}\n */\nexport default class Oscillator {\n  config = {\n    interval: 200,\n  };\n\n  targetVolume = 1;\n\n  oscillationDelay = 0;\n\n  oscillationDuration = 0;\n\n  playerInstance: Player;\n\n  oscillationConfig: OscillationConfig;\n\n  dispatch: Dispatch<AnyAction>;\n\n  tickWorker: TickWorkerInterface;\n\n  constructor({\n    dispatch,\n    playerInstance,\n    oscillationConfig,\n  }: OscillatorCreateArgs) {\n    this.dispatch = dispatch;\n    this.playerInstance = playerInstance;\n    this.oscillationConfig = oscillationConfig;\n    this.tickWorker = new TickWorker();\n\n    this.init();\n  }\n\n  init() {\n    this.setTargetVolume();\n    this.setOscillationDelayAndDuration();\n    this.runOscillatorCycle();\n  }\n\n  /**\n   * Method that handles update of player instance and is reinitializing oscillation\n   */\n  update = throttle(({ playerInstance }: OscillatorUpdateArgs) => {\n    this.playerInstance = playerInstance;\n    this.tickWorker.postMessage({\n      command: 'stop',\n    });\n    this.init();\n  }, 100, { trailing: true });\n\n  returnToTargetVolumeAndDestroy(playerInstance: Player, targetVolume: number): Promise<void> {\n    this.tickWorker.postMessage({\n      command: 'stop',\n    });\n    this.playerInstance = playerInstance;\n    this.targetVolume = targetVolume;\n    this.oscillationDelay = 0;\n    this.oscillationDuration = this.oscillationConfig.comboVolumeReturnTime;\n    return this.runOscillatorCycle(true);\n  }\n\n  destroy() {\n    this.tickWorker.postMessage({\n      command: 'stop',\n    });\n    this.tickWorker.terminate();\n    this.dispatch(setPlayerOscillating({\n      playerId: this.playerInstance.id,\n      isOscillating: false,\n    }));\n  }\n\n  /**\n   * Method that is randomizing and checking the edge conditions\n   * to determine the ongoing volume progression\n   */\n  setTargetVolume() {\n    const rand = random(true);\n    const customRules = this.oscillationConfig.customPlayerSettings.find(\n      (rules) => rules.playerId === this.playerInstance.id,\n    );\n    const { minVolumeValue, maxVolumeValue } = customRules || this.oscillationConfig;\n    const haveMinVolume = minVolumeValue >= this.playerInstance.volume;\n    const haveMaxVolume = maxVolumeValue <= this.playerInstance.volume;\n\n    let targetVolume = this.playerInstance.volume;\n\n    if ((rand > 0.5 || haveMinVolume) && !haveMaxVolume) {\n      targetVolume += this.oscillationConfig.changeValue;\n\n      if (targetVolume > maxVolumeValue) {\n        targetVolume = maxVolumeValue;\n      }\n    } else {\n      targetVolume -= this.oscillationConfig.changeValue;\n\n      if (targetVolume < minVolumeValue) {\n        targetVolume = minVolumeValue;\n      }\n    }\n\n    this.targetVolume = targetVolume;\n  }\n\n  /**\n   * Method that is setting random oscillation delay\n   * and set oscillation duration\n   */\n  setOscillationDelayAndDuration() {\n    const { minTime, maxTime, changeTime } = this.oscillationConfig;\n    this.oscillationDelay = random(minTime, maxTime);\n    this.oscillationDuration = changeTime;\n  }\n\n  /**\n   * Method responsible for running the oscillatior cycle\n   * It return promise that is resolve after all cycle is finished\n   * @param returnToDefault\n   * @returns {Promise<void>}\n   */\n  runOscillatorCycle(returnToDefault = false): Promise<void> {\n    return new Promise((resolve) => {\n      const delta = this.targetVolume - this.playerInstance.volume;\n      const ticks = Math.ceil(this.oscillationDuration / this.config.interval);\n      const volumeStep = delta / ticks;\n      let { volume } = this.playerInstance;\n      let tick = 1;\n\n      // If there is no change simply resolve\n      if (this.targetVolume === this.playerInstance.volume) {\n        resolve();\n        return;\n      }\n\n      const step = () => {\n        if (tick === 1) {\n          // At first step, mark player as oscillating\n          this.dispatch(setPlayerOscillating({\n            playerId: this.playerInstance.id,\n            isOscillating: true,\n          }));\n        }\n        tick += 1;\n        volume += volumeStep;\n\n        this.dispatch(setPlayerVolume({\n          id: this.playerInstance.id,\n          volume,\n        }));\n\n        if (tick === ticks) {\n          // at last step, clear all settings and run next oscillator cycle\n          this.tickWorker.postMessage({\n            command: 'stop',\n          });\n          this.dispatch(setPlayerVolume({\n            id: this.playerInstance.id,\n            volume: this.targetVolume,\n          }));\n          this.dispatch(setPlayerOscillating({\n            playerId: this.playerInstance.id,\n            isOscillating: false,\n          }));\n          if (!returnToDefault) {\n            this.dispatch(updateOscillator({\n              playerId: this.playerInstance.id,\n            }));\n          }\n          resolve();\n        }\n      };\n\n      this.tickWorker.onmessage = () => {\n        if (tick === 1) {\n          // run oscillator cycle ticker\n          this.tickWorker.postMessage({\n            command: 'start_interval',\n            payload: {\n              interval: this.config.interval,\n            },\n          });\n        }\n\n        step();\n      };\n\n      // Run oscillatior timeout\n      this.tickWorker.postMessage({\n        command: 'start_timeout',\n        payload: {\n          timeout: this.oscillationDelay,\n        },\n      });\n    });\n  }\n}\n","import { Player } from 'app/redux/modules/players/players.interfaces';\nimport Oscillator, { OscillatorCreateArgs } from './Oscillator';\n\n/**\n * Class that is responsible of managing the oscillators of playing players\n * It creates oscillators for new players or when the oscillation is on\n * It destroys oscillators if player is stopped\n * It stops the oscillators when shuffle is starting\n * It revert the oscillator effect is oscillation is off\n */\nexport default class OscillationManager {\n  oscillators: Oscillator[] = [];\n\n  createOrUpdate({\n    dispatch,\n    oscillationConfig,\n    playerInstance,\n  }: OscillatorCreateArgs) {\n    const oscillator = this.oscillators.find(\n      (item) => item.playerInstance.id === playerInstance.id,\n    );\n\n    if (!oscillator) {\n      const newOscillator = new Oscillator({\n        dispatch,\n        oscillationConfig,\n        playerInstance,\n      });\n\n      this.oscillators.push(newOscillator);\n      return;\n    }\n\n    oscillator.update({\n      playerInstance,\n    });\n  }\n\n  destroy(playerId: string) {\n    const oscillator = this.oscillators.find((item) => item.playerInstance.id === playerId);\n\n    if (!oscillator) {\n      return;\n    }\n\n    oscillator.destroy();\n    this.oscillators = this.oscillators.filter((item) => item.playerInstance.id !== playerId);\n  }\n\n  returnToDefaultValueAndDestroy(playerInstance: Player, targetVolume: number) {\n    const oscillator = this.oscillators.find(\n      (item) => item.playerInstance.id === playerInstance.id,\n    );\n\n    if (!oscillator) {\n      return;\n    }\n\n    oscillator.returnToTargetVolumeAndDestroy(playerInstance, targetVolume).then(() => {\n      this.oscillators = this.oscillators.filter(\n        (item) => item.playerInstance.id !== playerInstance.id,\n      );\n    }).catch(() => {});\n  }\n}\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  Dispatch, Action, Middleware, MiddlewareAPI, AnyAction,\n} from 'redux';\nimport { RootState } from 'app/redux';\nimport {\n  startOscillator,\n  clearOscillator,\n  updateOscillator,\n  setPlayerPlaying,\n  setPlayerVolume,\n  stopAllPlayers,\n  setShufflingTranstionState,\n} from 'app/redux/modules/players';\nimport { PayloadAction } from 'redux-starter-kit';\nimport {\n  OscillatorPlayerPayload,\n  SetPlayerPlayingPayload,\n  SetPlayerVolumePayload,\n} from 'app/redux/modules/players/players.interfaces';\nimport { getPlayerInstance } from 'app/redux/modules/players/players.selectors';\nimport { getActiveFavourite } from 'app/redux/modules/favourites/favourites.selectors';\nimport { getActivePlaylistCombo } from 'app/redux/modules/playlists/playlists.selectors';\nimport { SetShufflePayload } from 'app/redux/modules/common/shuffle.interfaces';\nimport { setIsTerminatingSession } from 'app/redux/modules/timer';\nimport { AccountType } from '@noisli/common';\nimport OscillationManager from './OscillationManager';\nimport { IsTerminatingSessionPayload } from '../../modules/timer/timer.interfaces';\n\n\n/**\n * Middleware that is responsible for handling oscillation actions\n * It is switched off on mobile devices or if user is free\n * It turns off oscillatiors if shuffling transition is starting\n * It starts or update oscillators for active players\n * It updates oscillators if player volume is changed\n * It destroys oscillators if player is deactivated\n * It destroys oscillators if timer is terminating session\n * Everything is running in switch/case block with visible actions names\n *\n * @returns {({dispatch, getState}: MiddlewareAPI<Dispatch<AnyAction>, RootState>) => (next: Dispatch) => (action: Action) => void}\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const createOscillationMiddleware: () => Middleware = () => {\n  const oscillationManager = new OscillationManager();\n  // For development purposes\n  // (global as any).NoisliOscillationManager = oscillationManager;\n\n  return (\n    { dispatch, getState }: MiddlewareAPI<Dispatch<AnyAction>, RootState>,\n  ) => (next: Dispatch) => (action: Action) => {\n    const state = getState();\n\n    if (state.base.isMobile || state.users.user.accountType === AccountType.FREE) {\n      next(action);\n      return;\n    }\n\n    const { isShufflingTransition } = state.players.masterController;\n    const isOscillationOn = state.players.masterController.isOscillating;\n    const activeFavourite = getActiveFavourite(state);\n    const activePlaylistCombo = getActivePlaylistCombo(state);\n\n    switch (action.type) {\n      case (startOscillator.toString()): {\n        const { payload } = (action as PayloadAction<OscillatorPlayerPayload, string>);\n        const playerInstance = getPlayerInstance(state, { id: payload.playerId });\n\n        if (!playerInstance || isShufflingTransition || !playerInstance.isPlaying) {\n          return;\n        }\n\n        oscillationManager.createOrUpdate({\n          dispatch,\n          playerInstance,\n          oscillationConfig: state.players.oscillationConfig,\n        });\n\n        next(action);\n        break;\n      }\n\n      case (updateOscillator.toString()): {\n        const { payload } = (action as PayloadAction<OscillatorPlayerPayload, string>);\n        const playerInstance = getPlayerInstance(state, { id: payload.playerId });\n\n        if (!playerInstance || isShufflingTransition || !playerInstance.isPlaying) {\n          return;\n        }\n\n        oscillationManager.createOrUpdate({\n          dispatch,\n          playerInstance,\n          oscillationConfig: state.players.oscillationConfig,\n        });\n\n        break;\n      }\n\n      case (clearOscillator.toString()): {\n        const { payload } = (action as PayloadAction<OscillatorPlayerPayload, string>);\n\n        if (!isShufflingTransition) {\n          if (payload.immediate) {\n            oscillationManager.destroy(payload.playerId);\n            break;\n          }\n\n          if (activeFavourite) {\n            activeFavourite.items.forEach((item) => {\n              if (item.id !== payload.playerId) {\n                return;\n              }\n              const playerInstance = getPlayerInstance(state, { id: item.id });\n              if (!playerInstance) {\n                return;\n              }\n              oscillationManager.returnToDefaultValueAndDestroy(playerInstance, item.volume);\n            });\n            next(action);\n            break;\n          }\n\n          if (activePlaylistCombo) {\n            activePlaylistCombo.items.forEach((item) => {\n              if (item.id !== payload.playerId) {\n                return;\n              }\n              const playerInstance = getPlayerInstance(state, { id: item.id });\n              if (!playerInstance) {\n                return;\n              }\n              oscillationManager.returnToDefaultValueAndDestroy(playerInstance, item.volume);\n            });\n            next(action);\n            break;\n          }\n        }\n\n        oscillationManager.destroy(payload.playerId);\n\n        next(action);\n        break;\n      }\n\n      case (setPlayerPlaying.toString()): {\n        if (!isOscillationOn) {\n          next(action);\n          break;\n        }\n        const { payload } = (action as PayloadAction<SetPlayerPlayingPayload, string>);\n        next(action);\n\n        if (payload.isPlaying) {\n          dispatch(startOscillator({\n            playerId: payload.id,\n          }));\n        } else {\n          dispatch(clearOscillator({\n            playerId: payload.id,\n          }));\n        }\n\n        break;\n      }\n\n      case (setPlayerVolume.toString()): {\n        if (!isOscillationOn) {\n          next(action);\n          break;\n        }\n        const { payload } = (action as PayloadAction<SetPlayerVolumePayload, string>);\n        const playerInstance = getPlayerInstance(state, { id: payload.id });\n\n        next(action);\n\n        if (!playerInstance) {\n          break;\n        }\n\n        if (playerInstance.isOscillating) {\n          break;\n        } else {\n          dispatch(updateOscillator({\n            playerId: payload.id,\n          }));\n        }\n\n        break;\n      }\n\n      case (stopAllPlayers.toString()): {\n        next(action);\n        const { scheduledOscillation } = getState().players.masterController;\n\n        scheduledOscillation.forEach((oscillator) => {\n          dispatch(clearOscillator({\n            playerId: oscillator.playerId,\n            immediate: true,\n          }));\n        });\n        break;\n      }\n\n      case (setShufflingTranstionState.toString()): {\n        const { payload } = (action as PayloadAction<SetShufflePayload, string>);\n\n        next(action);\n        if (isOscillationOn) {\n          if (payload.isShuffling) {\n            state.players.masterController.scheduledOscillation.forEach((oscillator) => {\n              dispatch(clearOscillator({\n                playerId: oscillator.playerId,\n              }));\n            });\n          } else {\n            state.players.players.forEach((player) => {\n              if (!player.isPlaying) {\n                return;\n              }\n              dispatch(startOscillator({\n                playerId: player.id,\n              }));\n            });\n          }\n        }\n\n        break;\n      }\n\n      case (setIsTerminatingSession.toString()): {\n        const { payload } = (action as PayloadAction<IsTerminatingSessionPayload, string>);\n\n        next(action);\n\n        if (payload.isTerminating) {\n          state.players.masterController.scheduledOscillation.forEach((oscillator) => {\n            dispatch(clearOscillator({\n              playerId: oscillator.playerId,\n              immediate: true,\n            }));\n          });\n        }\n\n        break;\n      }\n\n      default:\n        next(action);\n        break;\n    }\n  };\n};\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Dispatch, AnyAction } from 'redux';\n\n// eslint-disable-next-line import/no-webpack-loader-syntax,import/no-unresolved\nimport TickWorker from 'worker-loader?name=static/[hash].worker.js!../../../WebWorkers/tick.worker';\n\nimport { TickWorkerInterface } from 'app/WebWorkers/tick.worker';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { setActualTime, setIsTerminatingSession } from 'app/redux/modules/timer';\nimport { TimerConfig, TimerTime, TimerType } from '@noisli/common';\nimport { formatActualTime } from '../../modules/timer/timer.helpers';\nimport { stopTimerThunk, setActiveComboInTimerThunk } from '../../modules/timer/timer.thunks';\nimport { RootState } from '../../index';\nimport { ComboItem } from '../../modules/common/combos.interfaces';\nimport {\n  setPlayersVolume, stopAllPlayers,\n} from '../../modules/players';\nimport { PlayerVolumePayload } from '../../modules/players/players.interfaces';\nimport { stopPlayersAfterShuffleThunk } from '../../modules/players/players.thunks';\n\ninterface TimerConstructorArgs {\n  timerConfig: TimerConfig;\n  timerType: TimerType;\n  times: TimerTime;\n  dispatch: Dispatch<AnyAction>;\n  getState: () => RootState;\n}\n\nexport interface TimerUpdateArgs {\n  pause?: boolean;\n  resume?: boolean;\n}\n\ninterface ComboVolume {\n  id: string;\n  step: number;\n  startVolume: number;\n  actualVolume: number;\n  targetVolume: number;\n}\n\n/**\n * Class that is responsible for timer operations\n */\nexport default class Timer {\n  config = {\n    interval: 250,\n    fadeInterval: 200,\n    fadeDuration: 5000,\n    ticks: Math.floor(5000 / 200),\n  };\n\n  timerConfig: TimerConfig;\n\n  times: TimerTime;\n\n  timerType: TimerType;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  dispatch: Dispatch<any>;\n\n  getState: () => RootState;\n\n  tickWorker: TickWorkerInterface;\n\n  fadeTickWorker?: TickWorkerInterface;\n\n  goalTime?: Dayjs;\n\n  pauseTimestamp?: Dayjs;\n\n  isTerminating = false;\n\n  fadeComboVolume: ComboVolume[] = [];\n\n  /**\n   * Set up timer instance\n   * @param timerConfig\n   * @param times\n   * @param timerType\n   * @param dispatch\n   * @param getState\n   */\n  constructor({\n    timerConfig,\n    times,\n    timerType,\n    dispatch,\n    getState,\n  }: TimerConstructorArgs) {\n    this.timerConfig = timerConfig;\n    this.dispatch = dispatch;\n    this.getState = getState;\n    this.times = times;\n    this.timerType = timerType;\n    this.tickWorker = new TickWorker();\n    this.init();\n  }\n\n\n  /**\n   * Method that set timestamp of goal time\n   * We are operating on timestamps to make sure we will be precise\n   * even if some throttle would happen\n   */\n  init() {\n    this.goalTime = dayjs()\n      .add(this.times.hours, 'hour')\n      .add(this.times.minutes, 'minute')\n      .add(this.times.seconds, 'second');\n\n    this.runTimer();\n  }\n\n  /**\n   * React to pause and resume to rebase goal time\n   * @param pause\n   * @param resume\n   */\n  update({\n    pause,\n    resume,\n  }: TimerUpdateArgs) {\n    if (pause) {\n      this.tickWorker.postMessage({\n        command: 'stop',\n      });\n      this.pauseTimestamp = dayjs();\n      return;\n    }\n\n    if (resume) {\n      const timestamp = dayjs();\n\n      if (this.pauseTimestamp && this.goalTime) {\n        const secondsDiff = timestamp.diff(this.pauseTimestamp, 'second');\n        this.goalTime = this.goalTime.add(secondsDiff, 'second');\n      }\n\n      this.tickWorker.postMessage({\n        command: 'start_interval',\n        payload: {\n          interval: this.config.interval,\n        },\n      });\n    }\n  }\n\n  /**\n   * Method that handle cancellation of timer\n   * @param isCancelled\n   */\n  destroy(isCancelled = false) {\n    this.tickWorker?.terminate();\n    if (isCancelled) {\n      this.fadeTickWorker?.terminate();\n      setTimeout(() => this.stopPlayers(), 10);\n      this.dispatch(setIsTerminatingSession({\n        isTerminating: false,\n      }));\n    }\n  }\n\n  /**\n   * Method that runs timer\n   */\n  runTimer() {\n    this.tickWorker.onmessage = () => this.controlTime();\n\n    this.tickWorker.postMessage({\n      command: 'start_interval',\n      payload: {\n        interval: this.config.interval,\n      },\n    });\n  }\n\n  /**\n   * Method that is run on every tick of timer worker\n   */\n  controlTime() {\n    const timestamp = dayjs();\n\n    if (this.goalTime) {\n      //check if timestamp is after the goaltime (check if we passed the goalTime)\n      if (this.goalTime.isBefore(timestamp)) {\n        this.tickWorker.terminate();\n        this.dispatch(stopTimerThunk());\n        this.isTerminating = false;\n        return;\n      }\n\n      // Compute total time to goal time and get hours, minutes and seconds part\n      let totalSeconds = this.goalTime.diff(timestamp, 'second');\n      const totalHours = Math.floor(totalSeconds / (60 * 60));\n      totalSeconds -= (totalHours * 60 * 60);\n      const totalMinutes = Math.floor(totalSeconds / 60);\n      totalSeconds -= (totalMinutes * 60);\n\n      // if total time to end is less then 5 seconds, begin fading out the sounds\n      const shouldFadeOut = totalHours === 0 && totalMinutes === 0 && totalSeconds < 5;\n\n      if (this.timerType !== TimerType.ShortBreak && !this.isTerminating && shouldFadeOut) {\n        this.dispatch(setIsTerminatingSession({\n          isTerminating: true,\n        }));\n        this.isTerminating = true;\n        this.fadeOutSession();\n      }\n\n      // format actual time and pass it to redux store\n      const actualTime = formatActualTime(totalHours, totalMinutes, totalSeconds);\n\n      this.dispatch(setActualTime({ actualTime }));\n    }\n  }\n\n  /**\n   * Method that runs fader of sounds when timer is about to end\n   * Get all sounds that are playing right now and lock interactions\n   * @returns {Promise<void>}\n   */\n  async fadeOutSession() {\n    const state = this.getState();\n    const items = state.players.players.filter((player) => player.isPlaying).map((player) => ({\n      id: player.id,\n      volume: player.volume,\n    }));\n    this.dispatch(setActiveComboInTimerThunk());\n    this.fadeTickWorker = new TickWorker();\n    this.computeVolumeSteps(items);\n    this.runFadeOut();\n  }\n\n  /**\n   * Compute volume steps to perform fade out to 0\n   * @param comboItems\n   */\n  computeVolumeSteps(comboItems: ComboItem[]) {\n    this.fadeComboVolume = comboItems.map((comboItem) => {\n      const delta = -comboItem.volume;\n\n      return {\n        id: comboItem.id,\n        startVolume: comboItem.volume,\n        actualVolume: comboItem.volume,\n        targetVolume: 0,\n        step: delta / this.config.ticks,\n      };\n    });\n  }\n\n  /**\n   * Runs basic fade out loop\n   */\n  runFadeOut() {\n    let tick = 1;\n\n    const step = async () => {\n      tick += 1;\n\n      this.setPlayersVolume();\n\n      if (tick === this.config.ticks) {\n        this.setPlayersVolume(true);\n        setTimeout(() => this.stopPlayers(), 10);\n        this.dispatch(setIsTerminatingSession({\n          isTerminating: false,\n        }));\n      }\n    };\n\n    if (!this.fadeTickWorker) {\n      return;\n    }\n\n    this.fadeTickWorker.onmessage = () => {\n      step();\n\n      if (tick === this.config.ticks && this.fadeTickWorker) {\n        this.fadeTickWorker.terminate();\n      }\n    };\n\n    this.fadeTickWorker.postMessage({\n      command: 'start_interval',\n      payload: {\n        interval: this.config.fadeInterval,\n      },\n    });\n  }\n\n  /**\n   * Set players volume to actual step volume\n   * @param toTargetVolume - if true, set target volume (0)\n   */\n  setPlayersVolume(toTargetVolume = false) {\n    this.fadeComboVolume.forEach((item) => {\n      // eslint-disable-next-line no-param-reassign\n      item.actualVolume += item.step;\n    });\n\n    const playersVolume: PlayerVolumePayload[] = this.fadeComboVolume\n      .map((item) => ({\n        id: item.id,\n        volume: toTargetVolume ? item.targetVolume : item.actualVolume,\n      }));\n\n    this.dispatch(setPlayersVolume({\n      items: playersVolume,\n    }));\n  }\n\n  /**\n   * Stop all players and reset their volume to starting position\n   */\n  stopPlayers() {\n    const stopPlayersArray: PlayerVolumePayload[] = this.fadeComboVolume\n      .map((item) => ({\n        id: item.id,\n        volume: item.startVolume,\n      }));\n\n    this.dispatch(stopPlayersAfterShuffleThunk(stopPlayersArray));\n    this.dispatch(stopAllPlayers());\n  }\n}\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Dispatch, AnyAction } from 'redux';\nimport { Combo } from 'app/redux/modules/common/combos.interfaces';\nimport { TimerConfig, TimerTime, TimerType } from '@noisli/common';\nimport Timer, { TimerUpdateArgs } from './Timer';\nimport { RootState } from '../../index';\n\ninterface TimerManagerCreateArgs {\n  dispatch: Dispatch<AnyAction>;\n  timerConfig: TimerConfig;\n  timerType: TimerType;\n  getState: () => RootState;\n}\n\n/**\n * Class that is responsible of managing the timer\n * It creates or updates timer when timer is played, paused or replayed\n * It destroy timer if timer is cancelled\n */\nexport default class TimerManager {\n  timer: Timer | null = null;\n\n  activeCombo?: Combo;\n\n  createOrUpdate({\n    dispatch,\n    timerConfig,\n    timerType,\n    getState,\n  }: TimerManagerCreateArgs) {\n    let times: TimerTime = timerConfig.time;\n\n    switch (timerType) {\n      case TimerType.Session:\n        times = timerConfig.time;\n        break;\n      case TimerType.LongBreak:\n        times = timerConfig.longBreak;\n        break;\n      case TimerType.ShortBreak:\n        times = timerConfig.shortBreak;\n        break;\n      default:\n        break;\n    }\n\n    if (!this.timer) {\n      this.timer = new Timer({\n        dispatch,\n        times,\n        timerType,\n        timerConfig,\n        getState,\n      });\n    } else {\n      this.timer.destroy();\n      this.timer = new Timer({\n        dispatch,\n        times,\n        timerType,\n        timerConfig,\n        getState,\n      });\n    }\n  }\n\n  update(args: TimerUpdateArgs) {\n    if (this.timer) {\n      this.timer.update(args);\n    }\n  }\n\n  destroy(isCancelled = false) {\n    if (this.timer) {\n      this.timer.destroy(isCancelled);\n      this.timer = null;\n    }\n  }\n}\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  Action, AnyAction, Dispatch, Middleware, MiddlewareAPI,\n} from 'redux';\nimport { RootState } from 'app/redux';\nimport {\n  startTimer, stopTimer, pauseTimer, resumeTimer,\n} from 'app/redux/modules/timer';\nimport { PayloadAction } from 'redux-starter-kit';\nimport TimerManager from './TimerManager';\nimport { setActiveComboInTimerThunk } from '../../modules/timer/timer.thunks';\nimport { setPlayerPlaying, setPlayerVolume, stopAllPlayers } from '../../modules/players';\nimport { SetPlayerPlayingPayload } from '../../modules/players/players.interfaces';\nimport { getPlayerInstance } from '../../modules/players/players.selectors';\nimport { StopTimerPayload } from '../../modules/timer/timer.interfaces';\nimport { markActiveFavourite } from 'app/redux/modules/favourites';\nimport { markActivePlaylistCombo } from 'app/redux/modules/playlists';\n\n/**\n * Middleware that is responsible for handling timer actions\n * It is switched off if user is not logged in\n * It starts or update timer when player is started, paused or played again\n * It destroys timer if timer is stopped\n * It tracks active combo that is playing for timer fade out to perform correctly\n *\n * Everything is running in switch/case block with visible actions names\n *\n * @returns {({dispatch, getState}: MiddlewareAPI<Dispatch<AnyAction>, RootState>) => (next: Dispatch) => (action: Action) => void}\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const createTimerMiddleware: () => Middleware = () => {\n  const timerManager = new TimerManager();\n  // For development purposes\n  // (global as any).NoisliTimerManager = timerManager;\n\n  return (\n    { dispatch, getState }: MiddlewareAPI<Dispatch<AnyAction>, RootState>,\n  ) => (next: Dispatch) => (action: Action) => {\n    const state = getState();\n    const { timer, players, users } = state;\n    const { timerConfig } = state.timer;\n\n    if (!users.user.uuid) {\n      next(action);\n      return;\n    }\n\n    switch (action.type) {\n      case (startTimer.toString()): {\n        timerManager.createOrUpdate({\n          dispatch,\n          timerConfig,\n          timerType: timer.currentTimerType,\n          getState,\n        });\n        next(action);\n        break;\n      }\n\n      case (stopTimer.toString()): {\n        const {\n          isCancelled, isLongBreakSkipped,\n        } = (action as PayloadAction<StopTimerPayload>).payload;\n\n        timerManager.destroy(isCancelled || isLongBreakSkipped);\n        next(action);\n        break;\n      }\n\n      case (pauseTimer.toString()): {\n        timerManager.update({\n          pause: true,\n        });\n        next(action);\n        break;\n      }\n\n      case (resumeTimer.toString()): {\n        timerManager.update({\n          resume: true,\n        });\n        next(action);\n        break;\n      }\n\n      case (setPlayerPlaying.toString()):\n      case (setPlayerVolume.toString()): {\n        const playerId = (action as PayloadAction<SetPlayerPlayingPayload>).payload.id;\n        const playerInstance = getPlayerInstance(getState(), { id: playerId });\n        next(action);\n        if (players.masterController.isPlaying\n          && playerInstance\n          && !playerInstance.isShuffling\n          && !playerInstance.isOscillating\n        ) {\n          dispatch(setActiveComboInTimerThunk() as unknown as AnyAction);\n        }\n        break;\n      }\n\n      case (stopAllPlayers.toString()): {\n        dispatch(setActiveComboInTimerThunk() as unknown as AnyAction);\n        next(action);\n        break;\n      }\n\n      case (markActiveFavourite.toString()):\n      case (markActivePlaylistCombo.toString()): {\n        next(action);\n        dispatch(setActiveComboInTimerThunk() as unknown as AnyAction);\n        break;\n      }\n\n      default:\n        next(action);\n        break;\n    }\n  };\n};\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  MiddlewareAPI, Dispatch, AnyAction, Action,\n} from 'redux';\nimport { RootState } from 'app/redux';\nimport {\n  setPlayerPlaying, setPlayerVolume, stopAllPlayers, setActiveCombo,\n} from 'app/redux/modules/players';\nimport { PayloadAction } from 'redux-starter-kit';\nimport { SetPlayerVolumePayload } from 'app/redux/modules/players/players.interfaces';\nimport { getPlayerInstance } from 'app/redux/modules/players/players.selectors';\nimport { unmarkActiveFavourite } from 'app/redux/modules/favourites';\nimport { getActiveFavourite } from 'app/redux/modules/favourites/favourites.selectors';\n\n/**\n * Middleware that is responsible for handling favourites changes\n * It tracks changes to volume, players and stoping players to unmark active favourite\n * It also checks if volume change is caused by oscillation/shuffle\n * @param dispatch\n * @param getState\n * @returns {(next: Dispatch) => (action: Action) => void}\n * @constructor\n */\nconst FavouritesMiddleware = (\n  { dispatch, getState }: MiddlewareAPI<Dispatch<AnyAction>, RootState>,\n) => (next: Dispatch) => (action: Action) => {\n  const state = getState();\n  const activeFavourite = getActiveFavourite(state);\n\n  switch (action.type) {\n    case (setPlayerVolume.toString()): {\n      const { payload } = (action as PayloadAction<SetPlayerVolumePayload, string>);\n      const playerInstance = getPlayerInstance(state, { id: payload.id });\n\n      next(action);\n\n      if (!playerInstance || !activeFavourite) {\n        break;\n      }\n\n      if (activeFavourite.isShuffling) {\n        break;\n      }\n\n      const isPlayerInFavourite = activeFavourite.items.some(\n        (item) => item.id === playerInstance.id,\n      );\n\n      if (!playerInstance.isOscillating && isPlayerInFavourite) {\n        dispatch(unmarkActiveFavourite());\n      }\n\n      if (playerInstance.isOscillating && isPlayerInFavourite) {\n        const { activeCombo } = getState().players;\n        if (!activeCombo) {\n          return;\n        }\n        dispatch(setActiveCombo({\n          combo: {\n            ...activeCombo,\n            items: activeCombo.items.map((item) => {\n              let { volume } = item;\n              if (item.id === playerInstance.id) {\n                // eslint-disable-next-line prefer-destructuring\n                volume = payload.volume;\n              }\n\n              return {\n                id: item.id,\n                volume,\n              };\n            }),\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case (setPlayerPlaying.toString()): {\n      dispatch(unmarkActiveFavourite());\n      next(action);\n      break;\n    }\n\n    case (stopAllPlayers.toString()): {\n      next(action);\n      dispatch(unmarkActiveFavourite());\n      break;\n    }\n\n    default:\n      next(action);\n      break;\n  }\n};\n\nexport default FavouritesMiddleware;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  MiddlewareAPI, Dispatch, AnyAction, Action,\n} from 'redux';\nimport { RootState } from 'app/redux';\nimport {\n  setPlayerPlaying, setPlayerVolume, stopAllPlayers, setActiveCombo, setShufflingTranstionState,\n} from 'app/redux/modules/players';\nimport { PayloadAction } from 'redux-starter-kit';\nimport { SetPlayerVolumePayload } from 'app/redux/modules/players/players.interfaces';\nimport { getPlayerInstance } from 'app/redux/modules/players/players.selectors';\nimport { unmarkActivePlaylistCombo, setPlaylistBackground } from 'app/redux/modules/playlists';\nimport { getActivePlaylistCombo } from 'app/redux/modules/playlists/playlists.selectors';\nimport { SetShufflePayload } from '../../modules/common/shuffle.interfaces';\nimport { generateBackgroundVariant } from '../../modules/playlists/playlists.utils';\n\n/**\n * Middleware that is responsible for handling playlists changes\n * It tracks changes to volume, players and stoping players to unmark active playlist\n * It also checks if volume change is caused by oscillation/shuffle\n * @param dispatch\n * @param getState\n * @returns {(next: Dispatch) => (action: Action) => void}\n * @constructor\n */\nconst PlaylistsMiddleware = (\n  { dispatch, getState }: MiddlewareAPI<Dispatch<AnyAction>, RootState>,\n) => (next: Dispatch) => (action: Action) => {\n  const state = getState();\n  const activePlaylist = state.playlists.playlists.find((item) => item.isPlaying);\n\n  switch (action.type) {\n    case (setPlayerVolume.toString()): {\n      const { payload } = (action as PayloadAction<SetPlayerVolumePayload, string>);\n      const playerInstance = getPlayerInstance(state, { id: payload.id });\n      const activePlaylistCombo = getActivePlaylistCombo(state);\n\n      next(action);\n\n      if (!playerInstance || !activePlaylistCombo) {\n        break;\n      }\n\n      if (playerInstance.isShuffling || activePlaylistCombo.isShuffling) {\n        break;\n      }\n\n      const isPlayerInCombo = activePlaylistCombo.items.find(\n        (item) => item.id === playerInstance.id,\n      );\n\n      if (!playerInstance.isOscillating && isPlayerInCombo) {\n        dispatch(unmarkActivePlaylistCombo());\n      }\n\n      if (playerInstance.isOscillating && isPlayerInCombo) {\n        const { activeCombo } = getState().players;\n        if (!activeCombo) {\n          return;\n        }\n        dispatch(setActiveCombo({\n          combo: {\n            ...activeCombo,\n            items: activeCombo.items.map((item) => {\n              let { volume } = item;\n              if (item.id === playerInstance.id) {\n                // eslint-disable-next-line prefer-destructuring\n                volume = payload.volume;\n              }\n\n              return {\n                id: item.id,\n                volume,\n              };\n            }),\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case (setPlayerPlaying.toString()): {\n      next(action);\n      if (activePlaylist && activePlaylist.isShuffling) {\n        break;\n      }\n      dispatch(unmarkActivePlaylistCombo());\n      break;\n    }\n\n    case (stopAllPlayers.toString()): {\n      next(action);\n      dispatch(unmarkActivePlaylistCombo());\n      break;\n    }\n\n    case (setShufflingTranstionState.toString()): {\n      next(action);\n      const { payload } = (action as PayloadAction<SetShufflePayload, string>);\n      if (payload.isShuffling) {\n        dispatch(setPlaylistBackground({\n          playlistBackground: generateBackgroundVariant(state.playlists.playlistBackground),\n        }));\n      }\n      break;\n    }\n\n    default:\n      next(action);\n      break;\n  }\n};\n\nexport default PlaylistsMiddleware;\n","import { of } from 'rxjs';\nimport { AxiosError } from 'axios';\nimport { handleUserUnauthorizedThunk } from '../modules/users/users.thunks';\n\n/**\n * Epic util that handles auth error and runs user logout\n * @param error\n * @returns {Observable<(dispatch: ThunkDispatch<RootState, null, AnyAction>, getState: () => RootState, extraArgument: null) => void>}\n */\nconst catchAuthError = (error: AxiosError) => {\n  if (error.response && error.response.status === 401) {\n    return of(handleUserUnauthorizedThunk());\n  }\n  throw error;\n};\n\nexport default catchAuthError;\n","import {\n  from, scheduled, interval,\n} from 'rxjs';\nimport {\n  catchError, flatMap, mergeMap, filter, debounce,\n} from 'rxjs/operators';\nimport { async } from 'rxjs/internal/scheduler/async';\nimport UsersApi from 'app/Api/Users.api';\nimport { Epic, ofType } from 'redux-observable';\nimport { RootState } from 'app/redux';\nimport { UserDetails } from '@noisli/common';\nimport catchAuthError from 'app/redux/utils/catchAuthError';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Action } from 'redux';\nimport { PayloadAction } from 'redux-starter-kit';\nimport { completeOnboarding, setUser, setUserDetails } from '.';\nimport {\n  setOscillatorState, setShufflingState, setMasterPlayerIsMuted, setMasterPlayerVolume,\n} from '../players';\nimport {\n  SetMasterPlayerMutedPayload,\n  SetMasterPlayerVolumePayload,\n  SetOscillationPayload,\n} from '../players/players.interfaces';\nimport { SetShufflePayload } from '../common/shuffle.interfaces';\n\nconst setUserDetailsResolver = (userDetails: UserDetails | undefined) => {\n  if (!userDetails) {\n    return;\n  }\n\n  // eslint-disable-next-line consistent-return\n  return setUserDetails(userDetails);\n};\n\n/**\n * Epic that saves onboarding completion\n * @param action$\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst completeOnboardingEpic: Epic<Action<string>, any, RootState> = (action$) => action$.pipe(\n  ofType(completeOnboarding.toString()),\n  mergeMap(() => from(UsersApi.preferencesUpdate({\n    didOnboarding: true,\n  })).pipe(\n    flatMap((data) => scheduled([\n      setUser(data.user),\n      setUserDetailsResolver(data.userDetails),\n    ], async)),\n    catchError(catchAuthError),\n  )),\n);\n\n/**\n * Epic that save shuffle preference for user\n * @param action$\n * @param rootState\n */\nconst setShuffleEpic: Epic<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<SetShufflePayload, string>, any, RootState\n> = (action$, rootState) => action$.pipe(\n  ofType(setShufflingState.toString()),\n  filter((action) => action.payload.isShuffling !== rootState.value.users.userDetails.shuffle),\n  mergeMap((action) => from(UsersApi.preferencesUpdate({\n    shuffle: action.payload.isShuffling,\n  })).pipe(\n    flatMap((data) => scheduled([\n      setUser(data.user),\n      setUserDetailsResolver(data.userDetails),\n    ], async)),\n    catchError(catchAuthError),\n  )),\n);\n\n/**\n * Epic that save oscillation preference for user\n * @param action$\n * @param rootState\n */\nconst setOscillationEpic: Epic<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<SetOscillationPayload, string>, any, RootState\n> = (action$, rootState) => action$.pipe(\n  ofType(setOscillatorState.toString()),\n  filter(\n    (action) => action.payload.isOscillating !== rootState.value.users.userDetails.oscillation,\n  ),\n  mergeMap((action) => from(UsersApi.preferencesUpdate({\n    oscillation: action.payload.isOscillating,\n  })).pipe(\n    flatMap((data) => scheduled([\n      setUser(data.user),\n      setUserDetailsResolver(data.userDetails),\n    ], async)),\n    catchError(catchAuthError),\n  )),\n);\n\n/**\n * Epic that save muted preference for user\n * @param action$\n * @param rootState\n */\nconst setMasterPlayerMutedEpic: Epic<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<SetMasterPlayerMutedPayload, string>, any, RootState\n  > = (action$, rootState) => action$.pipe(\n    ofType(setMasterPlayerIsMuted.toString()),\n    filter(\n      (action) => action.payload.isMuted !== rootState.value.users.userDetails.masterVolumeMuted\n        && !action.payload.mutedByTimer,\n    ),\n    mergeMap((action) => from(UsersApi.preferencesUpdate({\n      masterVolumeMuted: action.payload.isMuted,\n    })).pipe(\n      flatMap((data) => scheduled([\n        setUser(data.user),\n        setUserDetailsResolver(data.userDetails),\n      ], async)),\n      catchError(catchAuthError),\n    )),\n  );\n\n/**\n * Epic that save master volume preference for user\n * @param action$\n * @param rootState\n */\nconst setMasterPlayerVolumeEpic: Epic<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<SetMasterPlayerVolumePayload, string>, any, RootState\n  > = (action$, rootState) => action$.pipe(\n    debounce(() => interval(1000)),\n    ofType(setMasterPlayerVolume.toString()),\n    filter((action) => action.payload.volume !== rootState.value.users.userDetails.masterVolume),\n    mergeMap((action) => from(UsersApi.preferencesUpdate({\n      masterVolume: action.payload.volume,\n    })).pipe(\n      flatMap((data) => scheduled([\n        setUser(data.user),\n        setUserDetailsResolver(data.userDetails),\n      ], async)),\n      catchError(catchAuthError),\n    )),\n  );\n\nexport default [\n  completeOnboardingEpic,\n  setShuffleEpic,\n  setOscillationEpic,\n  setMasterPlayerMutedEpic,\n  setMasterPlayerVolumeEpic,\n];\n","import FavouritesApi from 'app/Api/Favourites.api';\nimport { Epic, ofType } from 'redux-observable';\nimport { Action, PayloadAction } from 'redux-starter-kit';\nimport { RootState } from 'app/redux';\nimport { from, scheduled } from 'rxjs';\nimport {\n  map, mergeMap, catchError, flatMap,\n} from 'rxjs/operators';\nimport { async } from 'rxjs/internal/scheduler/async';\nimport catchAuthError from 'app/redux/utils/catchAuthError';\nimport {\n  setFavourites, fetchFavourites, updateFavourite, createFavourite, markFavourite, deleteFavourite,\n} from '.';\nimport { CreateFavouritePayload, DeleteFavouritePayload, UpdateFavouritePayload } from './favourites.interfaces';\nimport { unmarkActivePlaylistCombo } from '../playlists';\n\n/**\n * Epic that fetch favourites when {fetchFavourites} action goes in store\n * @param action$\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst fetchFavouritesEpic: Epic<Action<string>, any, RootState> = (action$) => action$.pipe(\n  ofType(fetchFavourites.toString()),\n  mergeMap(() => from(FavouritesApi.getAll()).pipe(\n    map((data) => setFavourites(data)),\n    catchError(catchAuthError),\n  )),\n);\n\n/**\n * Epic that send request to api when new favourite is created\n * @param action$\n */\nconst createFavouriteEpic: Epic<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<CreateFavouritePayload, string>, any, RootState\n> = (action$) => action$.pipe(\n  ofType(createFavourite.toString()),\n  mergeMap((action) => from(FavouritesApi.create(action.payload.payload)).pipe(\n    mergeMap((savedFavourite) => from(FavouritesApi.getAll()).pipe(\n      flatMap((data) => scheduled([\n        setFavourites(data),\n        markFavourite({ id: savedFavourite.uuid }),\n        unmarkActivePlaylistCombo(),\n      ], async)),\n    )),\n    catchError(catchAuthError),\n  )),\n);\n\n/**\n * Epic that send request to api when favourite is updated\n * @param action$\n */\nconst updateFavouriteEpic: Epic<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<UpdateFavouritePayload, string>, any, RootState\n> = (action$) => action$.pipe(\n  ofType(updateFavourite.toString()),\n  mergeMap((action) => from(FavouritesApi.update(action.payload.uuid, action.payload.payload)).pipe(\n    map(() => fetchFavourites()),\n    catchError(catchAuthError),\n  )),\n);\n\n/**\n * Epic that send request to api when favourite is deleted\n * @param action$\n */\nconst deleteFavouriteEpic: Epic<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<DeleteFavouritePayload, string>, any, RootState\n> = (action$) => action$.pipe(\n  ofType(deleteFavourite.toString()),\n  mergeMap((action) => from(FavouritesApi.delete(action.payload.uuid)).pipe(\n    map(() => fetchFavourites()),\n    catchError(catchAuthError),\n  )),\n);\n\nexport default [\n  fetchFavouritesEpic,\n  createFavouriteEpic,\n  updateFavouriteEpic,\n  deleteFavouriteEpic,\n];\n","import axios from './AxiosInstance';\nimport {\n  SaveTextDto,\n} from '@noisli/common';\n\n/**\n * Static class that have all connection to API regarding Text module\n */\nexport default class TextApi {\n  static apiUrl = `${process.env.REACT_APP_API_URL}/text`;\n\n  static async saveText(body: SaveTextDto) {\n    const response = await axios.post<string>(`${TextApi.apiUrl}`, body, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async getDownloadToken() {\n    const response = await axios.post<string>(`${TextApi.apiUrl}/get-download-token`, {}, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n}\n","import {\n  interval, concat, of,\n} from 'rxjs';\nimport {\n  mergeMap, debounce, map, catchError, tap,\n} from 'rxjs/operators';\nimport { Epic, ofType } from 'redux-observable';\nimport { RootState } from 'app/redux';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { PayloadAction } from 'redux-starter-kit';\nimport { fromPromise } from 'rxjs/internal-compatibility';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { setIsLoading, setText } from '.';\nimport TextApi from '../../../Api/Text.api';\nimport { SetTextPayload } from './texts.interfaces';\nimport catchAuthError from '../../utils/catchAuthError';\n\nlet writingTimestamp: Dayjs | null = null;\n\n/**\n * Epic that saves text if text is changed\n * First we set writing timestamp if timestamp is null\n * it is debounced with set period 500ms, to prevent constant saving of text\n * If action is not debounced, calculate timestamp then send request to server to save text\n * after save, remove timestamp and loading\n * @param action$\n */\nconst saveTextEpic: Epic<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<SetTextPayload, string>, any, RootState\n> = (action$) => action$.pipe(\n  ofType(setText.toString()),\n  tap(() => {\n    if (writingTimestamp === null) {\n      writingTimestamp = dayjs();\n    }\n  }),\n  debounce(() => interval(500)),\n  mergeMap((action) => {\n    let timeDiff = 0;\n    if (writingTimestamp) {\n      timeDiff = dayjs().diff(writingTimestamp, 'minute', true);\n    }\n    const apiCall$ = fromPromise(TextApi.saveText({\n      text: action.payload.text,\n      writingTime: timeDiff,\n    })).pipe(\n      tap(() => { writingTimestamp = null; }),\n      map(() => setIsLoading({\n        isLoading: false,\n      })),\n      catchError(catchAuthError),\n    );\n\n    return concat(\n      of(setIsLoading({\n        isLoading: true,\n      })),\n      apiCall$,\n    );\n  }),\n);\n\nexport default [\n  saveTextEpic,\n];\n","import {\n  interval,\n} from 'rxjs';\nimport {\n  debounce, catchError, tap, ignoreElements, filter, map,\n} from 'rxjs/operators';\nimport { Epic, ofType } from 'redux-observable';\nimport { RootState } from 'app/redux';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { PayloadAction } from 'redux-starter-kit';\nimport { fromPromise } from 'rxjs/internal-compatibility';\nimport TimerApi from 'app/Api/Timer.api';\nimport {\n  updateTimerConfig, setActualTime, setSessionsCompleted, setActiveTimerCombo, setTimerTitle,\n} from '.';\nimport catchAuthError from '../../utils/catchAuthError';\nimport {\n  SetActiveTimerComboPayload,\n  SetActualTimePayload,\n  SetSessionsCompletedPayload,\n  UpdateTimerConfigPayload,\n} from './timer.interfaces';\nimport { setTimerPageTitle } from './timer.helpers';\n\n/**\n * Epic that saves timer config after changes in timer config\n * Timer config change may occur in timer settings page\n * @param action$\n * @param state\n */\nconst saveTimerConfigEpic: Epic<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<UpdateTimerConfigPayload, string>, any, RootState\n> = (action$, state) => action$.pipe(\n  ofType(updateTimerConfig.toString()),\n  debounce(() => interval(500)),\n  tap(() => {\n    const { timerConfig } = state.value.timer;\n    const apiCall$ = fromPromise(TimerApi.updateConfig(timerConfig)).pipe(\n      catchError(catchAuthError),\n    );\n\n    return apiCall$;\n  }),\n  ignoreElements(),\n);\n\n/**\n * After session completed, epic is run to save session in server\n * @param action$\n * @param state\n * @returns {Observable<never>}\n */\nconst saveSessionsCompletedEpic: Epic<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<SetSessionsCompletedPayload, string>, any, RootState\n  > = (action$, state) => action$.pipe(\n    ofType(setSessionsCompleted.toString()),\n    debounce(() => interval(300)),\n    tap(() => {\n      const { timerConfig } = state.value.timer;\n      const apiCall$ = fromPromise(TimerApi.updateConfig({\n        ...timerConfig,\n      })).pipe(\n        catchError(catchAuthError),\n      );\n\n      return apiCall$;\n    }),\n    ignoreElements(),\n  );\n\n/**\n * After every change of active combo, run epic\n * Epic is debounced by 4 seconds to prevent contstant saving to server in case of changing volume\n * Or user tinkering with player\n *\n * @param action$\n * @param state\n * @returns {Observable<never>}\n */\nconst saveActiveTimerComboEpic: Epic<\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<SetActiveTimerComboPayload, string>, any, RootState\n  > = (action$, state) => action$.pipe(\n    ofType(setActiveTimerCombo.toString()),\n    debounce(() => interval(4000)),\n    tap((action) => {\n      const { timerConfig } = state.value.timer;\n      const apiCall$ = fromPromise(TimerApi.updateConfig({\n        ...timerConfig,\n        savedTimerCombo: action.payload.timerCombo,\n      })).pipe(\n        catchError(catchAuthError),\n      );\n\n      return apiCall$;\n    }),\n    ignoreElements(),\n  );\n\n/**\n * If timer is running, it runs this epic on every actual time set\n * And updates browser tab title\n * @param action$\n * @param state\n * @returns {Observable<C>}\n */\nconst changeBrowserTabTitleOnTimeUpdateEpic: Epic<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  PayloadAction<SetActualTimePayload, string>, any, RootState\n> = (action$, state) => action$.pipe(\n  ofType(setActualTime.toString()),\n  filter(\n    () => state.value.timer.timerConfig.showTimerOnBrowserTab\n      && state.value.timer.isRunning,\n  ),\n  map((action) => {\n    const { actualTime } = action.payload;\n    const { currentTimerType } = state.value.timer;\n    return setTimerTitle({\n      title: setTimerPageTitle(currentTimerType, actualTime),\n    });\n  }),\n);\n\nexport default [\n  saveTimerConfigEpic,\n  saveActiveTimerComboEpic,\n  saveSessionsCompletedEpic,\n  changeBrowserTabTitleOnTimeUpdateEpic,\n];\n","const isServer = typeof window === 'undefined';\n\n/**\n * Localstorage helper for ssr\n * @type {{removeItem: (key: string) => void; getItem: (key: string) => (string | null | null); setItem: (key: string, value: string) => void}}\n */\nconst localStorage = {\n  setItem: (key: string, value: string) => {\n    if (!isServer) {\n      window.localStorage.setItem(key, value);\n    }\n  },\n\n  getItem: (key: string) => {\n    if (!isServer) {\n      return window.localStorage.getItem(key);\n    }\n\n    return null;\n  },\n\n  removeItem: (key: string) => {\n    if (!isServer) {\n      window.localStorage.removeItem(key);\n    }\n  },\n};\n\nexport default localStorage;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  Action, AnyAction, Dispatch, Middleware, MiddlewareAPI,\n} from 'redux';\nimport Router from 'next/router';\nimport { resetUser, setUser } from '../../modules/users';\nimport localStorage from '../../../utils/localStorage';\nimport { RootState } from '../../index';\n\nconst logoutWhitelist = [\n  '/delete-account-success',\n];\n\n\n/**\n * Middleware that handles logout across tabs in browser\n * @returns {({getState}: MiddlewareAPI<Dispatch<AnyAction>, RootState>) => (next: Dispatch) => (action: Action) => void}\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const createAuthMiddleware: () => Middleware = () => (\n  { getState }: MiddlewareAPI<Dispatch<AnyAction>, RootState>,\n) => {\n  window.addEventListener('storage', (event) => {\n    const { users } = getState();\n    if (users.passwordLock\n      || logoutWhitelist.some((item) => !!item.match(window.location.pathname))\n    ) {\n      return;\n    }\n    if (event.key === 'logout-event' && Boolean(event.newValue)) {\n      Router.replace('/logout/passthrough');\n    }\n  });\n\n  return (next: Dispatch) => (action: Action) => {\n    switch (action.type) {\n      case (resetUser.toString()): {\n        next(action);\n        if (!localStorage.getItem('logout-event')) {\n          localStorage.setItem('logout-event', `logout${Math.random()}`);\n        }\n        break;\n      }\n      case (setUser.toString()): {\n        next(action);\n        localStorage.removeItem('logout-event');\n        break;\n      }\n      default:\n        next(action);\n    }\n  };\n};\n","import {\n  configureStore, getDefaultMiddleware, EnhancedStore,\n} from 'redux-starter-kit';\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\nimport {\n  combineReducers, Reducer, Middleware, AnyAction, ReducersMapObject,\n} from 'redux';\nimport baseReducer from './modules/base';\nimport playersReducer from './modules/players';\nimport favouritesReducer from './modules/favourites';\nimport playlistsReducer from './modules/playlists';\nimport usersReducer, { resetUser } from './modules/users';\nimport subscriptionsReducer from './modules/subscriptions';\nimport textsReducer from './modules/texts';\nimport timerReducer from './modules/timer';\nimport { PlayersState } from './modules/players/players.interfaces';\nimport { FavouritesState } from './modules/favourites/favourites.interfaces';\nimport { PlaylistsState } from './modules/playlists/playlists.interfaces';\nimport { UsersState } from './modules/users/users.interfaces';\nimport { createShuffleMiddleware } from './middleware/ShuffleMiddleware/ShuffleMiddleware';\nimport { createOscillationMiddleware } from './middleware/OscillationMiddleware/OscillationMiddleware';\nimport { createTimerMiddleware } from './middleware/TimerMiddleware/TimerMiddleware';\nimport FavouritesMiddleware from './middleware/FavouritesMiddleware/FavouritesMiddleware';\nimport PlaylistsMiddleware from './middleware/PlaylistsMiddleware/PlaylistsMiddleware';\nimport { BaseState } from './modules/base/base.interfaces';\nimport { createSocketMiddleware } from './middleware/SocketMiddleware/SocketMiddleware';\nimport createUserLimitMiddleware from './middleware/UserLimitMiddleware/UserLimitMiddleware';\nimport userEpics from './modules/users/users.epics';\nimport favouritesEpics from './modules/favourites/favourites.epics';\nimport textsEpics from './modules/texts/texts.epics';\nimport timerEpics from './modules/timer/timer.epics';\nimport { SubscriptionsState } from './modules/subscriptions/subscriptions.interfaces';\nimport { TextsState } from './modules/texts/texts.interfaces';\nimport { TimerState } from './modules/timer/timer.interfaces';\nimport { createAuthMiddleware } from './middleware/AuthMiddleware/AuthMiddleware';\n\nexport interface RootState {\n  base: BaseState;\n  players: PlayersState;\n  favourites: FavouritesState;\n  playlists: PlaylistsState;\n  users: UsersState;\n  subscriptions: SubscriptionsState;\n  texts: TextsState;\n  timer: TimerState;\n}\n\nexport const rootEpic = combineEpics(\n  ...userEpics,\n  ...favouritesEpics,\n  ...textsEpics,\n  ...timerEpics,\n);\n\n/**\n * Factory that returns reducers and any additional reducers (used with chrome extension)\n * @param additionalReducers\n * @returns {Reducer<CombinedState<unknown>>}\n */\nexport const appReducerFactory = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  additionalReducers: ReducersMapObject<any, any> = {},\n) => combineReducers({\n  base: baseReducer,\n  players: playersReducer,\n  favourites: favouritesReducer,\n  playlists: playlistsReducer,\n  users: usersReducer,\n  subscriptions: subscriptionsReducer,\n  texts: textsReducer,\n  timer: timerReducer,\n  ...additionalReducers,\n});\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype RootReducerFactory = (appReducer: Reducer<any>) => Reducer<RootState>\n\nconst rootReducerFactory: RootReducerFactory = (appReducer) => (state, action) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (action.type === (resetUser as any).toString()) {\n    // eslint-disable-next-line no-param-reassign\n    state = undefined;\n  }\n\n  return appReducer(state, action);\n};\n\n/**\n * Function that initializes full redux store\n * @param initalState\n * @param middlewares\n * @param appReducer\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const initializeStore = (\n  initalState: RootState | undefined,\n  middlewares: Middleware[] = [\n    createUserLimitMiddleware(),\n  ],\n  appReducer = appReducerFactory(),\n): EnhancedStore<RootState, AnyAction> => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const epicMiddleware = createEpicMiddleware<any, any, RootState>();\n\n  const store = configureStore({\n    reducer: rootReducerFactory(appReducer),\n    devTools: !!process.env.USE_DEVTOOLS,\n    middleware: [\n      ...middlewares,\n      ...getDefaultMiddleware(),\n      createAuthMiddleware(),\n      createTimerMiddleware(),\n      FavouritesMiddleware,\n      PlaylistsMiddleware,\n      // createSocketMiddleware(),\n      createOscillationMiddleware(),\n      createShuffleMiddleware(),\n      epicMiddleware,\n    ],\n    preloadedState: initalState,\n  });\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  epicMiddleware.run(rootEpic as any);\n\n  return store;\n};\n\n/**\n * Function that initialize redux store without middlewares\n * Used at server for lite server side rendering\n * @param initalState\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const initializeLiteStore = (\n  initalState: RootState | undefined,\n) => {\n  const store = configureStore({\n    reducer: rootReducerFactory(appReducerFactory()),\n    preloadedState: initalState,\n  });\n  return store;\n};\n\nexport type Store = ReturnType<typeof initializeStore>;\n","import { FavouritesState } from './favourites.interfaces';\n\nconst state: FavouritesState = {\n  favourites: [],\n  sharedFavourite: null,\n};\n\nexport default state;\n","import { createSlice } from 'redux-starter-kit';\nimport state from './favourites.state';\nimport {\n  unmarkActiveFavouriteReducer,\n  markActiveFavouriteReducer,\n  setFavouriteIsShufflingReducer,\n  unmarkFavouriteReducer,\n  markFavouriteReducer,\n  setFavouritesReducer,\n  updateFavouriteReducer,\n  createFavouriteReducer,\n  deleteFavouriteReducer,\n  setSharedFavouriteReducer,\n  setSharedFavouritePlayingReducer,\n  resetUserFavouritesReducer,\n} from './favourites.reducers';\n\nconst favouritesSlice = createSlice({\n  slice: 'favourites',\n\n  initialState: state,\n\n  reducers: {\n    unmarkActiveFavourite: unmarkActiveFavouriteReducer,\n    markActiveFavourite: markActiveFavouriteReducer,\n    markFavourite: markFavouriteReducer,\n    unmarkFavourite: unmarkFavouriteReducer,\n    setFavouriteIsShuffling: setFavouriteIsShufflingReducer,\n\n    setFavourites: setFavouritesReducer,\n    updateFavourite: updateFavouriteReducer,\n    deleteFavourite: deleteFavouriteReducer,\n\n    createFavourite: createFavouriteReducer,\n    fetchFavourites: () => {},\n\n    setSharedFavourite: setSharedFavouriteReducer,\n    setSharedFavouritePlaying: setSharedFavouritePlayingReducer,\n\n    resetUserFavourites: resetUserFavouritesReducer,\n  },\n});\n// Extract the action creators object and the reducer\nconst { actions, reducer, selectors } = favouritesSlice;\n// Extract and export each action creator by name\nexport const {\n  unmarkActiveFavourite,\n  markActiveFavourite,\n  markFavourite,\n  unmarkFavourite,\n  setFavouriteIsShuffling,\n\n  setFavourites,\n  fetchFavourites,\n  updateFavourite,\n  createFavourite,\n  deleteFavourite,\n  setSharedFavourite,\n  setSharedFavouritePlaying,\n\n  resetUserFavourites,\n} = actions;\n\nexport const { getFavourites } = selectors;\n// Export the reducer, either as a default or named export\nexport default reducer;\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from 'redux-starter-kit';\nimport { Favourite as FavouriteFromApi } from '@noisli/common';\nimport {\n  Favourite,\n  FavouritesState,\n  MarkActiveFavouritePayload,\n  FavouriteIdPayload,\n  UpdateFavouritePayload, CreateFavouritePayload, DeleteFavouritePayload, SetSharedFavouritePayload,\n} from './favourites.interfaces';\nimport { SetComboShufflePayload } from '../common/shuffle.interfaces';\nimport { ComboIdPayload } from '../common/combos.interfaces';\n\nexport const markFavouriteReducer = (\n  state: FavouritesState, action: PayloadAction<ComboIdPayload>,\n) => {\n  const idx = state.favourites.findIndex((favourite) => favourite.id === action.payload.id);\n\n  if (idx > -1) {\n    state.favourites[idx].isPlaying = true;\n  }\n};\n\nexport const unmarkFavouriteReducer = (\n  state: FavouritesState, action: PayloadAction<FavouriteIdPayload>,\n) => {\n  const idx = state.favourites.findIndex((favourite) => favourite.id === action.payload.id);\n\n  if (idx > -1) {\n    state.favourites[idx].isPlaying = false;\n  }\n};\n\nexport const unmarkActiveFavouriteReducer = (\n  state: FavouritesState,\n) => {\n  const idx = state.favourites.findIndex((favourite) => favourite.isPlaying);\n\n  if (idx > -1) {\n    state.favourites[idx].isPlaying = false;\n  }\n};\n\nexport const markActiveFavouriteReducer = (\n  state: FavouritesState, action: PayloadAction<MarkActiveFavouritePayload>,\n) => {\n  const idx = state.favourites.findIndex((favourite) => favourite.id === action.payload.id);\n  if (idx > -1) {\n    state.favourites[idx].isPlaying = true;\n  }\n};\n\nexport const setFavouriteIsShufflingReducer = (\n  state: FavouritesState, action: PayloadAction<SetComboShufflePayload>,\n) => {\n  const { isShuffling, comboId } = action.payload;\n\n  state.favourites.forEach((combo) => {\n    if (combo.id === comboId) {\n      combo.isShuffling = isShuffling;\n    }\n  });\n};\n\nexport const setFavouritesReducer = (\n  state: FavouritesState, action: PayloadAction<FavouriteFromApi[]>,\n) => {\n  state.favourites = action.payload.map((favourite) => {\n    const newFavourite: Favourite = {\n      ...favourite,\n      id: favourite.uuid,\n      isPlaying: false,\n      isShuffling: false,\n    };\n    const oldFavourite = state.favourites.find((fav) => fav.uuid === favourite.uuid);\n\n    if (oldFavourite) {\n      newFavourite.isPlaying = oldFavourite.isPlaying;\n      newFavourite.isShuffling = oldFavourite.isShuffling;\n    }\n\n    return newFavourite;\n  });\n};\n\nexport const updateFavouriteReducer = (\n  state: FavouritesState, action: PayloadAction<UpdateFavouritePayload>,\n) => {\n  state.favourites.forEach((favourite) => {\n    if (favourite.uuid === action.payload.uuid) {\n      favourite.name = action.payload.payload.name;\n    }\n  });\n};\n\nexport const createFavouriteReducer = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  state: FavouritesState, action: PayloadAction<CreateFavouritePayload>,\n) => {};\n\nexport const deleteFavouriteReducer = (\n  state: FavouritesState, action: PayloadAction<DeleteFavouritePayload>,\n) => {\n  state.favourites = state.favourites.filter((favourite) => favourite.id !== action.payload.uuid);\n};\n\nexport const setSharedFavouriteReducer = (\n  state: FavouritesState, action: PayloadAction<SetSharedFavouritePayload>,\n) => {\n  state.sharedFavourite = action.payload.favourite;\n};\n\nexport const setSharedFavouritePlayingReducer = (\n  state: FavouritesState,\n) => {\n  if (state.sharedFavourite) {\n    state.sharedFavourite.isPlaying = true;\n  }\n};\n\nexport const resetUserFavouritesReducer = (\n  state: FavouritesState,\n) => {\n  state.favourites = [];\n};\n","import Router from 'next/router';\nimport { UpdateUserDetailsResponseEventData } from '@noisli/common';\nimport { setLimitReached } from './index';\nimport { SocketHandler, SocketHandlerWithData } from '../../middleware/SocketMiddleware/Socket.interface';\nimport { setUserDataWithIncludesThunk } from './users.thunks';\n\nexport const onLimitReached: SocketHandler = ({ dispatch }) => {\n  dispatch(setLimitReached({\n    limitReached: true,\n  }));\n};\n\nexport const onLimitReachedCheck: SocketHandler = ({ dispatch }) => {\n  dispatch(setLimitReached({\n    limitReached: true,\n  }));\n};\n\nexport const onTerminateSession: SocketHandler = ({ getState }) => {\n  const curState = getState();\n  if (curState.users.passwordLock) {\n    return;\n  }\n  Router.replace('/logout/passthrough');\n};\n\nexport const onReloadSession: SocketHandler = () => {\n  window.location.reload();\n};\n\nexport const onUpdateUserDetails: SocketHandlerWithData<UpdateUserDetailsResponseEventData> = (\n  { dispatch },\n  data,\n) => {\n  dispatch(setUserDataWithIncludesThunk(data.userData));\n};\n","import { UserSocketEvent, FavouriteSocketEvent, TimerSocketEvent } from '@noisli/common';\nimport {\n  onLimitReached, onLimitReachedCheck, onTerminateSession, onReloadSession, onUpdateUserDetails,\n} from '../../modules/users/users.socketHandlers';\nimport { onUpdateTimerConfig } from '../../modules/timer/timer.socketHandlers';\nimport { onUpdateFavourites } from '../../modules/favourites/favourites.socketHandlers';\n\n// Map of handlers for socket events\nconst socketHandlers = {\n  [UserSocketEvent.LIMIT_REACHED]: onLimitReached,\n  [UserSocketEvent.LIMIT_REACHED_CHECK]: onLimitReachedCheck,\n  [UserSocketEvent.RELOAD_SESSION]: onReloadSession,\n  [UserSocketEvent.TERMINATE_SESSION]: onTerminateSession,\n  [UserSocketEvent.JOIN_ROOM]: onTerminateSession,\n  [UserSocketEvent.UPDATE_USER_DETAILS]: onUpdateUserDetails,\n  [FavouriteSocketEvent.UPDATE_FAVOURITES]: onUpdateFavourites,\n  [TimerSocketEvent.UPDATE_TIMER_CONFIG]: onUpdateTimerConfig,\n};\n\nexport type SocketHandlers = typeof socketHandlers;\n\nexport default socketHandlers;\n","import { UpdateFavouritesResponseEventData } from '@noisli/common';\nimport { SocketHandlerWithData } from '../../middleware/SocketMiddleware/Socket.interface';\nimport { setFavourites } from './index';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const onUpdateFavourites: SocketHandlerWithData<UpdateFavouritesResponseEventData> = (\n  { dispatch },\n  data,\n) => {\n  dispatch(setFavourites(data.favourites));\n};\n","import { UpdateTimerConfigResponseEventData } from '@noisli/common';\nimport { reloadTimerConfigThunk } from './timer.thunks';\nimport { SocketHandlerWithData } from '../../middleware/SocketMiddleware/Socket.interface';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const onUpdateTimerConfig: SocketHandlerWithData<UpdateTimerConfigResponseEventData> = (\n  { dispatch },\n  data,\n) => {\n  dispatch(reloadTimerConfigThunk(data.timerConfig));\n};\n","import axios from './AxiosInstance';\nimport {AccountType, UserSocketEvent as UserLimitEvents} from '@noisli/common';\nimport { EventEmitter } from 'events';\nimport UsersApi from './Users.api';\n\n/**\n * (NOT STATIC, NEED INITIALIZATION) Class that have all connection to API regarding User play limit module\n */\nexport default class UsersLimitConnectApi {\n  private emmiter = new EventEmitter();\n\n  public apiUrl = `${UsersApi.apiUrl}/limit`;\n\n  constructor(isChromeExtension = false) {\n    if (isChromeExtension) {\n      this.apiUrl = `${UsersApi.apiUrl}/limit/chrome`;\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async userLimitRequest<T extends Record<string, any>>(type: UserLimitEvents, payload: T) {\n    const response = await axios.post<{ limitReached: boolean, accountType: AccountType }>(this.apiUrl, {\n      type,\n      data: payload,\n    }, {\n      withCredentials: true,\n    });\n\n    if (response.data.limitReached) {\n      this.emmiter.emit(UserLimitEvents.LIMIT_REACHED, type);\n    }\n    this.emmiter.emit('ACCOUNT_TYPE_UPDATE', response.data.accountType);\n  }\n\n  addEventListener<T>(event: string, handler: (payload: T) => void) {\n    return this.emmiter.on(event, handler);\n  }\n}\n","import {Action, Dispatch, Middleware, MiddlewareAPI,} from 'redux';\nimport dayjs from 'dayjs';\nimport {\n  AccountType,\n  CheckLimitEventData,\n  StopPlayingEventData,\n  UserSocketEvent as UserLimitEvents,\n  UserSocketEvent,\n} from '@noisli/common';\nimport {PayloadAction} from 'redux-starter-kit';\nimport {EventEmitter} from 'events';\nimport {closeAllModals} from '../../modules/base';\nimport {checkLimitReached, resetUser, setShowLimitReachedModal, userAccountTypeMismatch} from '../../modules/users';\nimport {setMasterPlayerPlaying, stopAllPlayers} from '../../modules/players';\nimport {unmarkActivePlaylistCombo} from '../../modules/playlists';\nimport {unmarkActiveFavourite} from '../../modules/favourites';\n// eslint-disable-next-line\nimport {TickWorkerInterface} from '../../../WebWorkers/tick.worker';\nimport socketHandlers from '../SocketMiddleware/Socket.handlers';\nimport {SetMasterPlayerPlayingPayload} from '../../modules/players/players.interfaces';\n// eslint-disable-next-line\nimport TickWorker from 'worker-loader?name=static/[hash].worker.js!../../../WebWorkers/tick.worker';\nimport {RootState} from '../../index';\nimport UsersLimitConnectApi from '../../../Api/UserLimitConnect.api';\n\n/**\n * Middleware that is tracking the user sound listen limit\n * We are using the timezone offset technique so the user cant easily spoof the time\n * @param isChromeExtension - pass true for proper handling on chrome extension\n * @returns {(middlewareAPI: MiddlewareAPI<Dispatch<any>, RootState>) => (next: Dispatch) => (action: Action) => void}\n */\nconst createUserLimitMiddleware: (isChromeExtension?: boolean) => Middleware = (isChromeExtension = false) => {\n  const userLimitConnection = new UsersLimitConnectApi(isChromeExtension);\n\n  return (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    middlewareAPI: MiddlewareAPI<Dispatch<any>, RootState>,\n  ) => {\n    // middleware setup\n    const { dispatch, getState } = middlewareAPI;\n    let hasCheckedForLimit = false;\n    let timestamp = dayjs();\n    let tickWorker: TickWorkerInterface | null = null;\n    let limitReachedEventListener: EventEmitter | null = null;\n    let accountTypeEventListener: EventEmitter | null = null;\n\n    // Function to run if user reached limit\n    const terminatePlaying = (type: UserSocketEvent) => {\n      // if event is check and we dont check for limit yet\n      if (type === UserSocketEvent.CHECK_LIMIT && !hasCheckedForLimit) {\n        // Show limit reached modal\n        dispatch(closeAllModals());\n        dispatch(setShowLimitReachedModal({\n          showModal: true,\n        }));\n      } else if (type !== UserSocketEvent.CHECK_LIMIT) {\n        dispatch(closeAllModals());\n        dispatch(setShowLimitReachedModal({\n          showModal: true,\n        }));\n      }\n      hasCheckedForLimit = true;\n      dispatch(stopAllPlayers());\n\n      // stop limit worker\n      if (tickWorker) {\n        tickWorker.postMessage({\n          command: 'stop',\n        });\n        tickWorker.terminate();\n      }\n\n      setTimeout(() => {\n        dispatch(unmarkActivePlaylistCombo());\n        dispatch(unmarkActiveFavourite());\n      }, 1);\n    };\n\n    // Set random time to check the limit (60 seconds +- 10 seconds)\n    const getRandomTimeoutTime = () => 60 * 1000 + (Math.random() * 20000 - 10000);\n\n    // middleware function block\n    return (next: Dispatch) => (action: Action) => {\n      const state = getState();\n      const { users } = state;\n      const { limitReached, user } = users;\n\n      // if user is not logged in, do not track\n      if (!Object.keys(user || {}).length) {\n        next(action);\n        return;\n      }\n\n      // if event listener is not binded, bind it now\n      if (!limitReachedEventListener) {\n        // bind listener for limit reached event\n        limitReachedEventListener = userLimitConnection.addEventListener(\n          UserSocketEvent.LIMIT_REACHED,\n          (type: UserLimitEvents) => {\n            socketHandlers[UserSocketEvent.LIMIT_REACHED](middlewareAPI);\n            terminatePlaying(type);\n          },\n        );\n      }\n\n      // if event listener is not binded, bind it now\n      if (!accountTypeEventListener) {\n        // bind listener for limit reached event\n        accountTypeEventListener = userLimitConnection.addEventListener(\n          'ACCOUNT_TYPE_UPDATE',\n          (accountType: AccountType) => {\n            const actualState = getState();\n            if (actualState.users.user.accountType !== accountType) {\n              // window.location.replace('/logout/passthrough');\n              window.location.reload();\n              dispatch(userAccountTypeMismatch());\n            }\n          },\n        );\n      }\n\n      switch (action.type) {\n        case (setMasterPlayerPlaying.toString()): {\n          const act = (action as PayloadAction<SetMasterPlayerPlayingPayload>);\n\n          // if we are starting to listening sounds\n          if (act.payload.isPlaying && !state.players.masterController.isPlaying) {\n            //create timestamp\n            timestamp = dayjs();\n            //send message that we have started playing\n            userLimitConnection.userLimitRequest(UserSocketEvent.START_PLAYING, {\n              uuid: user.uuid,\n              timezoneOffset: -(new Date().getTimezoneOffset() / 60),\n            });\n\n            // Run new tick worker that will confirm time listened\n            tickWorker = new TickWorker();\n\n            tickWorker.onmessage = () => {\n              // get current state of players\n              const { players } = getState();\n              // if we are not playing any sounds, just terminate the worker\n              if (!players.masterController.isPlaying) {\n                if (tickWorker) {\n                  tickWorker.postMessage({\n                    command: 'stop',\n                  });\n                  tickWorker.terminate();\n                }\n                return;\n              }\n              // Send confirmation of time to backend\n              userLimitConnection.userLimitRequest(UserSocketEvent.CONFIRM_TIME, {\n                uuid: user.uuid,\n                timeDiff: dayjs().diff(timestamp, 'minute', true),\n                timezoneOffset: -(new Date().getTimezoneOffset() / 60),\n              });\n\n              //update timestamp\n              timestamp = dayjs();\n\n              //start new count\n              tickWorker?.postMessage({\n                command: 'start_timeout',\n                payload: {\n                  timeout: getRandomTimeoutTime(),\n                },\n              });\n            };\n\n            // start first count\n            tickWorker.postMessage({\n              command: 'start_timeout',\n              payload: {\n                timeout: getRandomTimeoutTime(),\n              },\n            });\n          }\n\n          // if we are about to stop listening to sounds\n          if (!act.payload.isPlaying && state.players.masterController.isPlaying) {\n            // send stop playing message to backend (log time between last check and stop)\n            userLimitConnection.userLimitRequest<StopPlayingEventData>(UserSocketEvent.STOP_PLAYING, {\n              uuid: user.uuid,\n              timeDiff: dayjs().diff(timestamp, 'minute', true),\n              timezoneOffset: -(new Date().getTimezoneOffset() / 60),\n            });\n\n            // stop tick worker\n            if (tickWorker) {\n              tickWorker.postMessage({\n                command: 'stop',\n              });\n              tickWorker.terminate();\n            }\n          }\n\n          next(action);\n          if (limitReached) {\n            terminatePlaying(UserSocketEvent.LIMIT_REACHED);\n          }\n          break;\n        }\n\n        case (checkLimitReached.toString()): {\n          // if check limit is forced in app, just ask server for limit\n          userLimitConnection.userLimitRequest<CheckLimitEventData>(UserSocketEvent.CHECK_LIMIT, {\n            uuid: user.uuid,\n            timezoneOffset: -(new Date().getTimezoneOffset() / 60),\n          });\n\n          next(action);\n          break;\n        }\n\n        case (stopAllPlayers.toString()): {\n          if (!state.players.masterController.isPlaying) {\n            next(action);\n            break;\n          }\n\n          // if stop all players was requested by user, log time to server\n          userLimitConnection.userLimitRequest<StopPlayingEventData>(UserSocketEvent.STOP_PLAYING, {\n            uuid: user.uuid,\n            timeDiff: dayjs().diff(timestamp, 'minute', true),\n            timezoneOffset: -(new Date().getTimezoneOffset() / 60),\n          });\n\n          if (tickWorker) {\n            tickWorker.postMessage({\n              command: 'stop',\n            });\n            tickWorker.terminate();\n          }\n\n          next(action);\n          break;\n        }\n\n        case (resetUser.toString()): {\n          // if user is logging out, remove listener\n          limitReachedEventListener?.removeAllListeners(UserSocketEvent.LIMIT_REACHED);\n          limitReachedEventListener = null;\n\n          next(action);\n          break;\n        }\n\n        default:\n          next(action);\n          break;\n      }\n    };\n  };\n};\n\nexport default createUserLimitMiddleware;\n","import { PlaylistsState } from './playlists.interfaces';\nimport { generateBackgroundVariant } from './playlists.utils';\n\nconst state: PlaylistsState = {\n  playlists: [],\n  playlistSliderPosition: 0,\n  playlistBackground: generateBackgroundVariant(''),\n};\n\nexport default state;\n","import { createSlice } from 'redux-starter-kit';\nimport state from './playlists.state';\nimport {\n  unmarkActivePlaylistComboReducer,\n  markActivePlaylistComboReducer,\n  setPlaylistComboIsShufflingReducer,\n  markActiveComboReducer,\n  unmarkActiveComboReducer,\n  setPlaylistsReducer,\n  setPlaylistsSliderPositionReducer,\n  setPlaylistBackgroundReducer,\n} from './playlists.reducers';\n\nconst playlistsSlice = createSlice({\n  slice: 'playlists',\n\n  initialState: state,\n\n  reducers: {\n    unmarkActivePlaylistCombo: unmarkActivePlaylistComboReducer,\n    markActivePlaylistCombo: markActivePlaylistComboReducer,\n    setPlaylistComboIsShuffling: setPlaylistComboIsShufflingReducer,\n    markActiveCombo: markActiveComboReducer,\n    unmarkActiveCombo: unmarkActiveComboReducer,\n    setPlaylists: setPlaylistsReducer,\n    setPlaylistsSliderPosition: setPlaylistsSliderPositionReducer,\n    setPlaylistBackground: setPlaylistBackgroundReducer,\n  },\n});\n// Extract the action creators object and the reducer\nconst { actions, reducer, selectors } = playlistsSlice;\n// Extract and export each action creator by name\nexport const {\n  unmarkActivePlaylistCombo,\n  markActivePlaylistCombo,\n  setPlaylistComboIsShuffling,\n  markActiveCombo,\n  unmarkActiveCombo,\n  setPlaylists,\n  setPlaylistsSliderPosition,\n  setPlaylistBackground,\n} = actions;\n\nexport const { getPlaylists } = selectors;\n// Export the reducer, either as a default or named export\nexport default reducer;\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from 'redux-starter-kit';\nimport {\n  PlaylistsState,\n  ActivePlaylistComboPayload,\n  Playlist,\n  SetPlaylistsSliderPositionPayload,\n  SetPlaylistBackgroundPayload,\n} from './playlists.interfaces';\nimport { SetComboShufflePayload } from '../common/shuffle.interfaces';\nimport { ComboIdPayload } from '../common/combos.interfaces';\n\nexport const unmarkActivePlaylistComboReducer = (\n  state: PlaylistsState,\n) => {\n  const idx = state.playlists.findIndex((playlist) => playlist.isPlaying);\n\n  if (idx > -1) {\n    state.playlists[idx].isPlaying = false;\n    const comboIdx = state.playlists[idx].items.findIndex((combo) => combo.isPlaying);\n\n    if (comboIdx > -1) {\n      state.playlists[idx].items[comboIdx].isPlaying = false;\n    }\n  }\n};\n\nexport const markActivePlaylistComboReducer = (\n  state: PlaylistsState, action: PayloadAction<ActivePlaylistComboPayload>,\n) => {\n  const { playlistId, comboId } = action.payload;\n  const idx = state.playlists.findIndex((playlist) => playlist.id === playlistId);\n  state.playlists[idx].isPlaying = true;\n\n  if (idx > -1) {\n    const comboIdx = state.playlists[idx].items.findIndex((combo) => combo.id === comboId);\n\n    if (comboIdx > -1) {\n      state.playlists[idx].items[comboIdx].isPlaying = true;\n    }\n  }\n};\n\nexport const setPlaylistComboIsShufflingReducer = (\n  state: PlaylistsState, action: PayloadAction<SetComboShufflePayload>,\n) => {\n  const activePlaylistIdx = state.playlists.findIndex((playlist) => playlist.isPlaying);\n  const { isShuffling, comboId } = action.payload;\n\n  if (activePlaylistIdx > -1) {\n    state.playlists[activePlaylistIdx].items.forEach((combo) => {\n      if (combo.id === comboId) {\n        combo.isShuffling = isShuffling;\n      }\n    });\n\n    state.playlists[activePlaylistIdx].isShuffling = state.playlists[activePlaylistIdx].items.some(\n      (combo) => combo.isShuffling,\n    );\n  }\n};\n\nexport const markActiveComboReducer = (\n  state: PlaylistsState, action: PayloadAction<ComboIdPayload>,\n) => {\n  const activePlaylistIdx = state.playlists.findIndex((playlist) => playlist.isPlaying);\n\n  if (activePlaylistIdx > -1) {\n    state.playlists[activePlaylistIdx].items.forEach((combo) => {\n      if (combo.id === action.payload.id) {\n        combo.isPlaying = true;\n      }\n    });\n  }\n};\n\nexport const unmarkActiveComboReducer = (\n  state: PlaylistsState, action: PayloadAction<ComboIdPayload>,\n) => {\n  const activePlaylistIdx = state.playlists.findIndex((playlist) => playlist.isPlaying);\n\n  if (activePlaylistIdx > -1) {\n    state.playlists[activePlaylistIdx].items.forEach((combo) => {\n      if (combo.id === action.payload.id) {\n        combo.isPlaying = false;\n      }\n    });\n  }\n};\n\nexport const setPlaylistsReducer = (\n  state: PlaylistsState, action: PayloadAction<Playlist[]>,\n) => {\n  state.playlists = action.payload;\n};\n\nexport const setPlaylistsSliderPositionReducer = (\n  state: PlaylistsState, action: PayloadAction<SetPlaylistsSliderPositionPayload>,\n) => {\n  state.playlistSliderPosition = action.payload.position;\n};\n\nexport const setPlaylistBackgroundReducer = (\n  state: PlaylistsState, action: PayloadAction<SetPlaylistBackgroundPayload>,\n) => {\n  state.playlistBackground = action.payload.playlistBackground;\n};\n","import { DefaultTheme } from 'styled-components';\nimport colors from './_colors';\n\nconst theme: DefaultTheme = {\n  fontPrimary: '\\'Raleway\\', sans-serif',\n  fontSecondary: '\"Inconsolata\", SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace',\n  transition: '0.2s ease-in-out',\n  backgroundTransition: '10s ease-in-out',\n\n  header: {\n    height: 76,\n    space: 44,\n    shadow: '0 1px 2px rgba(0, 0, 0, 0.1)',\n\n    home: {\n      height: 60,\n    },\n  },\n\n  zIndex: {\n    header: 1000,\n  },\n\n  colors,\n};\n\nexport default theme;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Action, Dispatch } from 'redux';\nimport { setShowShareModal } from '@noisli/app/dist/redux/modules/base';\nimport { setShowLimitReachedModal } from '@noisli/app/dist/redux/modules/users';\nimport { PayloadAction } from 'redux-starter-kit';\n// eslint-disable-next-line import/named\nimport { SetTimerConfigPayload } from '@noisli/app/dist/redux/modules/timer/timer.interfaces';\nimport { setTimerConfig, reloadTimerConfig } from '@noisli/app/dist/redux/modules/timer';\nimport store from './index';\nimport { performAuthCheck } from '../../background/auth';\n\nexport const CHECK_USER_AUTH = 'users/check-auth';\n\nexport const checkUserAuth = (originalAction: Action) => {\n  performAuthCheck();\n  store.dispatch(setShowShareModal({\n    showShareModal: false,\n  }));\n  store.dispatch(setShowLimitReachedModal({\n    showModal: false,\n  }));\n  return originalAction;\n};\n\nexport const reloadTimerConfigAlias = (\n  originalAction: PayloadAction<SetTimerConfigPayload>,\n) => (dispatch: Dispatch) => {\n  dispatch(reloadTimerConfig({\n    timerConfig: originalAction.payload.timerConfig,\n  }));\n};\n\nexport default {\n  [CHECK_USER_AUTH]: checkUserAuth,\n  [setTimerConfig.toString()]: reloadTimerConfigAlias,\n};\n","import axios from 'axios';\nimport { UserIncludes, UserRO } from '@noisli/common';\nimport UsersApi from '@noisli/app/dist/Api/Users.api';\nimport { setUserDataWithIncludesThunk } from '@noisli/app/dist/redux/modules/users/users.thunks';\nimport { resetUser } from '@noisli/app/dist/redux/modules/users';\nimport { setPlaylists } from '@noisli/app/dist/redux/modules/playlists';\nimport { generatePlaylistsState } from '@noisli/app/dist/redux/modules/playlists/playlists.utils';\nimport { setChromeExtensionPage } from '../redux/modules/chromeExtension';\nimport { ChromeExtensionPage } from '../redux/modules/chromeExtension/chromeExtension.interfaces';\nimport store, { RootState } from '../redux/background';\nimport { event } from '../utils/GoogleAnalytics';\n\nexport const setAuthHeader = (jwt?: string) => {\n  const token = jwt;\n\n  if (token) {\n    axios.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n};\n\nexport const resetAuthHeader = () => {\n  delete axios.defaults.headers.Authorization;\n};\n\nexport const auth = async (\n  includes: UserIncludes[],\n): Promise<UserRO | undefined> => UsersApi.checkUser(undefined, includes);\n\nexport const logout = async () => {\n  resetAuthHeader();\n  store.dispatch(resetUser());\n  store.dispatch(setPlaylists(generatePlaylistsState()));\n  store.dispatch(setChromeExtensionPage({\n    page: ChromeExtensionPage.ONBOARDING,\n  }));\n};\n\nexport const performAuthCheck = async () => {\n  window.chrome.cookies.get({ url: process.env.REACT_APP_PAGE_URL as string, name: 'jwt' }, async (cookie) => {\n    if (cookie) {\n      setAuthHeader(cookie.value);\n      let state = store.getState();\n      try {\n        const userRO = await auth([\n          'favourites',\n          'timer',\n          'userDetails',\n        ]);\n        if (!state.users.user.uuid && userRO?.user.uuid) {\n          event({\n            eventAction: 'Extension',\n            eventCategory: 'Log in',\n          });\n        }\n        if (state.users.user.uuid && state.users.user.uuid !== userRO?.user.uuid) {\n          store.dispatch(resetUser());\n          store.dispatch(setPlaylists(generatePlaylistsState()));\n        }\n        store.dispatch(setUserDataWithIncludesThunk(userRO));\n        state = store.getState();\n        if ((state as RootState).chromeExtension.page === ChromeExtensionPage.ONBOARDING) {\n          store.dispatch(setChromeExtensionPage({\n            page: ChromeExtensionPage.PLAYLISTS,\n          }));\n        }\n      } catch (e) {\n        if ((state as RootState).chromeExtension.isOffline) {\n          return;\n        }\n        logout();\n      }\n    } else {\n      logout();\n    }\n  });\n};\n\n\naxios.interceptors.response.use(response => response, (error) => {\n  if (error?.response?.status === 401) {\n    logout();\n  }\n  return Promise.reject(error);\n});\n","import 'slick-carousel/slick/slick.css';\nimport { css } from 'styled-components';\nimport rwd, { Breakpoint } from '../rwd';\n// import 'slick-carousel/slick/slick-theme.css';\n\nconst styles = css`\n  /* Arrows */\n  .slick-prev,\n  .slick-next {\n    font-size: 0;\n    line-height: 0;\n    top: 0;\n    bottom: 0;\n    position: absolute;\n    width: 60px;\n    z-index: 1;\n    border: 0;\n    padding: 0;\n\n    ${rwd[Breakpoint.MEDIUM]`\n      display: inline-flex;\n    `}\n    \n    &:hover,\n    &:focus {\n      outline: none;\n      \n      &::before {\n        outline: none;\n        background: ${(props) => props.theme.colors.white30};\n      }\n    }\n    \n    &::before {\n      content: '';\n      cursor: pointer;\n      position: absolute;\n      width: 26px;\n      height: 26px;\n      top: 64px;\n  \n      transform: translate(0, -50%);\n      border-radius: 50%;\n  \n      cursor: pointer;\n  \n      color: ${(props) => props.theme.colors.white};\n      border: none;\n      outline: none;\n      background: ${(props) => props.theme.colors.white15};\n    }\n    \n    svg {\n      cursor: pointer;\n      position: absolute;\n      top: 64px;\n      transform: translateY(-50%);\n    }\n\n    .slick-disabled {\n      &::before {\n        opacity: .25;\n      }\n    }\n  }\n\n  .slick-prev {\n    left: 0;\n    \n    &::before {\n      left: 4px;\n    }\n    \n    svg {\n      left: 10px;\n    }\n  }\n\n  .slick-next {\n    right: 0;\n    //background: linear-gradient(270deg, #5CE5B4 0%, #5CE5B4 40%, rgba(92,229,180,0.00) 100%);\n    \n    &::before {\n      right: 4px;\n    }\n    \n    svg {\n      right: 10px;\n    }\n  }\n`;\n\nexport default styles;\n","import { css, keyframes } from 'styled-components';\nimport { Arrow } from 'app/components/Tooltip/Tooltip.styled';\n\nconst tooltipBound = keyframes`\n 0% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-15px);\n  }\n  100% {\n    transform: translateY(0);\n  }\n`;\n\nconst styles = css`\n  /* Arrows */\n  .MuiTooltip-popper {\n    position: relative;\n    pointer-events: all !important;\n    z-index: 2 !important;\n    \n    .MuiTooltip-tooltip {\n      position: relative;\n      background: ${(props) => props.theme.colors.lightGrey1};\n      box-shadow: 0 2px 4px ${(props) => props.theme.colors.black20};\n      border-radius: 11px;\n      padding: 16px;\n      \n      &--homepage {\n        box-shadow: 0 2px 4px ${(props) => props.theme.colors.black05};\n        background: ${(props) => props.theme.colors.black16};\n        padding: 10px 32px;\n        border-radius: 18px;\n        animation: ${tooltipBound} 1.2s ease-in-out infinite;\n      }\n      \n      &--white {\n        background: ${(props) => props.theme.colors.white};\n        text-align: center;\n        padding: 16px;\n      }\n      \n      &--hidden {\n        display: none;\n      }\n      \n      &--halfSpaceTop {\n        margin-top: 16px;\n      }\n    }\n\n    &[x-placement*=\"bottom\"] {\n      ${Arrow} {\n        top: 0;\n        left: 0;\n        margin-top: -0.95em;\n        width: 2em;\n        height: 1em;\n        \n        &::before {\n          border-width: 0 1em 1em 1em;\n          border-color: transparent transparent ${(props) => props.theme.colors.lightGrey1} transparent;\n        }\n      }\n      \n      .MuiTooltip-tooltip--homepage ${Arrow} {\n        margin-top: -10px;\n        ::before {\n          border-width: 0 10px 10px 10px;\n          border-color: transparent transparent ${(props) => props.theme.colors.black16} transparent;\n        }\n      }\n      \n      .MuiTooltip-tooltip--white ${Arrow}::before {\n        border-color: transparent transparent ${(props) => props.theme.colors.white} transparent;\n      }\n    }\n\n    &[x-placement*=\"top\"] {\n      ${Arrow} {\n        bottom: 0;\n        left: 0;\n        margin-bottom: -0.95em;\n        width: 2em;\n        height: 1em;\n  \n        &::before {\n          border-width: 1em 1em 0 1em;\n          border-color: ${(props) => props.theme.colors.lightGrey1} transparent transparent transparent;\n        }\n      }\n      \n      .MuiTooltip-tooltip--homepage ${Arrow} {\n        margin-bottom: -10px;\n        width: 20px;\n        height: 10px;\n        ::before {\n          border-width: 10px 10px 0 10px;\n          position: relative;\n          z-index: 1;\n          border-color: ${(props) => props.theme.colors.black16} transparent transparent transparent;\n        }\n      }\n      \n      .MuiTooltip-tooltip--homepage ${Arrow}::after {\n        content: '';\n        margin: auto;\n        display: block;\n        width: 0;\n        height: 0;\n        border-style: solid;\n        margin-top: -10px;\n        z-index: 0;\n        border-width: 10px 10px 0 10px;\n        border-color: ${(props) => props.theme.colors.primary} transparent transparent transparent;\n      }\n      \n      .MuiTooltip-tooltip--white ${Arrow}::before {\n        border-color: ${(props) => props.theme.colors.white} transparent transparent transparent;\n      }\n    }\n\n    &[x-placement*=\"right\"] {\n      ${Arrow} {\n        left: 0;\n        margin-left: -0.95em;\n        height: 2em;\n        width: 1em;\n  \n        &::before {\n          border-width: 1em 1em 1em 0;\n          border-color: transparent ${(props) => props.theme.colors.lightGrey1} transparent transparent;\n        };\n      }\n      \n      .MuiTooltip-tooltip--white ${Arrow}::before {\n        border-color: transparent ${(props) => props.theme.colors.white} transparent transparent;\n      }\n    };\n\n    &[x-placement*=\"left\"] {\n      ${Arrow} {\n        right: 0;\n        margin-right: -0.95em;\n        height: 2em;\n        width: 1em;\n  \n        &::before {\n          border-width: 1em 0 1em 1em;\n          border-color: transparent transparent transparent ${(props) => props.theme.colors.lightGrey1};\n        };\n      }\n      \n      .MuiTooltip-tooltip--white ${Arrow}::before {\n        border-color: transparent transparent transparent ${(props) => props.theme.colors.white};\n      }\n    };\n  }\n`;\n\nexport default styles;\n","import { css } from 'styled-components';\n\nconst styles = css`\n  .DraftEditor-root {\n    height: 100%;\n    font-size: 20px;\n    font-weight: 500;\n    line-height: 33px;\n    color: ${(props) => props.theme.colors.white};\n  }\n`;\n\nexport default styles;\n","import { css } from 'styled-components';\n\nconst fontFaces = css`\n\n  @font-face {\n    font-family: 'Raleway';\n    src: url('/fonts/Raleway/Raleway-Regular.woff2') format('woff2'),\n        url('/fonts/Raleway/Raleway-Regular.woff') format('woff'),\n        url('/fonts/Raleway/Raleway-Regular.ttf') format('truetype');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n  }\n\n  @font-face {\n    font-family: 'Raleway';\n    src: url('/fonts/Raleway/Raleway-SemiBold.woff2') format('woff2'),\n        url('/fonts/Raleway/Raleway-SemiBold.woff') format('woff'),\n        url('/fonts/Raleway/Raleway-SemiBold.ttf') format('truetype');\n    font-weight: 600;\n    font-style: normal;\n    font-display: swap;\n  }\n\n  @font-face {\n    font-family: 'Raleway';\n    src: url('/fonts/Raleway/Raleway-Bold.woff2') format('woff2'),\n        url('/fonts/Raleway/Raleway-Bold.woff') format('woff'),\n        url('/fonts/Raleway/Raleway-Bold.ttf') format('truetype');\n    font-weight: bold;\n    font-style: normal;\n    font-display: swap;\n  }\n\n  @font-face {\n    font-family: 'Raleway';\n    src: url('/fonts/Raleway/Raleway-Medium.woff2') format('woff2'),\n        url('/fonts/Raleway/Raleway-Medium.woff') format('woff'),\n        url('/fonts/Raleway/Raleway-Medium.ttf') format('truetype');\n    font-weight: 500;\n    font-style: normal;\n    font-display: swap;\n  }\n  \n  @font-face {\n    font-family: 'Inconsolata';\n    src: url('/fonts/Inconsolata/Inconsolata-Regular.woff2') format('woff2'),\n        url('/fonts/Inconsolata/Inconsolata-Regular.woff') format('woff'),\n        url('/fonts/Inconsolata/Inconsolata-Regular.ttf') format('truetype');\n    font-weight: 400;\n    font-style: normal;\n    font-display: swap;\n  }\n\n  @font-face {\n    font-family: 'Inconsolata';\n    src: url('/fonts/Inconsolata/Inconsolata-Bold.woff2') format('woff2'),\n        url('/fonts/Inconsolata/Inconsolata-Bold.woff') format('woff'),\n        url('/fonts/Inconsolata/Inconsolata-Bold.ttf') format('truetype');\n    font-weight: bold;\n    font-style: normal;\n    font-display: swap;\n  }\n`;\n\nexport default fontFaces;\n","import { css } from 'styled-components';\n\nconst reset = css`\n/* ---\n  Basic version:\n  https://meyerweb.com/eric/tools/css/reset/\n--- */\n\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n\n  article, aside, details, figcaption, figure, \n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n\n  body {\n    line-height: 1;\n  }\n\n  ol, ul {\n    list-style: none;\n  }\n\n  blockquote, q {\n    quotes: none;\n  }\n\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n\n/* ---\n  Modifications\n--- */\n\n  /* - HTML support - */\n\n    main {\n      display: block;\n    }\n\n  /* - Hidden attribute - */\n\n    *[hidden] {\n      display: none !important;\n    }\n\n  /* - Reset for SVG and elements of form - */\n\n    svg,\n    input, textarea, button, select {\n      vertical-align: baseline;\n      margin: 0;\n      padding: 0;\n      border: 0;\n      font-family: inherit;\n      font-size: 100%;\n      outline: none;\n    }\n\n    input, textarea, select, button {\n      background: none;\n      border-radius: 0;\n      outline: none;\n      appearance: none;\n    }\n\n    textarea {\n      overflow: auto;\n    }\n\n    button {\n      cursor: pointer;\n    }\n\n    button::-moz-focus-inner {\n      border: 0;\n    }\n\n    select::-ms-expand,\n    input::-ms-clear {\n      display: none;\n    }\n\n  /* - IE11 - */\n\n    template {\n      display: none !important;\n    }\n\n  /* - Fonts on iOS, ignoring font size changes - */\n\n    body {\n      -webkit-font-smoothing: antialiased;\n      -webkit-text-size-adjust: 100%;\n    }\n\n  /* - Links styling - */\n\n  a {\n    color: inherit;\n  }\n\n  a,\n  a:hover,\n  a:focus,\n  *:focus {\n    outline: 0;\n    text-decoration: none;\n  }\n\n  /* - Reset for images - */\n\n  img {\n    border: 0;\n  }\n`;\n\nexport default reset;\n","import { css } from 'styled-components';\n\nconst transitions = css`\n  .fade-enter {\n    opacity: 0;\n  }\n  .fade-enter-active {\n    opacity: 1;\n    transition: opacity 300ms;\n  }\n  .fade-exit {\n    opacity: 1;\n  }\n  .fade-exit-active {\n    opacity: 0;\n    transition: opacity 300ms;\n  }\n`;\n\nexport default transitions;\n","import { createGlobalStyle } from 'styled-components';\nimport slickStyles from './external/slick-carousel';\nimport tooltipStyles from './external/tooltip';\nimport draftjsStyles from './external/draftjs';\n\nimport fontFaces from './fonts';\nimport reset from './reset';\nimport transitions from './transitions';\n\n\nconst GlobalStyle = createGlobalStyle`\n  ${fontFaces}\n  ${reset}\n\n  html {\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  body {\n    font-family: ${(props) => props.theme.fontPrimary};\n    margin: 0;\n    padding: 0;\n    left: 0;\n    right: 0;\n  }\n\n  a {\n    color: inherit;\n  }\n  \n  ::selection {\n    background: ${(props) => props.theme.colors.primaryLight};\n  }\n\n  ${slickStyles}\n  ${tooltipStyles}\n  ${draftjsStyles}\n  ${transitions}\n`;\n\nexport default GlobalStyle;\n","import Hls from 'hls.js';\n\ntype OnManifestParse = () => void;\n\n/**\n * HLS.js wrapper designed to work with react players\n */\nexport default class HlsInstance {\n  mediaEl: HTMLMediaElement | null;\n\n  hls: Hls | null = null;\n\n  onManifestParse: OnManifestParse;\n\n  /**\n   * Class constructor that set up hls instance\n   * @param mediaEl\n   * @param url\n   * @param onManifestParse\n   */\n  constructor(mediaEl: HTMLMediaElement | null, url: string, onManifestParse: OnManifestParse) {\n    this.mediaEl = mediaEl;\n    this.onManifestParse = onManifestParse;\n    this.initializeHls(url);\n    this.setErrorListeners();\n  }\n\n  /**\n   * Initialize hls instance with player url\n   * Choose to go with Hls.js or native hls (ios)\n   * @param url\n   */\n  private initializeHls(url: string) {\n    if (Hls.isSupported()) {\n      this.hls = new Hls({\n        enableWorker: true,\n        maxBufferSize: 10,\n        maxMaxBufferLength: 30,\n      });\n      this.hls.loadSource(url);\n      if (this.mediaEl) {\n        this.hls.attachMedia(this.mediaEl as HTMLVideoElement);\n        this.hls.on(Hls.Events.MANIFEST_PARSED, this.onManifestParse);\n      }\n    } else if (this.mediaEl && this.mediaEl.canPlayType('application/vnd.apple.mpegurl')) {\n      this.mediaEl.src = url;\n      this.mediaEl.addEventListener('loadedmetadata', this.onManifestParse);\n    }\n  }\n\n  private setErrorListeners() {\n    if (!this.hls) {\n      return;\n    }\n\n    this.hls.on(Hls.Events.ERROR, (event, data) => {\n      if (!this.hls) {\n        return;\n      }\n      if (data.fatal) {\n        switch (data.type) {\n          case Hls.ErrorTypes.NETWORK_ERROR:\n            this.hls.startLoad();\n            break;\n          case Hls.ErrorTypes.MEDIA_ERROR:\n            this.hls.recoverMediaError();\n            break;\n          default:\n            this.hls.destroy();\n            break;\n        }\n      }\n    });\n  }\n\n  destroy() {\n    if (!this.hls) {\n      return;\n    }\n\n    this.hls.detachMedia();\n  }\n}\n","/* eslint-disable no-param-reassign */\nexport type Easing = (t: number) => number;\n\n/**\n * Easings used to perform calculations of volume fades\n * @param t\n */\n// eslint-disable-next-line no-plusplus\nexport const easeOutQuart: Easing = (t) => 1 - (--t) * t * t * t;\nexport const easeLinear: Easing = (t) => t;\n","import React from 'react';\nimport Hls from 'hls.js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'app/redux';\nimport { getPlayerInstance } from 'app/redux/modules/players/players.selectors';\nimport { setPlayerIsLoaded, setPlayerPlaying } from 'app/redux/modules/players';\nimport { setShowSoundsLockedModal as setShowSoundsLockedModalAction } from 'app/redux/modules/base';\nimport { SetPlayerIsLoadedPayload, SetPlayerPlayingPayload } from 'app/redux/modules/players/players.interfaces';\nimport { getUsers } from 'app/redux/modules/users';\nimport Player from './Player';\nimport { SetShowSoundsLockedModalPayload } from '../../../../redux/modules/base/base.interfaces';\n\ninterface Props {\n  id: string;\n}\n\nenum SupportLevel {\n  HLS,\n  HLS_NATIVE,\n  NO_SUPPORT,\n}\n\nconst PlayerContainer: React.FC<Props> = ({ id }) => {\n  const [supportLevel, setSupportLevel] = React.useState<SupportLevel>(SupportLevel.NO_SUPPORT);\n\n  // Redux connect setup\n  const dispatch = useDispatch();\n  const playerInstance = useSelector((state: RootState) => getPlayerInstance(state, { id }));\n  const masterController = useSelector((state: RootState) => state.players.masterController);\n  const { user } = useSelector(getUsers);\n  const setIsLoaded = (payload: SetPlayerIsLoadedPayload) => dispatch(setPlayerIsLoaded(payload));\n  const setPlaying = (payload: SetPlayerPlayingPayload) => dispatch(setPlayerPlaying(payload));\n  const setShowSoundsLockedModal = (payload: SetShowSoundsLockedModalPayload) => dispatch(\n    setShowSoundsLockedModalAction(payload),\n  );\n\n  // Check hls support\n  React.useEffect(() => {\n    const video = document.createElement('video');\n    if (Hls.isSupported()) {\n      setSupportLevel(SupportLevel.HLS);\n    } else if (video.canPlayType('application/vnd.apple.mpegurl')) {\n      setSupportLevel(SupportLevel.HLS_NATIVE);\n    } else {\n      setSupportLevel(SupportLevel.NO_SUPPORT);\n    }\n  }, []);\n\n  if (!playerInstance || supportLevel === SupportLevel.NO_SUPPORT) {\n    return <></>;\n  }\n\n  // with native hls, we need to use audio instead of video, else we need to use video\n  if (supportLevel === SupportLevel.HLS || supportLevel === SupportLevel.HLS_NATIVE) {\n    return (\n      <Player\n        id={id}\n        playerInstance={playerInstance}\n        masterController={masterController}\n        setIsLoaded={setIsLoaded}\n        setPlaying={setPlaying}\n        setShowSoundsLockedModal={setShowSoundsLockedModal}\n        user={user}\n        useAudio={supportLevel === SupportLevel.HLS_NATIVE}\n      />\n    );\n  }\n\n  return <></>;\n};\n\nexport default PlayerContainer;\n","/* eslint-disable no-param-reassign */\nimport React, { PureComponent } from 'react';\n// eslint-disable-next-line import/no-webpack-loader-syntax, import/no-duplicates\nimport TickWorker from 'worker-loader?name=static/[hash].worker.js!../../../../WebWorkers/tick.worker';\n// eslint-disable-next-line import/no-duplicates\n\nimport { AccountType } from '@noisli/common';\nimport HlsInstance from './HlsInstance';\nimport { PlayerCommonProps, PlayerCommonState, VolumeTransitionParams } from './Player.interface';\nimport { easeLinear, easeOutQuart } from './Easings';\n\ninterface State extends PlayerCommonState {\n  isSwappingInstances: boolean;\n  isVolumeTransitioning: boolean;\n  isMuted: boolean;\n  isOffline: boolean;\n  shouldReloadWhenOnline: boolean;\n  offlineTimeoutId: number;\n}\n\ninterface PlayerInterface {\n  mediaEl: HTMLMediaElement | null;\n  mediaElPrimary: HTMLMediaElement | null;\n  mediaElSecondary: HTMLMediaElement | null;\n  hlsInstance: HlsInstance | null;\n  hlsInstancePrimary: HlsInstance | null;\n  hlsInstanceSecondary: HlsInstance | null;\n  volumeFadeDuration: {\n    fadeIn: number;\n    fadeOut: number;\n    crossFade: number;\n  };\n}\n\ntype Props = PlayerCommonProps & {\n  useAudio: boolean;\n}\n\n/**\n * Core Player component\n * It is designed with react class component to make change flow more controllable\n */\nclass PlayerComponent extends PureComponent<Props, State> implements PlayerInterface {\n  // Active media element\n  mediaEl: HTMLMediaElement | null = null;\n  // First media element\n  mediaElPrimary: HTMLMediaElement | null = null;\n  // Second media element, used to perform seamless transition\n  mediaElSecondary: HTMLMediaElement | null = null;\n  // Active hls instance\n  hlsInstance: HlsInstance | null = null;\n  // HLS Instance of first player\n  hlsInstancePrimary: HlsInstance | null = null;\n  // HLS Instance of second player\n  hlsInstanceSecondary: HlsInstance | null = null;\n\n  // Fade durations config\n  volumeFadeDuration = {\n    fadeIn: 800,\n    fadeOut: 300,\n    crossFade: 2000,\n  };\n\n  // Time (in ms) after which the player should be stopped when being offline\n  offlineMuteTimeout = 25000;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isSwappingInstances: false,\n      volumeTransitionId: 0,\n      isVolumeTransitioning: false,\n      isMuted: false,\n      isOffline: false,\n      shouldReloadWhenOnline: false,\n      offlineTimeoutId: 0,\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const newState: Partial<State> = {};\n\n    // If user mutes/unmutes sounds, lock volume changes and change muted state\n    if (nextProps.masterController.isMuted !== prevState.isMuted) {\n      newState.isVolumeTransitioning = true;\n      newState.isMuted = nextProps.masterController.isMuted;\n      return newState;\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    this.init();\n    this.setNativeEventListeners();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      playerInstance, masterController, user, setShowSoundsLockedModal,\n    } = this.props;\n\n    // If user is free and the pro sound would be played\n    if (playerInstance.isPlaying && playerInstance.pro\n      && user && user.accountType === AccountType.FREE\n    ) {\n      setShowSoundsLockedModal({\n        showSoundsLockedModal: true,\n      });\n      return null;\n    }\n\n    // If player was not playing, but is set to play\n    if (playerInstance.isPlaying && !prevProps.playerInstance.isPlaying) {\n      return this.setPlayerPlay(true);\n    }\n\n    // If player was playing, but is set to no play\n    if (!playerInstance.isPlaying && prevProps.playerInstance.isPlaying) {\n      return this.setPlayerPlay(false);\n    }\n\n    // if user unmutes sounds\n    if (\n      masterController.isMuted !== prevProps.masterController.isMuted\n      && masterController.isMuted === false\n    ) {\n      return this.setVolume(playerInstance.isPlaying, false, true);\n    }\n\n    // if user mutes sounds\n    if (\n      masterController.isMuted !== prevProps.masterController.isMuted\n      && masterController.isMuted === true\n    ) {\n      return this.setVolume(false, false, true, true);\n    }\n\n    // if volume is changed\n    if (\n      playerInstance.volume !== prevProps.playerInstance.volume\n      || masterController.volume !== prevProps.masterController.volume\n    ) {\n      return this.setVolume(playerInstance.isPlaying, true);\n    }\n\n    return null;\n  }\n\n  /**\n   * Make sure the volume is in range of [0, 1]\n   * @param volume\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getNormalizedVolume(volume: number) {\n    return Math.max(0, Math.min(volume, 1));\n  }\n\n  /**\n   * Set event listeners for online and offline state changes\n   */\n  setNativeEventListeners() {\n    window.addEventListener('online', () => {\n      const { playerInstance } = this.props;\n      const { shouldReloadWhenOnline, offlineTimeoutId } = this.state;\n\n      // remove offline timeout to prevent sound stop\n      if (offlineTimeoutId) {\n        clearTimeout(offlineTimeoutId);\n      }\n\n      // change state of isOffline\n      this.setState({\n        isOffline: false,\n      }, () => {\n        // if player was stopped but was playing before, reset it and start playing\n        if (shouldReloadWhenOnline && playerInstance.isPlaying) {\n          if (this.hlsInstance && this.hlsInstance.mediaEl\n            && this.hlsInstance.mediaEl.currentTime === 0\n          ) {\n            this.setState({\n              isSwappingInstances: false,\n            });\n            if (this.hlsInstancePrimary) this.hlsInstancePrimary.destroy();\n            if (this.hlsInstanceSecondary) this.hlsInstanceSecondary.destroy();\n            this.init();\n            this.setPlayerPlay(true);\n            this.setState({\n              shouldReloadWhenOnline: false,\n            });\n          }\n        }\n      });\n    });\n\n    window.addEventListener('offline', () => {\n      const { playerInstance } = this.props;\n\n      // set timeout to stop player when being offline\n      const offlineTimeoutId = setTimeout(() => this.setPlayerPlay(false), this.offlineMuteTimeout);\n\n      // set state to recover when going online\n      this.setState({\n        shouldReloadWhenOnline: playerInstance.isPlaying,\n        isOffline: true,\n        offlineTimeoutId,\n      });\n    });\n  }\n\n  /**\n   * Method that runs player on/off\n   * @param play\n   */\n  setPlayerPlay(play: boolean) {\n    const { isSwappingInstances, isOffline } = this.state;\n\n    // If we don't have hls initialized, return\n    if (!this.hlsInstance || !this.hlsInstance.mediaEl) {\n      return;\n    }\n\n    if (play) {\n      // if we are offline, but request the play, schedule it to play when we goes online\n      if (isOffline) {\n        this.setState({\n          shouldReloadWhenOnline: true,\n        });\n        return;\n      }\n\n      // Set the volume to 0 and start playing from main instance\n      this.hlsInstance.mediaEl.volume = 0;\n      const playPromise = this.hlsInstance.mediaEl.play();\n\n      if (this.mediaElSecondary) {\n        try {\n          this.mediaElSecondary.play();\n          // eslint-disable-next-line no-empty\n        } catch (e) {}\n      }\n\n      // IE11 fix play no promise\n      if (playPromise === undefined) {\n        this.setVolume(play);\n      } else {\n        playPromise.then(() => {\n          // after play is resolved, set volume to value from props with easing\n          this.setVolume(play);\n        });\n      }\n    } else {\n      // if we stop player, check if we are at the middle of crossfade and terminate it\n      if (isSwappingInstances) {\n        this.terminateSwappingInstances();\n        return;\n      }\n\n      // perform fade out (set volume to 0)\n      this.setVolume(play).then(() => {\n        // then reset the player\n        if (this.hlsInstance && this.hlsInstance.mediaEl) {\n          this.hlsInstance.mediaEl.pause();\n          this.hlsInstance.mediaEl.currentTime = 0;\n        }\n      });\n    }\n  }\n\n  /**\n   * Method that is setting the volume to set value\n   * @param isPlaying\n   * @param instant\n   * @param muteTransition\n   * @param isMutedSet\n   * @returns {Promise<void>}\n   */\n  setVolume(\n    isPlaying: boolean, instant = false,\n    muteTransition = false, isMutedSet = false,\n  ): Promise<void> {\n    const { playerInstance, masterController } = this.props;\n    const {\n      isSwappingInstances, isVolumeTransitioning, isMuted, shouldReloadWhenOnline,\n    } = this.state;\n    // we take the player volume (slider on page) and mulitply it with master volume (switch on top)\n    const targetVolume = playerInstance.volume * masterController.volume;\n\n    // if hls is not initialized, reject\n    if (!this.hlsInstance || !this.hlsInstance.mediaEl) {\n      return Promise.reject();\n    }\n\n    // if we are swapping instances or we are muted, simply resolve\n    if (\n      (isSwappingInstances && !shouldReloadWhenOnline)\n      || (isMuted && !muteTransition)\n    ) {\n      return Promise.resolve();\n    }\n\n    // if change should be instant, eg. we are moving the volume slider\n    if (instant) {\n      // if we are doing volume transition or we are muted, simply resovle\n      if (isVolumeTransitioning || isMuted || masterController.isMuted) {\n        return Promise.resolve();\n      }\n      // set volume instantly\n      this.hlsInstance.mediaEl.volume = this.getNormalizedVolume(targetVolume);\n      return Promise.resolve();\n    }\n\n    // if we are at the middle of shuffle transition\n    if (playerInstance.isShuffling && !muteTransition) {\n      return Promise.resolve();\n    }\n\n    // if player is not playing\n    if (!playerInstance.isPlaying && muteTransition) {\n      return Promise.resolve();\n    }\n\n    // if we are stopping the player or muting it (setting volume to 0), do fade out\n    if (!isPlaying || playerInstance.volume === 0 || masterController.volume === 0) {\n      return this.volumeFadeOut(isMutedSet);\n    }\n\n    // do fade in\n    return this.volumeFadeIn(isMutedSet);\n  }\n\n  /**\n   * Method to run volume transition with fade out setting\n   * @param muteTransition\n   * @returns {Promise<never>}\n   */\n  volumeFadeOut(muteTransition = false): Promise<void> {\n    return this.volumeTransition(\n      this.volumeFadeDuration.fadeOut, 0, 1, {\n        muteTransition,\n      },\n    );\n  }\n\n  /**\n   * Method to run volume transition with fade in setting\n   * @param muteTransition\n   * @returns {Promise<never>}\n   */\n  volumeFadeIn(muteTransition = false): Promise<void> {\n    return this.volumeTransition(\n      this.volumeFadeDuration.fadeIn, 1, 0, {\n        muteTransition,\n      },\n    );\n  }\n\n  /**\n   * Volume transition method - \"The meat of our player\"\n   * first 3 params are required\n   * @param duration - duration of transition in ms\n   * @param targetVolume - volume to which we are transitioning\n   * @param startVolume - volume from which we are transitioning\n   * @param mediaEl - chosen media element (by default we use active instance)\n   * @param easing - easing function (default linear ease)\n   * @param timeout - time in ms to wait until running the transition\n   * @param worker - if set, we are using worker to handle time scheduling\n   * @param muteTransition - flag to determine if we are doing the mute transition\n   * @returns {Promise<never> | Promise<void>}\n   */\n  volumeTransition(\n    duration: number,\n    targetVolume: number,\n    startVolume: number,\n    {\n      mediaEl = this.hlsInstance ? this.hlsInstance.mediaEl : null,\n      easing = easeLinear,\n      timeout = 0,\n      worker = null,\n      muteTransition = false,\n    }: Partial<VolumeTransitionParams>,\n  ) {\n    // 60 fps interval\n    const INTERVAL = 1000 / 60;\n    const { masterController, playerInstance } = this.props;\n    const { isSwappingInstances, volumeTransitionId } = this.state;\n\n    let masterControllerVolume = masterController.volume;\n    // if master controller is muted, we are referencing the last volume it has set\n    if (masterController.isMuted) {\n      masterControllerVolume = masterController.lastVolume;\n    }\n\n    // without element, we cant transition volume\n    if (!mediaEl) {\n      return Promise.reject();\n    }\n\n    // if there is ongoing transition, we need to clear it, one exception is when we are swapping instances\n    if (volumeTransitionId && !isSwappingInstances) {\n      clearInterval(volumeTransitionId);\n    }\n\n    // get delta of transition\n    const delta = targetVolume - startVolume;\n\n    // if delta is 0 or duration is 0, set volume instantly\n    if (!delta || !duration) {\n      mediaEl.volume = this.getNormalizedVolume(\n        targetVolume * playerInstance.volume * masterControllerVolume,\n      );\n      return Promise.resolve();\n    }\n\n    // calculate ticks (number of iterations we perform in transition)\n    const ticks = Math.floor(duration / INTERVAL);\n\n    // return promise which runs fader\n    return new Promise<void>((resolve, reject) => {\n      let tick = 1;\n      let volume = startVolume;\n\n      // fading function, we can pass terminator function, if we need to stop transition in the middle of run\n      const step = (terminate: () => void) => {\n        // eslint-disable-next-line no-shadow\n        const { masterController } = this.props;\n\n        masterControllerVolume = masterController.volume;\n        if (muteTransition) {\n          masterControllerVolume = masterController.lastVolume;\n        }\n        const volumeModifier = playerInstance.volume * masterControllerVolume;\n\n        if (!mediaEl) {\n          reject();\n          return;\n        }\n\n        // if we are transitioning volume down, we need to take start volume into account\n        if (delta < 0) {\n          volume = (startVolume + easing(tick / ticks) * delta) * volumeModifier;\n        } else {\n          // run this if we are transitionig up\n          volume = easing(tick / ticks) * delta * volumeModifier;\n        }\n\n        // set volume to media element\n        mediaEl.volume = this.getNormalizedVolume(volume);\n        tick += 1;\n\n        // if tick reached ticks count (we are at last iteration)\n        if (tick === ticks) {\n          // set target volume to element\n          mediaEl.volume = this.getNormalizedVolume(targetVolume * volumeModifier);\n          // notify that we finish transitioning\n          this.setState({\n            isVolumeTransitioning: false,\n          });\n          // end transition and resolve promise\n          terminate();\n          resolve();\n        }\n      };\n\n      // if we are using worker, use worker setup\n      if (worker) {\n        // set worker function to run on each tick\n        worker.onmessage = () => {\n          // if we have first tick, set interval on worker\n          if (tick === 1) {\n            worker.postMessage({\n              command: 'start_interval',\n              payload: {\n                interval: INTERVAL,\n              },\n            });\n          }\n\n          // run step function\n          step(() => {\n            worker.postMessage({\n              command: 'stop',\n            });\n            worker.terminate();\n          });\n        };\n\n        // run worker with timeout specified\n        worker.postMessage({\n          command: 'start_timeout',\n          payload: {\n            timeout,\n          },\n        });\n      } else {\n        // use timeout and interval to run the fader\n        setTimeout(() => {\n          const transitionId: number = setInterval(() => {\n            step(() => clearInterval(transitionId));\n          }, INTERVAL);\n          // notify that we are transitioning\n          this.setState({\n            volumeTransitionId: transitionId,\n            isVolumeTransitioning: true,\n          });\n        }, timeout);\n      }\n    });\n  }\n\n  init() {\n    this.initializeHls();\n    this.hlsInstance = this.hlsInstancePrimary;\n  }\n\n  initializeHls() {\n    const { id, playerInstance, setIsLoaded } = this.props;\n    const { url } = playerInstance;\n\n    // notify store that player is ready\n    const onManifestParse = () => {\n      setIsLoaded({\n        id,\n        isLoaded: true,\n      });\n    };\n\n    this.hlsInstancePrimary = new HlsInstance(this.mediaElPrimary, url, onManifestParse);\n    this.addVideoEventListeners(this.hlsInstancePrimary);\n  }\n\n  /**\n   * Method to set event listener to start crossfade transition\n   * @param hlsInstance\n   */\n  addVideoEventListeners(hlsInstance: HlsInstance) {\n    if (hlsInstance.mediaEl) {\n      hlsInstance.mediaEl.addEventListener('timeupdate', () => this.timeUpdateHandler(hlsInstance));\n    }\n  }\n\n  /**\n   * cleanup crossfade tracker\n   * @param hlsInstance\n   */\n  removeVideoEventListeners(hlsInstance: HlsInstance) {\n    if (hlsInstance.mediaEl) {\n      hlsInstance.mediaEl.removeEventListener('timeupdate', () => this.timeUpdateHandler(hlsInstance));\n    }\n  }\n\n  /**\n   * handler to spy on timeupdate of video and start crossfade (swap instance)\n   * @param hlsInstance\n   */\n  timeUpdateHandler(hlsInstance: HlsInstance) {\n    const { masterController } = this.props;\n    const DURATION_TOLERANCE = masterController.crossFadeInStartTime;\n    const { isSwappingInstances } = this.state;\n    // if currentTIme reached duration - tolerance and we are not swapping the instance\n    if (\n      hlsInstance.mediaEl\n      && hlsInstance.mediaEl.currentTime > hlsInstance.mediaEl.duration - DURATION_TOLERANCE\n      && !isSwappingInstances\n    ) {\n      this.swapInstances();\n    }\n  }\n\n  /**\n   * Method that starts the swap instance\n   */\n  swapInstances() {\n    const { playerInstance } = this.props;\n    const { url } = playerInstance;\n\n    // notify that we are swapping instances\n    this.setState({\n      isSwappingInstances: true,\n    });\n\n    // choose replacement instance by selecting the inactive one\n    let instanceReplacement: HlsInstance | null = null;\n\n    if (this.hlsInstance === this.hlsInstancePrimary) {\n      this.hlsInstanceSecondary = new HlsInstance(this.mediaElSecondary, url, () => {});\n      this.addVideoEventListeners(this.hlsInstanceSecondary);\n      instanceReplacement = this.hlsInstanceSecondary;\n    } else if (this.hlsInstance === this.hlsInstanceSecondary) {\n      this.hlsInstancePrimary = new HlsInstance(this.mediaElPrimary, url, () => {});\n      this.addVideoEventListeners(this.hlsInstancePrimary);\n      instanceReplacement = this.hlsInstancePrimary;\n    }\n\n    // if instance repalcement is ready to use\n    if (instanceReplacement && instanceReplacement.mediaEl) {\n      // set fader workers (crossfade is heavier to perform than fade)\n      const fadeOutWorker = new TickWorker();\n      const fadeInWorker = new TickWorker();\n\n      // function to perform crossfade and reset the state\n      const swapVideos = async () => {\n        const { masterController } = this.props;\n        // if we dont have replacement or main instance, do nothing\n        if (!instanceReplacement\n          || !instanceReplacement.mediaEl\n          || !this.hlsInstance\n          || !this.hlsInstance.mediaEl\n        ) {\n          return;\n        }\n        // first start instance replacement fade in\n        this.volumeTransition(\n          masterController.crossFadeInDuration, 1, 0, {\n            mediaEl: instanceReplacement.mediaEl,\n            easing: easeOutQuart,\n            timeout: masterController.crossFadeInDelay,\n            worker: fadeOutWorker,\n          },\n        );\n        // and simultanously run the fade out\n        this.volumeTransition(\n          masterController.crossFadeOutDuration, 0, 1, {\n            mediaEl: this.hlsInstance.mediaEl,\n            easing: easeOutQuart,\n            timeout: masterController.crossFadeOutStartTime,\n            worker: fadeInWorker,\n          },\n        ).then(() => {\n          // clear state after crossfade\n          if (this.hlsInstance && this.hlsInstance.mediaEl) {\n            this.hlsInstance.mediaEl.pause();\n            this.hlsInstance.mediaEl.currentTime = 0;\n            if (\n              instanceReplacement && instanceReplacement.mediaEl && instanceReplacement.mediaEl.src\n              && this.hlsInstance !== instanceReplacement\n            ) {\n              this.hlsInstance.destroy();\n              this.removeVideoEventListeners(this.hlsInstance);\n              this.hlsInstance = instanceReplacement;\n            }\n            this.setState({\n              isSwappingInstances: false,\n            });\n          }\n        });\n      };\n\n      // prepare the instance replacement by putting the volume to 0 and start playing\n      instanceReplacement.mediaEl.volume = 0;\n      const playPromise = instanceReplacement.mediaEl.play();\n      // then perform swap\n      if (playPromise === undefined) {\n        swapVideos();\n      } else {\n        playPromise.then(swapVideos);\n      }\n    } else {\n      // if we do not have instance replacement, end swapping and rely on video loop\n      this.setState({\n        isSwappingInstances: false,\n      });\n    }\n  }\n\n  /**\n   * If we are at the middle of crossfade, we need to fade out both instances\n   * then we need to reset one instance and assign it to main instance\n   */\n  terminateSwappingInstances() {\n    if (this.hlsInstancePrimary) {\n      this.volumeTransition(\n        this.volumeFadeDuration.fadeOut, 0, 1, {\n          mediaEl: this.hlsInstancePrimary.mediaEl,\n        },\n      ).then(() => {\n        if (this.hlsInstancePrimary && this.hlsInstancePrimary.mediaEl) {\n          this.hlsInstancePrimary.mediaEl.pause();\n          this.hlsInstancePrimary.mediaEl.currentTime = 0;\n          this.hlsInstance = this.hlsInstancePrimary;\n        }\n      });\n    }\n    if (this.hlsInstanceSecondary) {\n      this.volumeTransition(\n        this.volumeFadeDuration.fadeOut, 0, 1, {\n          mediaEl: this.hlsInstanceSecondary.mediaEl,\n        },\n      ).then(() => {\n        if (this.hlsInstanceSecondary && this.hlsInstanceSecondary.mediaEl) {\n          this.hlsInstanceSecondary.mediaEl.pause();\n          this.hlsInstanceSecondary.mediaEl.currentTime = 0;\n          this.hlsInstanceSecondary.destroy();\n          this.removeVideoEventListeners(this.hlsInstanceSecondary);\n        }\n      });\n    }\n  }\n\n  render() {\n    const { id, useAudio } = this.props;\n\n    const hiddenStyle: React.CSSProperties = {\n      width: 0,\n      height: 0,\n      visibility: 'hidden',\n    };\n\n    return (\n      <div\n        id={id}\n        style={hiddenStyle}\n      >\n        { useAudio ? (\n          <>\n            <audio\n              ref={(el) => { this.mediaElPrimary = el; }}\n              style={hiddenStyle}\n            />\n            <audio\n              ref={(el) => { this.mediaElSecondary = el; }}\n              style={hiddenStyle}\n            />\n          </>\n        ) : (\n          <>\n            <video\n              ref={(el) => { this.mediaElPrimary = el; }}\n              playsInline\n              style={hiddenStyle}\n            />\n            <video\n              ref={(el) => { this.mediaElSecondary = el; }}\n              playsInline\n              style={hiddenStyle}\n            />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PlayerComponent;\n","import React from 'react';\nimport {connect, useDispatch, useSelector} from 'react-redux';\nimport useEventListener from '@use-it/event-listener';\nimport throttle from 'lodash/throttle';\n\nimport { RootState } from 'app/redux';\nimport { setMasterPlayerIsMutedThunk } from 'app/redux/modules/players/players.thunks';\nimport {\n  MasterController,\n  Player,\n  SetMasterPlayerMutedPayload,\n} from 'app/redux/modules/players/players.interfaces';\nimport PlayerContainer from 'app/components/_Core/Player/Player/PlayerContainer';\nimport { setUseHomepagePlayers } from 'app/redux/modules/players';\nimport {isIOS, isIpadOS} from \"../../../../utils/mobileDetect\";\nimport { getPlayersAreLoaded } from 'app/redux/modules/players/players.selectors';\n\ninterface PlayerMasterControllerReduxProps {\n  players: Player[];\n  masterController: MasterController;\n  setMasterPlayerIsMuted: (payload: SetMasterPlayerMutedPayload) => void;\n}\n\ninterface Props {\n  useHomepage?: boolean;\n}\n\nconst PlayerMasterController: React.FC<Props & PlayerMasterControllerReduxProps> = ({\n  players, masterController, setMasterPlayerIsMuted, useHomepage,\n}) => {\n  const dispatch = useDispatch();\n  const playersLoaded = useSelector(getPlayersAreLoaded);\n\n  // Check wheater we are at the /index or on internal pages\n  React.useEffect(() => {\n    dispatch(setUseHomepagePlayers({\n      useHomepage: !!useHomepage,\n    }));\n  }, [useHomepage]);\n\n  // Mute sounds directly in audio elements for ios\n  React.useEffect(() => {\n    if (isIOS() || isIpadOS()) {\n      players.forEach(player => {\n        const playerContainer = document.getElementById(player.id);\n        if (!playerContainer) return;\n        const audioEls = playerContainer.querySelectorAll<HTMLAudioElement>('audio');\n        Array.from(audioEls).forEach(audioEl => {\n          audioEl.muted = masterController.isMuted;\n        });\n      });\n    }\n  }, [masterController.isMuted, playersLoaded]);\n\n  // throttle the user space click interaction\n  const handleSpaceClickThrottled = React.useMemo(() => throttle((isMuted: boolean) => {\n    setMasterPlayerIsMuted({\n      isMuted,\n    });\n  }, 100, { leading: true }), []);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const handleSpaceClick = (e: any) => {\n    if (e.target && (e.target.tagName.toUpperCase() === 'INPUT' || e.target.tagName.toUpperCase() === 'TEXTAREA')) {\n      return;\n    }\n    if (e.code === 'Space' || e.keyCode === 32) {\n      e.preventDefault();\n      handleSpaceClickThrottled(!masterController.isMuted);\n    }\n  };\n\n  useEventListener('keydown', handleSpaceClick);\n\n  return (\n    <div>\n      { players.map((player) => (\n        <PlayerContainer key={player.id} id={player.id} />\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState, ownProps: Props) => ({\n  players: ownProps.useHomepage ? state.players.playersHomepage : state.players.players,\n  masterController: state.players.masterController,\n});\n\nconst mapDispatchToProps = {\n  setMasterPlayerIsMuted: setMasterPlayerIsMutedThunk,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PlayerMasterController);\n","import styled, {\n  css, CSSObject, SimpleInterpolation, FlattenSimpleInterpolation,\n} from 'styled-components';\n\nexport enum Breakpoint {\n  SMALL = 'SMALL',\n  MEDIUM = 'MEDIUM',\n  LARGE = 'LARGE',\n\n  AUTH_LARGE = 'AUTH_LARGE',\n  AUTH_MEDIUM = 'AUTH_MEDIUM',\n\n  PAGES_LARGE = 'PAGES_LARGE',\n}\n\ntype RWDFunction = (\n  arg: CSSObject | TemplateStringsArray, ...interpolations: SimpleInterpolation[]\n) => FlattenSimpleInterpolation;\n\nexport interface RWDObject {\n  [Breakpoint.SMALL]: RWDFunction;\n  [Breakpoint.MEDIUM]: RWDFunction;\n  [Breakpoint.LARGE]: RWDFunction;\n\n  [Breakpoint.AUTH_LARGE]: RWDFunction;\n  [Breakpoint.AUTH_MEDIUM]: RWDFunction;\n\n  [Breakpoint.PAGES_LARGE]: RWDFunction;\n}\n\nconst sizes = {\n  [Breakpoint.SMALL]: '576px',\n  [Breakpoint.MEDIUM]: '768px',\n  [Breakpoint.LARGE]: '992px',\n\n  [Breakpoint.AUTH_MEDIUM]: '1024px',\n  [Breakpoint.AUTH_LARGE]: '1200px',\n\n  [Breakpoint.PAGES_LARGE]: '1200px',\n};\n\n/**\n * Helper rwd object to handler media breakpoints in styled components\n * @example\n * styled.div`\n *  width: 100%;\n *\n *  ${rwd[Breakpoint.MEDIUM]}`\n *    width: 50%;\n *  `\n * `\n * @type {RWDObject}\n */\nconst rwd = Object.keys(sizes).reduce<RWDObject>((acc, label) => {\n  acc[(label as Breakpoint)] = (...args) => css`\n    @media (min-width: ${sizes[(label as Breakpoint)]}) {\n      ${css(...args)}\n    }\n  `;\n\n  return acc;\n}, ({} as RWDObject));\n\ninterface DisplayOnBreakpointProps {\n  down?: boolean;\n  up?: boolean;\n  breakpoint: Breakpoint;\n}\n\nexport const DisplayOnBreakpoint = styled.div<DisplayOnBreakpointProps>`\n  ${(props) => props.down && css`\n    display: block;\n\n    ${rwd[props.breakpoint]`\n      display: none;\n    `}\n  `}\n\n  ${(props) => props.up && css`\n    display: none;\n\n    ${rwd[props.breakpoint]`\n      display: block;\n    `}\n  `}\n`;\n\nexport default rwd;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar UserSocketEvent;\n(function (UserSocketEvent) {\n    UserSocketEvent[\"START_PLAYING\"] = \"user/start-playing\";\n    UserSocketEvent[\"CONFIRM_TIME\"] = \"user/confirm-time\";\n    UserSocketEvent[\"LIMIT_REACHED\"] = \"user/limit-reached\";\n    UserSocketEvent[\"STOP_PLAYING\"] = \"user/stop-playing\";\n    UserSocketEvent[\"CHECK_LIMIT\"] = \"user/check-limit\";\n    UserSocketEvent[\"LIMIT_REACHED_CHECK\"] = \"user/check-limit-reached\";\n    UserSocketEvent[\"RELOAD_SESSION\"] = \"user/reload-session\";\n    UserSocketEvent[\"TERMINATE_SESSION\"] = \"user/terminate-session\";\n    UserSocketEvent[\"JOIN_ROOM\"] = \"user/joinUserRoom\";\n    UserSocketEvent[\"DISCONNECT_ROOM\"] = \"user/disconnectUserRoom\";\n    UserSocketEvent[\"UPDATE_USER_DETAILS\"] = \"user/updateUserDetails\";\n})(UserSocketEvent = exports.UserSocketEvent || (exports.UserSocketEvent = {}));\n//# sourceMappingURL=UserSocketEvent.enum.js.map","import React from 'react';\n\nimport airplane from './airplane.svg';\nimport bonfire from './bonfire.svg';\nimport brownnoise from './brownnoise.svg';\nimport bubbles from './bubbles.svg';\nimport cicadas from './cicadas.svg';\nimport cityscape from './cityscape.svg';\nimport coffeeshop from './coffeeshop.svg';\nimport fan from './fan.svg';\nimport fire from './fire.svg';\nimport fireplace from './fireplace.svg';\nimport forest from './forest.svg';\nimport leaves from './leaves.svg';\nimport oceanwaves from './oceanwaves.svg';\nimport office from './office.svg';\nimport pinknoise from './pinknoise.svg';\nimport rain from './rain.svg';\nimport rainontent from './rainontent.svg';\nimport seaside from './seaside.svg';\nimport spaceengine from './spaceengine.svg';\nimport summernight from './summernight.svg';\nimport thunderstorm from './thunderstorm.svg';\nimport train from './train.svg';\nimport tropicalforest from './tropicalforest.svg';\nimport underwater from './underwater.svg';\nimport washingmachine from './washingmachine.svg';\nimport water from './water.svg';\nimport waterfall from './waterfall.svg';\nimport waterstream from './waterstream.svg';\nimport whitenoise from './whitenoise.svg';\nimport wind from './wind.svg';\nimport windintrees from './windintrees.svg';\n\nexport const Icons = {\n  airplane,\n  bonfire,\n  brownnoise,\n  bubbles,\n  cicadas,\n  cityscape,\n  coffeeshop,\n  fan,\n  fire,\n  fireplace,\n  forest,\n  leaves,\n  oceanwaves,\n  office,\n  pinknoise,\n  rain,\n  rainontent,\n  seaside,\n  spaceengine,\n  summernight,\n  thunderstorm,\n  train,\n  tropicalforest,\n  underwater,\n  washingmachine,\n  water,\n  waterfall,\n  waterstream,\n  whitenoise,\n  wind,\n  windintrees,\n};\n\ninterface Props {\n  id: string;\n}\n\nconst PlayerIcon: React.FC<Props> = ({ id }) => {\n  if (Object.keys(Icons).some((key) => key === id)) {\n    const Icon = Icons[(id as keyof typeof Icons)];\n    return <Icon />;\n  }\n\n  const Icon = Icons.seaside;\n  return <Icon />;\n};\n\nexport default PlayerIcon;\n","import { BaseState } from './base.interfaces';\n\nconst state: BaseState = {\n  isMobile: false,\n  showHomepageModal: false,\n  playerPage: 'playlists',\n\n  sharedComboIsLoading: false,\n  sharedCombo: undefined,\n\n  showSoundsLockedModal: false,\n  showUpgradeModal: false,\n\n  showShareModal: false,\n  showSharePlayModal: false,\n\n  baseTitle: '',\n};\n\nexport default state;\n","import { createSlice } from 'redux-starter-kit';\nimport state from './base.state';\nimport {\n  setIsMobileReducer,\n  setShowHomepageModalReducer,\n  setPlayerPageReducer,\n  setSharedComboReducer,\n  setSharedComboIsLoadingReducer,\n  setShowSoundsLockedModalReducer,\n  setShowUpgradeModalReducer,\n  setShowShareModalReducer,\n  setShowSharePlayModalReducer,\n  setBaseTitleReducer,\n  closeAllModalsReducer,\n} from './base.reducers';\n\nconst baseSlice = createSlice({\n  slice: 'base',\n\n  initialState: state,\n\n  reducers: {\n    setIsMobile: setIsMobileReducer,\n    setShowHomepageModal: setShowHomepageModalReducer,\n    setPlayerPage: setPlayerPageReducer,\n    setSharedCombo: setSharedComboReducer,\n    setSharedComboIsLoading: setSharedComboIsLoadingReducer,\n    setShowSoundsLockedModal: setShowSoundsLockedModalReducer,\n    setShowUpgradeModal: setShowUpgradeModalReducer,\n    setShowShareModal: setShowShareModalReducer,\n    setShowSharePlayModal: setShowSharePlayModalReducer,\n    setBaseTitle: setBaseTitleReducer,\n    closeAllModals: closeAllModalsReducer,\n  },\n});\n// Extract the action creators object and the reducer\nconst { actions, reducer, selectors } = baseSlice;\n// Extract and export each action creator by name\nexport const {\n  setIsMobile,\n  setShowHomepageModal,\n  setPlayerPage,\n  setSharedCombo,\n  setSharedComboIsLoading,\n  setShowSoundsLockedModal,\n  setShowUpgradeModal,\n  setShowShareModal,\n  setShowSharePlayModal,\n  setBaseTitle,\n  closeAllModals,\n} = actions;\n\nexport const { getBase } = selectors;\n// Export the reducer, either as a default or named export\nexport default reducer;\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from 'redux-starter-kit';\nimport {\n  BaseState,\n  SetIsMobilePayload,\n  SetShowHomepageModalPayload,\n  SetPlayerPagePayload,\n  SetSharedComboPayload,\n  SetShowSoundsLockedModalPayload,\n  SetShowUpgradeModalPayload,\n  SetShowShareModalPayload,\n  SetShowSharePlayModalPayload,\n  SetBaseTitlePayload,\n} from './base.interfaces';\nimport { IsLoadingPayload } from '../common/isLoading.interface';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const setIsMobileReducer = (\n  state: BaseState, action: PayloadAction<SetIsMobilePayload>,\n) => {\n  state.isMobile = action.payload.isMobile;\n};\n\nexport const setShowHomepageModalReducer = (\n  state: BaseState, action: PayloadAction<SetShowHomepageModalPayload>,\n) => {\n  state.showHomepageModal = action.payload.showHomepageModal;\n};\n\nexport const setPlayerPageReducer = (\n  state: BaseState, action: PayloadAction<SetPlayerPagePayload>,\n) => {\n  state.playerPage = action.payload.playerPage;\n};\n\nexport const setSharedComboReducer = (\n  state: BaseState, action: PayloadAction<SetSharedComboPayload>,\n) => {\n  state.sharedCombo = action.payload.sharedCombo;\n};\n\nexport const setSharedComboIsLoadingReducer = (\n  state: BaseState, action: PayloadAction<IsLoadingPayload>,\n) => {\n  state.sharedComboIsLoading = action.payload.isLoading;\n};\n\nexport const setShowSoundsLockedModalReducer = (\n  state: BaseState, action: PayloadAction<SetShowSoundsLockedModalPayload>,\n) => {\n  state.showSoundsLockedModal = action.payload.showSoundsLockedModal;\n};\n\nexport const setShowUpgradeModalReducer = (\n  state: BaseState, action: PayloadAction<SetShowUpgradeModalPayload>,\n) => {\n  state.showUpgradeModal = action.payload.showUpgradeModal;\n};\n\nexport const setShowShareModalReducer = (\n  state: BaseState, action: PayloadAction<SetShowShareModalPayload>,\n) => {\n  state.showShareModal = action.payload.showShareModal;\n};\n\nexport const setShowSharePlayModalReducer = (\n  state: BaseState, action: PayloadAction<SetShowSharePlayModalPayload>,\n) => {\n  state.showSharePlayModal = action.payload.showSharePlayModal;\n};\n\nexport const setBaseTitleReducer = (\n  state: BaseState, action: PayloadAction<SetBaseTitlePayload>,\n) => {\n  state.baseTitle = action.payload.baseTitle;\n};\n\nexport const closeAllModalsReducer = (\n  state: BaseState,\n) => {\n  state.showUpgradeModal = false;\n  state.showSoundsLockedModal = false;\n  state.showHomepageModal = false;\n  state.showShareModal = false;\n  state.showSharePlayModal = false;\n};\n","// eslint-disable-next-line import/prefer-default-export\nimport Push from 'push.js';\nimport { TimerType } from '@noisli/common';\n\n/**\n * Function that returns formatted string of time\n * @param hours\n * @param minutes\n * @param seconds\n * @returns {string}\n */\nexport const formatActualTime = (\n  hours: number | string,\n  minutes: number | string,\n  seconds: number | string,\n) => `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n\n/**\n * reoarse actual time to trim hours if hours is set to 00\n * @param actualTime\n * @returns {string}\n */\nexport const formatSessionTime = (actualTime: string) => {\n  const [hours, minutes, seconds] = actualTime.split(':');\n\n  let actualTimeText = '';\n\n  if (hours === '00') {\n    actualTimeText = `${minutes}:${seconds}`;\n  } else {\n    actualTimeText = `${hours}:${minutes}:${seconds}`;\n  }\n\n  return actualTimeText;\n};\n\n/**\n * Function that sends push notification with set text\n * @param timerType\n */\nexport const sendPushNotification = (timerType: TimerType) => {\n  let message = '';\n\n  switch (timerType) {\n    case TimerType.Session:\n      message = 'Time is up!';\n      break;\n    case TimerType.ShortBreak:\n      message = 'Short Break is up!';\n      break;\n    case TimerType.LongBreak:\n      message = 'Long Break is up!';\n      break;\n\n    default:\n      break;\n  }\n\n  if (!message) {\n    return;\n  }\n\n  Push.create(message, {\n    icon: 'https://about.noisli.com/assets/icons/favicon-192x192.png',\n    timeout: 4000,\n  });\n};\n\n/**\n * Function that determine what title should be generated\n * to display it to user\n * @param timerType\n * @param actualTime\n * @param showBreakNotification\n * @returns {string}\n */\nexport const setTimerPageTitle = (\n  timerType: TimerType, actualTime: string, showBreakNotification = false,\n) => {\n  let title = '';\n  const [hours, minutes, seconds] = actualTime.split(':');\n  let actualTimeText = '';\n\n  if (hours === '00' && minutes === '00') {\n    actualTimeText = `${seconds}s`;\n  } else if (hours === '00') {\n    actualTimeText = `${minutes}:${seconds}`;\n  } else {\n    actualTimeText = `${hours}:${minutes}:${seconds}`;\n  }\n\n  switch (timerType) {\n    case TimerType.Session:\n      title = actualTimeText;\n      break;\n    case TimerType.ShortBreak:\n      if (showBreakNotification) {\n        title = 'Short Break?';\n        break;\n      }\n      title = `<${actualTimeText}>`;\n      break;\n    case TimerType.LongBreak:\n      if (showBreakNotification) {\n        title = 'Long Break?';\n        break;\n      }\n      title = `<${actualTimeText}>`;\n      break;\n\n    default:\n      break;\n  }\n\n  if (!title) {\n    return '';\n  }\n\n  return title;\n};\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./User\"));\n__export(require(\"./Api\"));\n__export(require(\"./Share\"));\n__export(require(\"./Subscription\"));\n__export(require(\"./Timer\"));\n__export(require(\"./Websockets\"));\n//# sourceMappingURL=index.js.map","import playersList from 'app/assets/players_list.json';\nimport playersHomepageList from 'app/assets/players_list_homepage.json';\nimport config from 'app/config/config';\nimport {\n  Player, PlayerHomepage, PlayersHomepageListItem, PlayersListItem,\n} from './players.interfaces';\n\nexport const generatePlayerUrl = (id: string) => config.cdnUrl.replace(/<sound-name>/g, id);\n\nexport const generateInitalPlayersState = (): Player[] => playersList.map(\n  (player: PlayersListItem) => ({\n    id: player.id,\n    url: generatePlayerUrl(player.id),\n    volume: player.volume,\n    pro: player.pro,\n    isLoaded: false,\n    isPlaying: false,\n    isOscillating: false,\n    isShuffling: false,\n  }),\n);\n\nexport const generateInitalPlayersHomepageState = (): PlayerHomepage[] => playersHomepageList.map(\n  (player: PlayersHomepageListItem) => ({\n    id: player.id,\n    url: generatePlayerUrl(player.as || player.id),\n    as: player.as,\n    volume: player.volume,\n    show: player.show,\n    disabled: player.disabled,\n    pro: false,\n    isLoaded: false,\n    isPlaying: false,\n    isOscillating: false,\n    isShuffling: false,\n  }),\n);\n","import { PlayersState } from './players.interfaces';\nimport { generateInitalPlayersHomepageState, generateInitalPlayersState } from './players.utils';\n\nconst state: PlayersState = {\n  masterController: {\n    volume: 1,\n    lastVolume: 1,\n    isPlaying: false,\n    isMuted: false,\n    isOscillating: false,\n    scheduledOscillation: [],\n    isShuffling: false,\n    isShufflingTransition: false,\n    scheduledShuffle: {\n      fromCombo: '',\n      toCombo: '',\n    },\n\n    // time in seconds\n    crossFadeInStartTime: 1.3,\n    crossFadeInDuration: 1000,\n    crossFadeInDelay: 0,\n    crossFadeOutStartTime: 300,\n    crossFadeOutDuration: 1000,\n  },\n\n  players: generateInitalPlayersState(),\n\n  playersHomepage: generateInitalPlayersHomepageState(),\n\n  activeCombo: undefined,\n\n  oscillationConfig: {\n    minTime: 2 * 60 * 1000,\n    maxTime: 4 * 60 * 1000,\n    changeTime: 10 * 1000,\n    comboVolumeReturnTime: 5 * 1000,\n    // #region For development purposes\n    // minTime: 5 * 1000,\n    // maxTime: 10 * 1000,\n    // changeTime: 10 * 1000,\n    // comboVolumeReturnTime: 3 * 1000,\n    // #endregion For development purposes\n    // #region For testing purposes\n    // minTime: 20 * 1000,\n    // maxTime: 40 * 1000,\n    // changeTime: 10 * 1000,\n    // comboVolumeReturnTime: 5 * 1000,\n    // #endregion For testing purposes\n    changeValue: 0.25,\n    minVolumeValue: 0.05,\n    maxVolumeValue: 1.00,\n    customPlayerSettings: [\n      {\n        playerId: 'whitenoise',\n        minVolumeValue: 0.05,\n        maxVolumeValue: 0.75,\n      },\n      {\n        playerId: 'pinknoise',\n        minVolumeValue: 0.05,\n        maxVolumeValue: 0.75,\n      },\n      {\n        playerId: 'brownnoise',\n        minVolumeValue: 0.05,\n        maxVolumeValue: 0.75,\n      },\n    ],\n  },\n\n  shuffleConfig: {\n    minTime: 1,\n    maxTime: 120,\n    time: 10,\n    changeTime: 0.5 * 60 * 1000,\n    returnTime: 5 * 1000,\n    // #region For development purposes\n    // minTime: 1,\n    // maxTime: 120,\n    // time: 0.5,\n    // changeTime: 20 * 1000,\n    // returnTime: 5 * 1000,\n    // #endregion For development purposes\n    // #region For testing purposes\n    // minTime: 1,\n    // maxTime: 120,\n    // time: 1,\n    // changeTime: 30 * 1000,\n    // returnTime: 5 * 1000,\n    // #endregion For testing purposes\n  },\n\n  useHomepage: false,\n};\n\nexport default state;\n","import { createSlice } from 'redux-starter-kit';\nimport state from './players.state';\nimport {\n  setPlayerPlayingReducer,\n  setPlayerVolumeReducer,\n  setPlayerIsLoadedReducer,\n  setMasterPlayerPlayingReducer,\n  setMasterPlayerVolumeReducer,\n  setMasterPlayerIsMutedReducer,\n  stopAllPlayersReducer,\n  setOscillatorStateReducer,\n  startOscillatorReducer,\n  clearOscillatorReducer,\n  setPlayerOscillatingReducer,\n  updateOscillatorReducer,\n  setShufflingStateReducer,\n  setShuffledCombosReducer,\n  updateShuffleReducer,\n  setPlayerShufflingReducer,\n  setShufflingTranstionStateReducer,\n  setActiveComboReducer,\n  renewShuffleReducer,\n  setPlayersShufflingReducer,\n  startupPlayersForShuffleReducer,\n  setPlayersVolumeReducer,\n  stopPlayersAfterShuffleReducer,\n  setVolumeAfterShuffleReducer,\n  destroyShuffleReducer,\n  revertPlayersVolumeReducer,\n  setShuffleTimeReducer, setUseHomepagePlayersReducer,\n} from './players.reducers';\n\nconst playersSlice = createSlice({\n  slice: 'players',\n\n  initialState: state,\n\n  reducers: {\n    setPlayerPlaying: setPlayerPlayingReducer,\n    setPlayerVolume: setPlayerVolumeReducer,\n    setPlayersVolume: setPlayersVolumeReducer,\n    revertPlayersVolume: revertPlayersVolumeReducer,\n    setPlayerIsLoaded: setPlayerIsLoadedReducer,\n    stopAllPlayers: stopAllPlayersReducer,\n    setMasterPlayerPlaying: setMasterPlayerPlayingReducer,\n    setMasterPlayerVolume: setMasterPlayerVolumeReducer,\n    setMasterPlayerIsMuted: setMasterPlayerIsMutedReducer,\n\n    setOscillatorState: setOscillatorStateReducer,\n    setPlayerOscillating: setPlayerOscillatingReducer,\n    startOscillator: startOscillatorReducer,\n    updateOscillator: updateOscillatorReducer,\n    clearOscillator: clearOscillatorReducer,\n\n    setShufflingState: setShufflingStateReducer,\n    setShufflingTranstionState: setShufflingTranstionStateReducer,\n    setShuffledCombos: setShuffledCombosReducer,\n    setPlayerShuffling: setPlayerShufflingReducer,\n    updateShuffle: updateShuffleReducer,\n    renewShuffle: renewShuffleReducer,\n    destroyShuffle: destroyShuffleReducer,\n\n    setPlayersShuffling: setPlayersShufflingReducer,\n    startupPlayersForShuffle: startupPlayersForShuffleReducer,\n    stopPlayersAfterShuffle: stopPlayersAfterShuffleReducer,\n    setVolumeAfterShuffle: setVolumeAfterShuffleReducer,\n\n    setActiveCombo: setActiveComboReducer,\n    setShuffleTime: setShuffleTimeReducer,\n\n    setUseHomepagePlayers: setUseHomepagePlayersReducer,\n  },\n});\n// Extract the action creators object and the reducer\nconst { actions, reducer, selectors } = playersSlice;\n// Extract and export each action creator by name\nexport const {\n  setPlayerPlaying,\n  setPlayerVolume,\n  setPlayersVolume,\n  setPlayerIsLoaded,\n  revertPlayersVolume,\n  stopAllPlayers,\n  setMasterPlayerPlaying,\n  setMasterPlayerVolume,\n  setMasterPlayerIsMuted,\n\n  setOscillatorState,\n  setPlayerOscillating,\n  startOscillator,\n  updateOscillator,\n  clearOscillator,\n\n  setShufflingState,\n  setShufflingTranstionState,\n  setShuffledCombos,\n  setPlayerShuffling,\n  updateShuffle,\n  renewShuffle,\n  destroyShuffle,\n\n  setPlayersShuffling,\n  startupPlayersForShuffle,\n  stopPlayersAfterShuffle,\n  setVolumeAfterShuffle,\n\n  setActiveCombo,\n  setShuffleTime,\n\n  setUseHomepagePlayers,\n} = actions;\n\nexport const { getPlayers } = selectors;\n// Export the reducer, either as a default or named export\nexport default reducer;\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from 'redux-starter-kit';\nimport {\n  SetShufflePayload,\n  SetShuffledCombos,\n  SetPlayerShufflePayload,\n  SetPlayersShufflingPayload,\n  ShuffleTimePayload,\n} from 'app/redux/modules/common/shuffle.interfaces';\nimport {\n  PlayersState,\n  SetPlayerPlayingPayload,\n  SetPlayerVolumePayload,\n  SetPlayerIsLoadedPayload,\n  SetMasterPlayerPlayingPayload,\n  SetMasterPlayerVolumePayload,\n  SetMasterPlayerMutedPayload,\n  SetOscillationPayload,\n  OscillatorPlayerPayload,\n  Oscillator,\n  SetPlayerOscillationPayload,\n  SetPlayersVolumePayload,\n  StopPlayersAfterShuffle,\n  SetUseHomepagePlayers,\n} from './players.interfaces';\nimport { SetActiveComboPayload } from '../common/combos.interfaces';\n\n/**\n * Reduer to set one player instance playing state\n * @param state\n * @param action\n */\nexport const setPlayerPlayingReducer = (\n  state: PlayersState, action: PayloadAction<SetPlayerPlayingPayload>,\n) => {\n  if (state.useHomepage) {\n    const idx = state.playersHomepage.findIndex((player) => player.id === action.payload.id);\n    if (idx > -1) {\n      state.playersHomepage[idx].isPlaying = action.payload.isPlaying;\n    }\n    return;\n  }\n  const idx = state.players.findIndex((player) => player.id === action.payload.id);\n  if (idx > -1) {\n    state.players[idx].isPlaying = action.payload.isPlaying;\n  }\n};\n\n/**\n * Reduer to set one player instance volume state\n * @param state\n * @param action\n */\nexport const setPlayerVolumeReducer = (\n  state: PlayersState, action: PayloadAction<SetPlayerVolumePayload>,\n) => {\n  if (state.useHomepage) {\n    const idx = state.playersHomepage.findIndex((player) => player.id === action.payload.id);\n    if (idx > -1) {\n      state.playersHomepage[idx].volume = action.payload.volume;\n    }\n    return;\n  }\n  const idx = state.players.findIndex((player) => player.id === action.payload.id);\n  if (idx > -1) {\n    state.players[idx].volume = action.payload.volume;\n  }\n};\n\n/**\n * Reducer to set players instances passed in action playing state\n * @param state\n * @param action\n */\nexport const setPlayersVolumeReducer = (\n  state: PlayersState, action: PayloadAction<SetPlayersVolumePayload>,\n) => {\n  const { items } = action.payload;\n\n  state.players.forEach((player) => {\n    const item = items.find((el) => el.id === player.id);\n    if (item) {\n      player.volume = item.volume;\n    }\n  });\n};\n\n/**\n * Reducer that reverts volume of non playing players\n * It is used after actions that modify volume (eg. shuffle, oscillation, timer)\n * @param state\n * @param action\n */\nexport const revertPlayersVolumeReducer = (\n  state: PlayersState, action: PayloadAction<SetPlayersVolumePayload>,\n) => {\n  const { items } = action.payload;\n\n  state.players.forEach((player) => {\n    const item = items.find((el) => el.id === player.id);\n    if (item && !player.isPlaying) {\n      player.volume = item.volume;\n    }\n  });\n};\n\n\n/**\n * Reducer to indicate that player is ready to play\n * @param state\n * @param action\n */\nexport const setPlayerIsLoadedReducer = (\n  state: PlayersState, action: PayloadAction<SetPlayerIsLoadedPayload>,\n) => {\n  const idx = state.players.findIndex((player) => player.id === action.payload.id);\n  if (idx > -1) {\n    state.players[idx].isLoaded = action.payload.isLoaded;\n  }\n};\n\nexport const stopAllPlayersReducer = (state: PlayersState) => {\n  state.playersHomepage.forEach((player) => {\n    player.isPlaying = false;\n    player.isOscillating = false;\n  });\n  state.players.forEach((player) => {\n    player.isPlaying = false;\n    player.isOscillating = false;\n  });\n  state.masterController.isPlaying = false;\n  state.activeCombo = undefined;\n};\n\nexport const setMasterPlayerPlayingReducer = (\n  state: PlayersState, action: PayloadAction<SetMasterPlayerPlayingPayload>,\n) => {\n  state.masterController.isPlaying = action.payload.isPlaying;\n};\n\nexport const setMasterPlayerVolumeReducer = (\n  state: PlayersState, action: PayloadAction<SetMasterPlayerVolumePayload>,\n) => {\n  state.masterController.lastVolume = state.masterController.volume;\n  state.masterController.volume = action.payload.volume;\n};\n\nexport const setMasterPlayerIsMutedReducer = (\n  state: PlayersState, action: PayloadAction<SetMasterPlayerMutedPayload>,\n) => {\n  state.masterController.isMuted = action.payload.isMuted;\n};\n\nexport const setOscillatorStateReducer = (\n  state: PlayersState, action: PayloadAction<SetOscillationPayload>,\n) => {\n  state.masterController.isOscillating = action.payload.isOscillating;\n};\n\nexport const clearOscillatorReducer = (\n  state: PlayersState, action: PayloadAction<OscillatorPlayerPayload>,\n) => {\n  const idx = state.masterController.scheduledOscillation.findIndex(\n    (oscillator) => oscillator.playerId === action.payload.playerId,\n  );\n\n  if (idx > -1) {\n    state.masterController.scheduledOscillation.splice(idx, 1);\n  }\n};\n\n/**\n * Reducer to add oscillator to master controller\n * @param state\n * @param action\n */\nexport const startOscillatorReducer = (\n  state: PlayersState, action: PayloadAction<OscillatorPlayerPayload>,\n) => {\n  const player = state.players.find((playerItem) => playerItem.id === action.payload.playerId);\n\n  if (player) {\n    const oscillator: Oscillator = {\n      playerId: player.id,\n    };\n\n    state.masterController.scheduledOscillation.push(oscillator);\n  }\n};\n\nexport const updateOscillatorReducer = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  state: PlayersState, action: PayloadAction<OscillatorPlayerPayload>,\n) => {};\n\nexport const setPlayerOscillatingReducer = (\n  state: PlayersState, action: PayloadAction<SetPlayerOscillationPayload>,\n) => {\n  const { playerId, isOscillating } = action.payload;\n\n  const idx = state.players.findIndex(\n    (player) => player.id === playerId,\n  );\n\n  if (idx > -1) {\n    state.players[idx].isOscillating = isOscillating;\n  }\n};\n\nexport const setShufflingStateReducer = (\n  state: PlayersState, action: PayloadAction<SetShufflePayload>,\n) => {\n  state.masterController.isShuffling = action.payload.isShuffling;\n};\n\nexport const setShufflingTranstionStateReducer = (\n  state: PlayersState, action: PayloadAction<SetShufflePayload>,\n) => {\n  state.masterController.isShufflingTransition = action.payload.isShuffling;\n};\n\nexport const setShuffledCombosReducer = (\n  state: PlayersState, action: PayloadAction<SetShuffledCombos>,\n) => {\n  state.masterController.scheduledShuffle = action.payload;\n};\n\nexport const updateShuffleReducer = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  state: PlayersState,\n) => {};\n\nexport const renewShuffleReducer = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  state: PlayersState,\n) => {};\n\nexport const destroyShuffleReducer = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  state: PlayersState,\n) => {};\n\nexport const setPlayerShufflingReducer = (\n  state: PlayersState, action: PayloadAction<SetPlayerShufflePayload>,\n) => {\n  const { playerId, isShuffling } = action.payload;\n\n  const idx = state.players.findIndex(\n    (player) => player.id === playerId,\n  );\n\n  if (idx > -1) {\n    state.players[idx].isShuffling = isShuffling;\n  }\n};\n\n/**\n * Reducer that marked players shuffling\n * @param state\n * @param action\n */\nexport const setPlayersShufflingReducer = (\n  state: PlayersState, action: PayloadAction<SetPlayersShufflingPayload>,\n) => {\n  const { playersIds, isShuffling } = action.payload;\n\n  state.players.forEach((player) => {\n    if (playersIds.includes(player.id)) {\n      player.isShuffling = isShuffling;\n    }\n  });\n};\n\n/**\n * Reducer that is run before starting the shuffle\n * @param state\n * @param action\n */\nexport const startupPlayersForShuffleReducer = (\n  state: PlayersState, action: PayloadAction<string[]>,\n) => {\n  state.players.forEach((player) => {\n    if (action.payload.includes(player.id)) {\n      player.volume = 0;\n      player.isPlaying = true;\n    }\n  });\n};\n\n/**\n * Reducer that stops players after shuffle\n * @param state\n * @param action\n */\nexport const stopPlayersAfterShuffleReducer = (\n  state: PlayersState, action: PayloadAction<StopPlayersAfterShuffle>,\n) => {\n  const { items } = action.payload;\n\n  state.players.forEach((player) => {\n    const item = items.find((el) => el.id === player.id);\n    if (item) {\n      player.isPlaying = false;\n    }\n  });\n};\n\n/**\n * Reducer that sets players volume after shuffle\n * @param state\n * @param action\n */\nexport const setVolumeAfterShuffleReducer = (\n  state: PlayersState, action: PayloadAction<StopPlayersAfterShuffle>,\n) => {\n  const { items } = action.payload;\n\n  state.players.forEach((player) => {\n    const item = items.find((el) => el.id === player.id);\n    if (item) {\n      player.volume = item.volume;\n    }\n  });\n};\n\nexport const setActiveComboReducer = (\n  state: PlayersState, action: PayloadAction<SetActiveComboPayload>,\n) => {\n  state.activeCombo = action.payload.combo;\n};\n\nexport const setShuffleTimeReducer = (\n  state: PlayersState, action: PayloadAction<ShuffleTimePayload>,\n) => {\n  state.shuffleConfig.time = action.payload.time;\n};\n\nexport const setUseHomepagePlayersReducer = (\n  state: PlayersState, action: PayloadAction<SetUseHomepagePlayers>,\n) => {\n  state.useHomepage = action.payload.useHomepage;\n};\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./accountType.enum\"));\n__export(require(\"./OauthProvider.enum\"));\n__export(require(\"../Websockets/UserSocketEvent.enum\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// eslint-disable-next-line import/prefer-default-export\nvar AccountType;\n(function (AccountType) {\n    AccountType[\"FREE\"] = \"FREE\";\n    AccountType[\"PRO\"] = \"PRO\";\n    AccountType[\"BUSINESS_MEMBER\"] = \"BUSINESS_MEMBER\";\n    AccountType[\"BUSINESS_ADMIN\"] = \"BUSINESS_ADMIN\";\n    AccountType[\"SUPERADMIN\"] = \"SUPERADMIN\";\n})(AccountType = exports.AccountType || (exports.AccountType = {}));\n//# sourceMappingURL=accountType.enum.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OauthProvider;\n(function (OauthProvider) {\n    OauthProvider[\"GOOGLE\"] = \"google\";\n    OauthProvider[\"FACEBOOK\"] = \"facebook\";\n})(OauthProvider = exports.OauthProvider || (exports.OauthProvider = {}));\n//# sourceMappingURL=OauthProvider.enum.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./messageStatus.enum\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MessageStatus;\n(function (MessageStatus) {\n    MessageStatus[MessageStatus[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    MessageStatus[MessageStatus[\"ERROR\"] = 1] = \"ERROR\";\n})(MessageStatus = exports.MessageStatus || (exports.MessageStatus = {}));\n//# sourceMappingURL=messageStatus.enum.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./ShareType.enum\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ShareType;\n(function (ShareType) {\n    ShareType[\"PLAYLIST\"] = \"PLAYLIST\";\n    ShareType[\"FAVOURITE\"] = \"FAVOURITE\";\n    ShareType[\"CUSTOM_COMBO\"] = \"CUSTOM_COMBO\";\n})(ShareType = exports.ShareType || (exports.ShareType = {}));\n//# sourceMappingURL=ShareType.enum.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./HighRiskTransactionStatus.enum\"));\n__export(require(\"./Subscription.enums\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar HighRiskTransactionStatus;\n(function (HighRiskTransactionStatus) {\n    HighRiskTransactionStatus[\"PENDING\"] = \"pending\";\n    HighRiskTransactionStatus[\"ACCEPTED\"] = \"accepted\";\n    HighRiskTransactionStatus[\"REJECTED\"] = \"rejected\";\n})(HighRiskTransactionStatus = exports.HighRiskTransactionStatus || (exports.HighRiskTransactionStatus = {}));\n//# sourceMappingURL=HighRiskTransactionStatus.enum.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PlanType;\n(function (PlanType) {\n    PlanType[\"FREE\"] = \"Free\";\n    PlanType[\"PRO\"] = \"Pro\";\n    PlanType[\"BUSINESS\"] = \"Business\";\n})(PlanType = exports.PlanType || (exports.PlanType = {}));\nvar PlanCycle;\n(function (PlanCycle) {\n    PlanCycle[\"MONTH\"] = \"month\";\n    PlanCycle[\"YEAR\"] = \"year\";\n})(PlanCycle = exports.PlanCycle || (exports.PlanCycle = {}));\n//# sourceMappingURL=Subscription.enums.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./Timer.interface\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TimerType;\n(function (TimerType) {\n    TimerType[TimerType[\"Session\"] = 0] = \"Session\";\n    TimerType[TimerType[\"ShortBreak\"] = 1] = \"ShortBreak\";\n    TimerType[TimerType[\"LongBreak\"] = 2] = \"LongBreak\";\n})(TimerType = exports.TimerType || (exports.TimerType = {}));\n//# sourceMappingURL=Timer.interface.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./UserSocketEvent.enum\"));\n__export(require(\"./TimerSocketEvent.enum\"));\n__export(require(\"./FavouriteSocketEvent.enum\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TimerSocketEvent;\n(function (TimerSocketEvent) {\n    TimerSocketEvent[\"UPDATE_TIMER_CONFIG\"] = \"timer/updateTimerConfig\";\n})(TimerSocketEvent = exports.TimerSocketEvent || (exports.TimerSocketEvent = {}));\n//# sourceMappingURL=TimerSocketEvent.enum.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FavouriteSocketEvent;\n(function (FavouriteSocketEvent) {\n    FavouriteSocketEvent[\"UPDATE_FAVOURITES\"] = \"favourite/updateFavourites\";\n})(FavouriteSocketEvent = exports.FavouriteSocketEvent || (exports.FavouriteSocketEvent = {}));\n//# sourceMappingURL=FavouriteSocketEvent.enum.js.map","import { SVGIcon } from '../index';\nimport MultiColors from './multi-colors.svg';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const MultiColorsIcon: SVGIcon = MultiColors;\n","import { SVGIcon } from '../index';\nimport appStoreBadge from './badge-app-store.svg';\nimport playStoreBadge from './badge-play-store.svg';\nimport chromeStoreBadge from './badge-chrome-store.svg';\n\nexport const AppStoreBadge: SVGIcon = appStoreBadge;\nexport const PlayStoreBadge: SVGIcon = playStoreBadge;\nexport const ChromeStoreBadge: SVGIcon = chromeStoreBadge;\n","import React from 'react';\nimport { SVGIcon } from '../index';\n\nimport account from './account.svg';\nimport accountSmall from './account-small.svg';\nimport audioPreview from './audio-preview.svg';\nimport check from './check.svg';\nimport decrease from './decrease.svg';\nimport deleteIcon from './delete.svg';\nimport download from './download.svg';\nimport edit from './edit.svg';\nimport fbFooter from './fb-footer.svg';\nimport increase from './increase.svg';\nimport info from './info.svg';\nimport leftArrow from './left-arrow.svg';\nimport markdownPreview from './markdown-preview.svg';\nimport muted from './muted.svg';\nimport mutedSmall from './muted-small.svg';\nimport note from './note.svg';\nimport oscillation from './oscillation.svg';\nimport remove from './remove.svg';\nimport rename from './rename.svg';\nimport rightArrow from './right-arrow.svg';\nimport saved from './saved.svg';\nimport share from './share.svg';\nimport shuffle from './shuffle.svg';\nimport sound from './sound.svg';\nimport soundSmall from './sound-small.svg';\nimport textEditor from './text-editor.svg';\nimport textEditorSmall from './text-editor-small.svg';\nimport twFooter from './tw-footer.svg';\n\nimport email from './email.svg';\nimport fb from './fb.svg';\nimport tw from './tw.svg';\n\nimport cancel from './cancel.svg';\nimport pause from './pause.svg';\nimport play from './play.svg';\nimport replay from './replay.svg';\nimport settings from './settings.svg';\nimport skip from './skip.svg';\n\nconst Icons = {\n  account,\n  accountSmall,\n  audioPreview,\n  decrease,\n  delete: deleteIcon,\n  download,\n  edit,\n  fbFooter,\n  increase,\n  info,\n  leftArrow,\n  markdownPreview,\n  muted,\n  mutedSmall,\n  note,\n  oscillation,\n  remove,\n  rename,\n  rightArrow,\n  saved,\n  share,\n  shuffle,\n  sound,\n  soundSmall,\n  textEditor,\n  textEditorSmall,\n  twFooter,\n  email,\n  fb,\n  tw,\n};\n\ninterface Props {\n  name: keyof typeof Icons;\n}\n\nexport const InterfaceIcon: React.FC<Props> = ({ name }) => {\n  if (Object.keys(Icons).some((key) => key === name)) {\n    const Icon = Icons[name];\n    return <Icon />;\n  }\n\n  return <></>;\n};\n\n\nexport const AccountIcon: SVGIcon = account;\nexport const AccountSmallIcon: SVGIcon = accountSmall;\nexport const AudioPreviewIcon: SVGIcon = audioPreview;\nexport const CheckIcon: SVGIcon = check;\nexport const DecreaseIcon: SVGIcon = decrease;\nexport const DeleteIcon: SVGIcon = deleteIcon;\nexport const DownloadIcon: SVGIcon = download;\nexport const EditIcon: SVGIcon = edit;\nexport const FbFooterDarkIcon: SVGIcon = fbFooter;\nexport const IncreaseIcon: SVGIcon = increase;\nexport const InfoIcon: SVGIcon = info;\nexport const LeftArrowIcon: SVGIcon = leftArrow;\nexport const MarkdownPreviewIcon: SVGIcon = markdownPreview;\nexport const MutedIcon: SVGIcon = muted;\nexport const MutedSmallIcon: SVGIcon = mutedSmall;\nexport const NoteIcon: SVGIcon = note;\nexport const OscillationIcon: SVGIcon = oscillation;\nexport const RemoveIcon: SVGIcon = remove;\nexport const RenameIcon: SVGIcon = rename;\nexport const RightArrowIcon: SVGIcon = rightArrow;\nexport const SavedIcon: SVGIcon = saved;\nexport const ShareIcon: SVGIcon = share;\nexport const ShuffleIcon: SVGIcon = shuffle;\nexport const SoundIcon: SVGIcon = sound;\nexport const SoundSmallIcon: SVGIcon = soundSmall;\nexport const TextEditorIcon: SVGIcon = textEditor;\nexport const TextEditorSmallIcon: SVGIcon = textEditorSmall;\nexport const TwFooterIcon: SVGIcon = twFooter;\nexport const EmailIcon: SVGIcon = email;\nexport const FbIcon: SVGIcon = fb;\nexport const TwIcon: SVGIcon = tw;\n\nexport const CancelIcon: SVGIcon = cancel;\nexport const PauseIcon: SVGIcon = pause;\nexport const PlayIcon: SVGIcon = play;\nexport const ReplayIcon: SVGIcon = replay;\nexport const SettingsIcon: SVGIcon = settings;\nexport const SkipIcon: SVGIcon = skip;\n","import { SVGIcon } from '../index';\nimport google from './g.svg';\nimport fbFooterDark from './fb-footer-dark.svg';\nimport twFooterDark from './tw-footer-dark.svg';\n\nexport const GoogleIcon: SVGIcon = google;\nexport const FbFooterIcon: SVGIcon = fbFooterDark;\nexport const TwFooterDarkIcon: SVGIcon = twFooterDark;\n","import { SVGIcon } from '../index';\nimport onboardingStep11 from './onboarding-step1-1.svg';\nimport onboardingStep12 from './onboarding-step1-2.svg';\nimport onboardingStep13 from './onboarding-step1-3.svg';\nimport onboardingStep14 from './onboarding-step1-4.svg';\nimport onboardingStep2 from './onboarding-step2.svg';\nimport onboardingStep3 from './onboarding-step3.svg';\nimport onboardingStep4 from './onboarding-step4.svg';\nimport onboardingStep5 from './onboarding-step5.svg';\nimport onboardingStep6 from './onboarding-step6.svg';\n\nexport const OnboardingStep11Icon: SVGIcon = onboardingStep11;\nexport const OnboardingStep12Icon: SVGIcon = onboardingStep12;\nexport const OnboardingStep13Icon: SVGIcon = onboardingStep13;\nexport const OnboardingStep14Icon: SVGIcon = onboardingStep14;\nexport const OnboardingStep2Icon: SVGIcon = onboardingStep2;\nexport const OnboardingStep3Icon: SVGIcon = onboardingStep3;\nexport const OnboardingStep4Icon: SVGIcon = onboardingStep4;\nexport const OnboardingStep5Icon: SVGIcon = onboardingStep5;\nexport const OnboardingStep6Icon: SVGIcon = onboardingStep6;\n","import React from 'react';\n\nimport beautifulAmbients from './beautiful-ambients.svg';\nimport creativeThinking from './creative-thinking.svg';\nimport motivation from './motivation.svg';\nimport noiseBlocker from './noise-blocker.svg';\nimport productivity from './productivity.svg';\nimport random from './random.svg';\nimport relax from './relax.svg';\nimport sleep from './sleep.svg';\nimport studying from './studying.svg';\nimport writing from './writing.svg';\n\nimport { Icons as PlayerIcons } from '../PlayerIcons/index';\n\nconst Icons = {\n  beautifulAmbients,\n  creativeThinking,\n  motivation,\n  noiseBlocker,\n  productivity,\n  random,\n  relax,\n  sleep,\n  studying,\n  writing,\n};\n\ninterface Props {\n  name: string;\n}\n\nconst PlaylistIcon: React.FC<Props> = ({ name }) => {\n  if (Object.keys(Icons).some((key) => key === name)) {\n    const Icon = Icons[(name as keyof typeof Icons)];\n    return <Icon />;\n  }\n\n  if (Object.keys(PlayerIcons).some((key) => key === name)) {\n    const Icon = PlayerIcons[(name as keyof typeof PlayerIcons)];\n    return <Icon />;\n  }\n\n  return <></>;\n};\n\nexport default PlaylistIcon;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { AnyAction } from 'redux';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from 'app/redux';\nimport {\n  PlayerVolumePayload,\n  SetMasterPlayerMutedPayload,\n  SetMasterPlayerPlayingPayload,\n  SetMasterPlayerVolumePayload,\n  SetOscillationPayload,\n  SetPlayerPlayingPayload,\n} from './players.interfaces';\nimport {\n  clearOscillator,\n  setMasterPlayerIsMuted,\n  setMasterPlayerPlaying,\n  setMasterPlayerVolume,\n  setOscillatorState,\n  setPlayerPlaying,\n  setPlayersVolume,\n  setVolumeAfterShuffle,\n  startOscillator,\n  stopPlayersAfterShuffle,\n} from '.';\n\n/**\n * Start player and mark controller as playing or not\n * @param payload\n * @returns {(dispatch, getState) => void}\n */\nexport const setPlayerPlayingThunk = (\n  payload: SetPlayerPlayingPayload,\n): ThunkAction<void, RootState, null, AnyAction> => (dispatch, getState) => {\n  dispatch(setPlayerPlaying(payload));\n  if (payload.isPlaying) {\n    dispatch(setMasterPlayerPlaying({ isPlaying: true }));\n    return;\n  }\n\n  const state = getState();\n  if (state.players.useHomepage) {\n    if (state.players.playersHomepage.every((player) => !player.isPlaying)) {\n      dispatch(setMasterPlayerPlaying({ isPlaying: false }));\n    }\n    return;\n  }\n\n  if (state.players.players.every((player) => !player.isPlaying)) {\n    dispatch(setMasterPlayerPlaying({ isPlaying: false }));\n  }\n};\n\n/**\n * Thunk that handles master controller volume slider\n * @param payload\n * @returns {(dispatch, getState) => Promise<void>}\n */\nexport const setMasterPlayerVolumeThunk = (\n  payload: SetMasterPlayerVolumePayload,\n): ThunkAction<void, RootState, null, AnyAction> => async (dispatch, getState) => {\n  dispatch(setMasterPlayerVolume(payload));\n  const state = getState();\n  if (payload.volume === 0) {\n    dispatch(setMasterPlayerIsMuted({\n      isMuted: true,\n    }));\n    return;\n  }\n\n  if (state.players.masterController.isMuted) {\n    dispatch(setMasterPlayerIsMuted({\n      isMuted: false,\n    }));\n  }\n};\n\nexport const setMasterPlayerIsMutedThunk = (\n  payload: SetMasterPlayerMutedPayload,\n): ThunkAction<void, RootState, null, AnyAction> => async (dispatch, getState) => {\n  const state = getState();\n\n  if (payload.isMuted) {\n    dispatch(setMasterPlayerIsMuted(payload));\n    dispatch(setMasterPlayerVolume({\n      volume: 0,\n    }));\n  } else {\n    dispatch(setMasterPlayerVolume({\n      volume: state.players.masterController.lastVolume === 0\n        ? 0.01\n        : state.players.masterController.lastVolume,\n    }));\n    dispatch(setMasterPlayerIsMuted(payload));\n  }\n};\n\n/**\n * Thunk that set oscillation on/off and start oscillators for players\n * @param payload\n * @returns {(dispatch, getState) => Promise<void>}\n */\nexport const setOscillationThunk = (\n  payload: SetOscillationPayload,\n): ThunkAction<void, RootState, null, AnyAction> => async (dispatch, getState) => {\n  const state = getState();\n\n  if (payload.isOscillating) {\n    state.players.players.forEach((player) => {\n      if (!player.isPlaying) {\n        return;\n      }\n\n      dispatch(startOscillator({\n        playerId: player.id,\n      }));\n    });\n\n    dispatch(setOscillatorState({\n      isOscillating: true,\n    }));\n\n    return;\n  }\n\n  state.players.masterController.scheduledOscillation.forEach((oscillator) => {\n    dispatch(clearOscillator({\n      playerId: oscillator.playerId,\n    }));\n  });\n\n  dispatch(setOscillatorState({\n    isOscillating: false,\n  }));\n};\n\nexport const stopPlayersAfterShuffleThunk = (\n  payload: PlayerVolumePayload[],\n): ThunkAction<void, RootState, null, AnyAction> => async (dispatch) => {\n  dispatch(stopPlayersAfterShuffle({\n    items: payload,\n  }));\n\n  setTimeout(() => {\n    dispatch(setVolumeAfterShuffle({\n      items: payload,\n    }));\n  }, 1000);\n};\n","import axios from './AxiosInstance';\nimport { IncomingMessage, OutgoingHttpHeaders } from 'http';\nimport {\n  LoginUserDto,\n  UserRO,\n  CreateUserDto,\n  MessageRO,\n  ResetPasswordDto,\n  ResetPasswordChangeDto,\n  DeleteAccountDto,\n  DeleteAccountFeedbackDto,\n  PasswordChangeDto,\n  ProfileUpdateDto,\n  WithMessage,\n  PreferencesUpdateDto, UserIncludes, WithToken, DeleteAccountConfirmDto,\n} from '@noisli/common';\nimport { setCookie } from 'nookies';\nimport dayjs from 'dayjs';\nimport { setAuthHeader } from 'app/components/withAuth/withAuth';\n\n/**\n * Static class that have all connection to API regarding Users module\n */\nexport default class UsersApi {\n  static apiUrl = `${process.env.REACT_APP_API_URL}/user`;\n\n  static async login(payload: LoginUserDto) {\n    const response = await axios.post<WithToken<UserRO>>(`${UsersApi.apiUrl}/login`, payload, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async logout() {\n    const response = await axios.get<string>(`${UsersApi.apiUrl}/logout`, {\n      withCredentials: true,\n    });\n\n    return response;\n  }\n\n  static async register(payload: CreateUserDto) {\n    const response = await axios.post<UserRO>(`${UsersApi.apiUrl}`, payload);\n    const { data } = response;\n\n    return data;\n  }\n\n  static async resetPassword(payload: ResetPasswordDto) {\n    const response = await axios.post<MessageRO>(`${UsersApi.apiUrl}/reset-password`, payload);\n    const { data } = response;\n\n    return data;\n  }\n\n  static async resetPasswordChange(payload: ResetPasswordChangeDto) {\n    const response = await axios.post<MessageRO>(`${UsersApi.apiUrl}/reset-password/change`, payload);\n    const { data } = response;\n\n    return data;\n  }\n\n  static async resetPasswordCheck(payload: ResetPasswordChangeDto) {\n    const response = await axios.post<boolean>(`${UsersApi.apiUrl}/reset-password/check`, payload);\n    const { data } = response;\n\n    return data;\n  }\n\n  static async deleteAccount(payload: DeleteAccountDto) {\n    const response = await axios.post<MessageRO>(`${UsersApi.apiUrl}/delete-account`, payload, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async deleteAccountConfirm(payload: DeleteAccountConfirmDto) {\n    const response = await axios.get<boolean>(`${UsersApi.apiUrl}/delete-account/confirm`, {\n      params: payload,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async deleteAccountFeedback(payload: DeleteAccountFeedbackDto) {\n    await axios.post<MessageRO>(`${UsersApi.apiUrl}/delete-account/feedback`, payload);\n  }\n\n  static async getUser(headers?: OutgoingHttpHeaders, includes?: UserIncludes[]) {\n    const response = await axios.get<UserRO>(`${UsersApi.apiUrl}`, {\n      params: {\n        includes,\n      },\n      withCredentials: true,\n      headers,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async passwordChange(payload: PasswordChangeDto) {\n    localStorage.setItem('passwordChangeRequest', 'true');\n\n    const { data } = await axios.post<WithToken<{}>>(`${process.env.REACT_APP_API_URL}/user/change-password`, payload, {\n      withCredentials: true,\n    });\n\n    setCookie({}, 'jwt', data.token.accessToken, {\n      expires: dayjs().add(data.token.expiresIn, 'second').toDate(),\n      secure: true,\n      httpOnly: false,\n      path: '/',\n    });\n\n    setAuthHeader(data.token.accessToken);\n  }\n\n  static async profileUpdate(payload: ProfileUpdateDto) {\n    const response = await axios.put<WithMessage<UserRO>>(`${UsersApi.apiUrl}/profile-update`, payload, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async preferencesUpdate(payload: PreferencesUpdateDto) {\n    const response = await axios.put<UserRO>(`${UsersApi.apiUrl}/preferences-update`, payload, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  /**\n   * Api call that can be done from frontend server and from client browser\n   * It gets different includes depending on context\n   * @param req\n   * @param includes {string[]} - list of data to pull additionaly to user data (refer to Typescript type)\n   * @param token\n   * @returns {Promise<T>}\n   */\n  static async checkUser(req?: IncomingMessage, includes?: UserIncludes[], token?: string) {\n    const headers: OutgoingHttpHeaders = {};\n\n    if (req && req.headers) {\n      headers.cookie = req.headers.cookie;\n\n      if (token) {\n        headers.Authorization = `Bearer ${token}`;\n      }\n\n      // eslint-disable-next-line no-param-reassign\n      includes = [\n        'favourites',\n        'userDetails',\n        'userMetadata',\n        'subscriptions',\n        'teamMember',\n        'text',\n        'timer',\n        'highRiskTransactions',\n      ];\n    }\n\n    return UsersApi.getUser(headers, includes);\n  }\n}\n","import styled, { css } from 'styled-components';\nimport rwd, { Breakpoint } from 'app/styles/rwd';\n\nexport interface GridContainerProps {\n  fluid?: boolean;\n  center?: boolean;\n  white?: boolean;\n  lightGrey?: boolean;\n  relative?: boolean;\n}\n\nexport const GridContainer = styled.div<GridContainerProps>`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: auto;\n  max-width: 290px;\n\n  ${rwd[Breakpoint.SMALL]`\n    max-width: 540px;\n  `}\n\n  ${rwd[Breakpoint.MEDIUM]`\n    max-width: 720px;\n  `}\n\n  ${rwd[Breakpoint.LARGE]`\n    max-width: 960px;\n  `}\n  \n  ${(props) => props.fluid && css`\n    max-width: none !important;\n  `}\n  \n  ${(props) => props.center && css`\n    align-items: center;\n  `}\n  \n  ${(props) => props.white && css`\n    background-color: ${props.theme.colors.white};\n  `}\n  \n  ${(props) => props.lightGrey && css`\n    background-color: ${props.theme.colors.lightGrey1};\n  `}\n  \n  ${(props) => props.relative && css`\n    position: relative;\n  `}\n`;\n\nexport interface RowProps {\n  center?: boolean;\n}\n\nexport const Row = styled.div<RowProps>`\n  width: 100%;\n  display: flex;\n  \n  ${(props) => props.center && css`\n    justify-content: center;\n  `}\n`;\n\nexport interface WrapperProps {\n  doubleSpace?: boolean;\n  tripleSpace?: boolean;\n  halfSpace?: boolean;\n  fullWidth?: boolean;\n}\n\nexport const GridWrapper = styled.div<WrapperProps>`\n  padding-bottom: 22px;\n\n  ${(props) => props.doubleSpace && `\n    padding-bottom: 44px;\n  `}\n  \n  ${(props) => props.tripleSpace && `\n    padding-bottom: 66px;\n  `}\n\n  ${(props) => props.halfSpace && `\n    padding-bottom: 12px;\n  `}\n  \n  ${(props) => props.fullWidth && `\n    width: 100%;\n  `}\n`;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport createSelector from 'selectorator';\nimport { RootState } from 'app/redux';\nimport { PlayersState, Player } from './players.interfaces';\nimport { getPlayers } from '.';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const getPlayerInstance = createSelector<[RootState, { id: string }], Player | undefined>(\n  [getPlayers, { path: 'id', argIndex: 1 }],\n  ({ players, playersHomepage, useHomepage }: PlayersState, playerId: string) => {\n    if (useHomepage) {\n      return playersHomepage.find((player) => player.id === playerId);\n    }\n    return players.find((player) => player.id === playerId);\n  },\n);\n\n// eslint-disable-next-line import/prefer-default-export\nexport const getPlayersAreLoaded = createSelector<RootState, boolean>(\n  [getPlayers],\n  ({ players }: PlayersState) => players.every((player) => player.isLoaded),\n);\n","import styled, { css } from 'styled-components';\n\ninterface ButtonIconProps {\n  left?: boolean;\n  right?: boolean;\n}\n\nexport const ButtonIcon = styled.span<ButtonIconProps>`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  transition: margin ${(props) => props.theme.transition};\n  \n  ${(props) => props.left && css`\n    margin-left: 0;\n    left: 12px;\n  `}\n\n  ${(props) => props.right && css`\n    right: 12px;\n  `}\n  \n  svg {\n    width: 16px;\n    height: 16px;\n  }\n`;\n\nexport interface GhostButtonProps {\n  disabled?: boolean;\n  active?: boolean;\n  iconButton?: boolean;\n  white?: boolean;\n  big?: boolean;\n  upgrade?: boolean;\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const GhostButton = styled.button<GhostButtonProps>`\n  display: inline-flex;\n  padding: 5px 13px;\n  color: ${(props) => props.theme.colors.white};\n  font-size: 13px;\n  font-weight: 500;\n  border-radius: 13px;\n  background-color: ${(props) => props.theme.colors.black04};\n  border-width: 0;\n  cursor: pointer;\n  transition: ${(props) => props.theme.transition} background-color;\n  line-height: 15px;\n  user-select: none;\n\n  &:hover {\n    background-color: ${(props) => props.theme.colors.black16};\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  ${(props) => props.disabled && css`\n    color: ${props.theme.colors.white50};\n    cursor: pointer;\n    \n    &:hover {\n      background-color: ${props.theme.colors.black04};\n      cursor: pointer;\n    }\n  `}\n\n  ${(props) => props.active && css`\n    background-color: ${props.theme.colors.black16};\n    font-weight: 600;\n  `}\n\n  ${(props) => props.iconButton && css`\n    padding: 5px 6px;\n    font-size: 14px;\n  `}\n  \n  ${(props) => props.iconButton && props.disabled && css`\n    color: ${props.theme.colors.white};\n    \n    svg {\n      opacity: 0.5;\n    }\n  `}\n\n  ${(props) => props.white && css`\n    background-color: ${props.theme.colors.white15};\n\n    &:hover {\n      background-color: ${props.theme.colors.white30};\n    }\n  `}\n  \n  ${(props) => props.big && css`\n    padding: 14px 30px;\n    font-size: 14px;\n    line-height: 16px;\n    border-radius: 22px;\n  `}\n  \n  ${(props) => props.upgrade && css`\n    font-weight: 700;\n    font-size: 14px;\n    padding: 10px 20px;  \n    border-radius: 18px;\n    margin-right: 24px;\n    width: 100px;\n    height: 36px;\n    \n    &:hover {\n      box-shadow: 0 2px 4px ${props.theme.colors.black05};\n    }\n  `}\n`;\n\ninterface OutlineButtonProps {\n  href?: string;\n}\n\nexport const OutlineButton = styled.button<OutlineButtonProps>`\n  width: 100%;\n  display: inline-block;\n  border: 1px solid ${(props) => props.theme.colors.black16};\n  border-radius: 18px;\n  background-color: transparent;\n  font-size: 13px;\n  font-weight: 600;\n  line-height: 34px;\n  text-align: center;\n  position: relative;\n  cursor: pointer;\n  text-decoration: none;\n  color: ${(props) => props.theme.colors.lightGrey1};\n  \n  &:hover {\n    &::before {\n      opacity: 1;\n    }\n  }\n\n  &:focus {\n    outline: none;\n  }\n  \n  &::before {\n    content: '';\n    position: absolute;\n    top: -1px;\n    left: -1px;\n    right: -1px;\n    bottom: -1px;\n    border-radius: 18px;\n    border: 2px solid ${(props) => props.theme.colors.primary};\n    opacity: 0;\n    transition: opacity ${(props) => props.theme.transition}, border-color ${(props) => props.theme.transition};\n  }\n`;\n\nexport interface SolidButtonProps {\n  red?: boolean;\n  inline?: boolean;\n  flat?: boolean;\n  white?: boolean;\n  icon?: boolean;\n  withShadow?: boolean;\n  disabled?: boolean;\n  withSimpleShadow?: boolean;\n\n  href?: string;\n  target?: string;\n}\n\nexport const SolidButton = styled.button<SolidButtonProps>`\n  width: 100%;\n  padding: 0;\n  color: ${(props) => props.theme.colors.white};\n  background-color: ${(props) => props.theme.colors.primary};\n  border: none;\n  border-radius: 18px;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 36px;\n  text-align: center;\n  position: relative;\n  cursor: pointer;\n  transition: background-color ${(props) => props.theme.transition};\n  text-decoration: none;\n  display: inline-block;\n  \n  &:hover {\n    background-color: ${(props) => props.theme.colors.primaryDark};\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  ${(props) => props.red && css`\n    background-color: ${props.theme.colors.red1};\n\n    &:hover {\n      background-color: ${props.theme.colors.red2};\n    }\n  `}\n\n  ${(props) => props.inline && css`\n    width: auto;\n    padding: 0 26px;\n  `}\n\n  ${(props) => props.flat && css`\n    line-height: 26px;\n    font-weight: 600;\n    font-size: 13px;\n  `}\n  \n  ${(props) => props.white && css`\n    color: ${props.theme.colors.primary};\n    background-color: ${props.theme.colors.white};\n\n    &:hover {\n      background-color: ${props.theme.colors.white};\n    }\n  `}\n  \n  ${(props) => props.icon && css`\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    height: 36px;\n  `}\n  \n  ${(props) => props.withShadow && css`\n    box-shadow: 0 2px 4px ${props.theme.colors.black05};\n    transition: background-color ${props.theme.transition}, box-shadow ${props.theme.transition};\n    \n    &:hover {\n      box-shadow: 0 2px 4px ${props.theme.colors.black25};\n    }\n  `}\n  \n  ${(props) => props.disabled && css`\n    color: ${props.theme.colors.white50};\n    cursor: not-allowed;\n    \n    &:hover {\n      color: ${props.theme.colors.white50};\n      background-color: ${props.theme.colors.primary};\n    }\n  `}\n  \n  ${(props) => props.withSimpleShadow && css`\n    box-shadow: 0 2px 4px ${props.theme.colors.black05};\n\n    &:hover {\n      box-shadow: 0 2px 4px ${props.theme.colors.black05};\n    }\n  `}\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  margin: 0 -4px;\n\n  ${GhostButton},\n  ${SolidButton},\n  ${OutlineButton} {\n    margin: 0 4px;\n  }\n`;\n","import { SubscriptionsState } from './subscriptions.interfaces';\n\nconst state: SubscriptionsState = {\n  plans: [],\n  isLoadingPlans: false,\n\n  currentSubscription: undefined,\n\n  paymentHistory: [],\n\n  teamMembers: [],\n\n  highRiskTransaction: undefined,\n  highRiskTransactionModalIsOpen: false,\n};\n\nexport default state;\n","import { createSlice } from 'redux-starter-kit';\nimport state from './subscriptions.state';\nimport {\n  setSubscriptionPlansReducer,\n  setIsLoadingPlansReducer,\n  setSubscriptionReducer,\n  setPaymentHistoryReducer,\n  setTeamMembersReducer,\n  addTeamMemberReducer,\n  removeTeamMemberReducer,\n  resetSubscriptionsReducer,\n  setHighRiskTransactionReducer,\n  setHighRiskTransactionModalIsOpenReducer,\n  setUserWasSubscriberReducer,\n} from './subscriptions.reducers';\n\nconst subscriptionsSlice = createSlice({\n  slice: 'subscriptions',\n\n  initialState: state,\n\n  reducers: {\n    setSubscriptionPlans: setSubscriptionPlansReducer,\n    setIsLoadingPlans: setIsLoadingPlansReducer,\n    setSubscription: setSubscriptionReducer,\n    setPaymentHistory: setPaymentHistoryReducer,\n    setTeamMembers: setTeamMembersReducer,\n    addTeamMember: addTeamMemberReducer,\n    removeTeamMember: removeTeamMemberReducer,\n    resetSubscriptions: resetSubscriptionsReducer,\n    setHighRiskTransaction: setHighRiskTransactionReducer,\n    setHighRiskTransactionModalIsOpen: setHighRiskTransactionModalIsOpenReducer,\n    setUserWasSubscriber: setUserWasSubscriberReducer,\n  },\n});\n// Extract the action creators object and the reducer\nconst { actions, reducer, selectors } = subscriptionsSlice;\n// Extract and export each action creator by name\nexport const {\n  setSubscriptionPlans,\n  setIsLoadingPlans,\n  setSubscription,\n  setPaymentHistory,\n  setTeamMembers,\n  addTeamMember,\n  removeTeamMember,\n  resetSubscriptions,\n  setHighRiskTransaction,\n  setHighRiskTransactionModalIsOpen,\n  setUserWasSubscriber,\n} = actions;\n\nexport const { getSubscriptions } = selectors;\n// Export the reducer, either as a default or named export\nexport default reducer;\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from 'redux-starter-kit';\nimport {\n  SubscriptionsState,\n  SetSubscriptionPlansPayload,\n  SetSubscriptionPayload,\n  SetPaymentsHistoryPayload,\n  SetTeamMembersPayload,\n  AddTeamMemberPayload,\n  RemoveTeamMemberPayload,\n  SetHighRiskTransactionPayload,\n  SetHighRiskTransactionModalIsOpenPayload,\n  SetUserWasSubscriberPayload,\n} from './subscriptions.interfaces';\nimport initialState from './subscriptions.state';\nimport { IsLoadingPayload } from '../common/isLoading.interface';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const setSubscriptionPlansReducer = (\n  state: SubscriptionsState, action: PayloadAction<SetSubscriptionPlansPayload>,\n) => {\n  state.plans = action.payload.plans;\n};\n\nexport const setIsLoadingPlansReducer = (\n  state: SubscriptionsState, action: PayloadAction<IsLoadingPayload>,\n) => {\n  state.isLoadingPlans = action.payload.isLoading;\n};\n\nexport const setSubscriptionReducer = (\n  state: SubscriptionsState, action: PayloadAction<SetSubscriptionPayload>,\n) => {\n  state.currentSubscription = action.payload.subscription;\n};\n\nexport const setPaymentHistoryReducer = (\n  state: SubscriptionsState, action: PayloadAction<SetPaymentsHistoryPayload>,\n) => {\n  state.paymentHistory = action.payload.paymentHistory;\n};\n\nexport const setTeamMembersReducer = (\n  state: SubscriptionsState, action: PayloadAction<SetTeamMembersPayload>,\n) => {\n  state.teamMembers = action.payload.teamMembers;\n};\n\nexport const addTeamMemberReducer = (\n  state: SubscriptionsState, action: PayloadAction<AddTeamMemberPayload>,\n) => {\n  state.teamMembers.push(action.payload.teamMember);\n};\n\nexport const removeTeamMemberReducer = (\n  state: SubscriptionsState, action: PayloadAction<RemoveTeamMemberPayload>,\n) => {\n  state.teamMembers = state.teamMembers.filter(\n    (teamMember) => teamMember.uuid !== action.payload.uuid,\n  );\n};\n\nexport const resetSubscriptionsReducer = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  state: SubscriptionsState,\n) => {\n  state = initialState;\n};\n\nexport const setHighRiskTransactionReducer = (\n  state: SubscriptionsState, action: PayloadAction<SetHighRiskTransactionPayload>,\n) => {\n  state.highRiskTransaction = action.payload.highRiskTransaction;\n};\n\nexport const setHighRiskTransactionModalIsOpenReducer = (\n  state: SubscriptionsState, action: PayloadAction<SetHighRiskTransactionModalIsOpenPayload>,\n) => {\n  state.highRiskTransactionModalIsOpen = action.payload.highRiskTransactionModalIsOpen;\n};\n\nexport const setUserWasSubscriberReducer = (\n  state: SubscriptionsState, action: PayloadAction<SetUserWasSubscriberPayload>,\n) => {\n  state.wasSubscriber = action.payload.wasSubscriber;\n};\n","import config from '../../../config/config';\nimport webAudioTouchUnlock from '../../../utils/webAudioTouchUnlock';\nimport {isSafariDesktop} from \"../../../utils/mobileDetect\";\n\nconst cachedBuffers: {[key: string]: AudioBuffer | null} = {\n  timeEndNotification: null,\n  breakEndNotification: null,\n};\n\nlet audioContext: AudioContext;\n\n/**\n * Function that initialize audio buffer for sound from url\n * @param url\n * @returns {Promise<null | AudioBuffer>}\n */\nconst prepareWebAudioContext = async (url: string) => {\n  if (!audioContext) {\n    return null;\n  }\n  const resp = await fetch(url);\n  const buffer = await resp.arrayBuffer();\n\n  const decodedBuffer = await new Promise<AudioBuffer>(\n    resolve => audioContext.decodeAudioData(buffer, decodedData => resolve(decodedData)),\n  );\n\n  return decodedBuffer;\n};\n\n/**\n * Function that get audio buffer and cache it\n * Also it connects buffer to audio context\n * @param key\n * @param url\n * @returns {Promise<AudioBufferSourceNode | null>}\n */\nconst getSourceBuffer = async (key: keyof typeof cachedBuffers, url: string) => {\n  let buffer;\n  if (!cachedBuffers[key]) {\n    buffer = await prepareWebAudioContext(url);\n    if (!buffer) {\n      return null;\n    }\n    cachedBuffers[key] = buffer;\n  }\n  buffer = cachedBuffers[key];\n  const sourceBuffer = audioContext.createBufferSource();\n  sourceBuffer.buffer = buffer;\n  sourceBuffer.connect(audioContext.destination);\n  if (audioContext.state === 'suspended') {\n    audioContext.resume();\n  }\n  try {\n    return sourceBuffer;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const playWebAudioTimeEndNotification: () => Promise<AudioBufferSourceNode | null> = () => {\n  if (isSafariDesktop()) {\n    // Need to use the audio el and audio el is mocked as audio buffer source node for compability\n    return new Promise((resolve) => {\n      const audioEl = document.getElementById('noisli-timer-end');\n      if (audioEl === null) {\n        return resolve(null);\n      }\n      (audioEl as any).start = (audioEl as HTMLAudioElement).play;\n      resolve(audioEl as unknown as AudioBufferSourceNode);\n    });\n  }\n  return getSourceBuffer('timeEndNotification', config.timeEndNotificationUrl);\n}\n\nexport const playWebAudioBreakEndNotification: () => Promise<AudioBufferSourceNode | null> = () => {\n  if (isSafariDesktop()) {\n    // Need to use the audio el and audio el is mocked as audio buffer source node for compability\n    return new Promise((resolve) => {\n      const audioEl = document.getElementById('noisli-break-end');\n      if (audioEl === null) {\n        return resolve(null);\n      }\n      (audioEl as any).start = (audioEl as HTMLAudioElement).play;\n      resolve(audioEl as unknown as AudioBufferSourceNode);\n    });\n  }\n  return getSourceBuffer('breakEndNotification', config.breakEndNotificationUrl);\n}\n\nif (typeof window !== 'undefined') {\n  try {\n    // Fix up for prefixing\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.AudioContext = window.AudioContext || (window as any).webkitAudioContext;\n    audioContext = new AudioContext();\n    webAudioTouchUnlock(audioContext).then(() => {\n      getSourceBuffer('timeEndNotification', config.timeEndNotificationUrl);\n      getSourceBuffer('breakEndNotification', config.breakEndNotificationUrl);\n    });\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Web Audio API is not supported in this browser');\n  }\n}\n","/**\n * iOS web audio unlocker\n * source: https://github.com/pavle-goloskokovic/web-audio-touch-unlock/\n * @param context\n */\nexport default function webAudioTouchUnlock(context: AudioContext) {\n  return new Promise <boolean>((resolve, reject) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any,max-len\n    if (!context || !(context instanceof ((window as any).AudioContext || (window as any).webkitAudioContext))) {\n      reject(new Error('WebAudioTouchUnlock: You need to pass an instance of AudioContext to this method call'));\n      return;\n    }\n\n    if (context.state === 'suspended' && 'ontouchstart' in window) {\n      const unlock = () => {\n        context.resume().then(() => {\n          document.body.removeEventListener('touchstart', unlock);\n          document.body.removeEventListener('touchend', unlock);\n          document.body.removeEventListener('click', unlock);\n\n          resolve(true);\n        },\n        (reason) => {\n          reject(reason);\n        });\n      };\n\n      document.body.addEventListener('touchstart', unlock, false);\n      document.body.addEventListener('touchend', unlock, false);\n      document.body.addEventListener('click', unlock, false);\n    } else {\n      resolve(false);\n    }\n  });\n}\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { ThunkAction } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport Push from 'push.js';\nimport {\n  AccountType,\n  SharedComboFavourite,\n  SharedComboPlaylist,\n  ShareType,\n  TimerCombo,\n  TimerConfig,\n  TimerType,\n} from '@noisli/common';\nimport dayjs from 'dayjs';\nimport { RootState } from '../../index';\nimport {\n  pauseTimer,\n  reloadTimerConfig,\n  resumeTimer,\n  setActiveTimerCombo,\n  setActualTime,\n  setCurrentTimerType,\n  setSessionsCompleted,\n  setSessionsForDay,\n  setTimerConfig,\n  setTimerIsActive,\n  setTimerTitle,\n  startTimer,\n  stopTimer,\n  updateTimerConfig,\n  setAllSessionsCompleted,\n  incrementAllSessionsCompleted,\n  resetSavedSessionState,\n} from '.';\nimport {\n  formatActualTime, formatSessionTime, sendPushNotification, setTimerPageTitle,\n} from './timer.helpers';\nimport { setMasterPlayerIsMutedThunk, setPlayerPlayingThunk } from '../players/players.thunks';\nimport { getActiveFavourite } from '../favourites/favourites.selectors';\nimport { getActivePlaylist, getActivePlaylistCombo } from '../playlists/playlists.selectors';\nimport { ComboItem } from '../common/combos.interfaces';\nimport { setShowSoundsLockedModal } from '../base';\nimport { setPlayerVolume, stopAllPlayers } from '../players';\nimport { markActivePlaylistCombo, setPlaylistsSliderPosition } from '../playlists';\nimport { markActiveFavourite } from '../favourites';\nimport TimerApi from '../../../Api/Timer.api';\nimport { playWebAudioBreakEndNotification, playWebAudioTimeEndNotification } from './timer.webAudio';\n\n/**\n * Thunk that gets sessions made by user today\n * and add them to session completed for day\n * Also gets all sessions completed of user\n * @returns {(dispatch, getState) => Promise<void>}\n */\nexport const getSessionCountForDayThunk = (\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (dispatch, getState) => {\n  const { timer } = getState();\n  // if (timer.sessionsForDay !== undefined) {\n  //   return;\n  // }\n\n  const data = await TimerApi.getSessionCountForDay({\n    day: dayjs().format('YYYY-MM-DD'),\n  });\n\n  dispatch(setSessionsForDay({\n    sessionsForDay: data.sessionCount,\n  }));\n\n  dispatch(setAllSessionsCompleted({\n    allSessionsCompleted: data.allTimeSessionCount,\n  }));\n};\n\nexport const startTimerThunk = (\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (dispatch, getState) => {\n  const state = getState();\n\n  if (!state.timer.timerConfig.wasTimerRun) {\n    dispatch(updateTimerConfig({\n      timerConfig: {\n        wasTimerRun: true,\n      },\n    }));\n  }\n\n  dispatch(startTimer());\n  dispatch(setTimerIsActive({\n    isActive: true,\n  }));\n};\n\nexport const pauseTimerThunk = (\n): ThunkAction<void, RootState, null, AnyAction> => (dispatch, getState) => {\n  const { users, players, timer } = getState();\n\n  if (!players.masterController.isMuted) {\n    dispatch(setMasterPlayerIsMutedThunk({\n      isMuted: true,\n      mutedByTimer: true,\n    }));\n  }\n\n  dispatch(pauseTimer());\n\n  if (users.user.accountType !== AccountType.FREE && timer.timerConfig.showTimerOnBrowserTab) {\n    dispatch(setTimerTitle({\n      title: 'Paused',\n    }));\n  }\n};\n\nexport const resumeTimerThunk = (\n): ThunkAction<void, RootState, null, AnyAction> => (dispatch, getState) => {\n  const { players } = getState();\n\n  if (players.masterController.isMuted) {\n    dispatch(setMasterPlayerIsMutedThunk({\n      isMuted: false,\n      mutedByTimer: true,\n    }));\n  }\n\n  dispatch(resumeTimer());\n};\n\n/**\n * This thunk is similar in construction as {createSharedComboThunk}\n * @returns {(dispatch, getState) => (any[])}\n */\nexport const setActiveComboInTimerThunk = (\n): ThunkAction<ComboItem[], RootState, null, AnyAction> => (dispatch, getState) => {\n  const state = getState();\n  const activeFavourite = getActiveFavourite(state);\n  const activePlaylist = getActivePlaylist(state);\n  let timerCombo: TimerCombo = {} as unknown as TimerCombo;\n\n  const items = state.players.players.filter((player) => player.isPlaying).map((player) => ({\n    id: player.id,\n    volume: player.volume,\n  }));\n\n  if (!items.length) {\n    return [];\n  }\n\n  if (!state.timer.timerConfig.wasTimerRun) {\n    return items;\n  }\n\n  if (activeFavourite) {\n    timerCombo = {\n      type: ShareType.FAVOURITE,\n      content: {\n        favourite: {\n          id: activeFavourite.id,\n          name: activeFavourite.name,\n        },\n        items: activeFavourite.items,\n      },\n    };\n  } else if (activePlaylist) {\n    const activePlaylistCombo = getActivePlaylistCombo(state);\n\n    if (activePlaylistCombo) {\n      timerCombo = {\n        type: ShareType.PLAYLIST,\n        content: {\n          items: activePlaylistCombo.items,\n          playlist: {\n            name: activePlaylist.name,\n            id: activePlaylist.id,\n            comboId: activePlaylistCombo.id,\n          },\n        },\n      };\n    }\n  } else {\n    timerCombo = {\n      type: ShareType.CUSTOM_COMBO,\n      content: {\n        items,\n      },\n    };\n  }\n\n  dispatch(setActiveTimerCombo({\n    timerCombo,\n  }));\n\n  return items;\n};\n\n/**\n * This thunk is similar in behavior as {setSharedComboPlayingThunk}\n * @returns {(dispatch, getState) => void}\n */\nexport const setTimerComboPlayingThunk = (\n\n): ThunkAction<void, RootState, null, AnyAction> => (dispatch, getState) => {\n  const { timer, playlists, users } = getState();\n  const { activeCombo } = timer;\n\n  if (!activeCombo) {\n    return;\n  }\n\n  if (activeCombo.type === ShareType.PLAYLIST) {\n    const playlistId = (activeCombo.content.playlist as SharedComboPlaylist).id;\n    const playlistToPlay = playlists.playlists.find((playlist) => playlist.id === playlistId);\n\n    if (playlistToPlay && playlistToPlay.pro && users.user.accountType === AccountType.FREE) {\n      dispatch(setShowSoundsLockedModal({\n        showSoundsLockedModal: true,\n      }));\n      dispatch(setActiveTimerCombo({\n        timerCombo: undefined,\n      }));\n      return;\n    }\n\n    if (playlistToPlay) {\n      dispatch(setPlaylistsSliderPosition({\n        position: playlists.playlists.indexOf(playlistToPlay),\n      }));\n    }\n  }\n\n  dispatch(stopAllPlayers());\n\n  activeCombo.content.items.forEach((item) => {\n    dispatch(setPlayerVolume({\n      id: item.id,\n      volume: item.volume,\n    }));\n    dispatch(setPlayerPlayingThunk({\n      id: item.id,\n      isPlaying: true,\n    }));\n  });\n\n  switch (activeCombo.type) {\n    case ShareType.PLAYLIST:\n      dispatch(markActivePlaylistCombo({\n        playlistId: (activeCombo.content.playlist as SharedComboPlaylist).id,\n        comboId: (activeCombo.content.playlist as SharedComboPlaylist).comboId,\n      }));\n\n      break;\n\n    case ShareType.FAVOURITE:\n      dispatch(markActiveFavourite({\n        id: (activeCombo.content.favourite as SharedComboFavourite).id,\n      }));\n      break;\n\n    default:\n      break;\n  }\n};\n\n/**\n * Large thunk that is responsible for handling all state changes that goes after timer is stopped\n *\n * @param isCancelled\n * @param isSkipped\n * @returns {(dispatch, getState) => void}\n */\nexport const stopTimerThunk = (\n  isCancelled = false,\n  isSkipped = false,\n): ThunkAction<void, RootState, null, AnyAction> => (dispatch, getState) => {\n  const {\n    timer, users, players,\n  } = getState();\n  const { user } = users;\n  const { masterController } = players;\n  const { timerConfig, sessionsCompleted, activeCombo, isPaused } = timer;\n  const {\n    time, longBreak, shortBreak, workInSession,\n  } = timerConfig;\n  const isUserFree = user.accountType === AccountType.FREE;\n  const previousTimerType = timer.currentTimerType;\n\n  let currentTimerType = TimerType.Session;\n\n  if (isCancelled) {\n    dispatch(setActiveComboInTimerThunk());\n    dispatch(setTimerIsActive({\n      isActive: false,\n    }));\n\n    if (isPaused) {\n      dispatch(stopAllPlayers());\n    }\n  }\n\n  const isLongBreakSkipped = timer.currentTimerType === TimerType.LongBreak && isSkipped;\n\n  // if user is not free and work in session is active, change timer type\n  if (!isUserFree && timerConfig.workInSession && !isCancelled) {\n    if (timer.currentTimerType === TimerType.Session) {\n      if (sessionsCompleted + 1 === timerConfig.sessionsCount) {\n        currentTimerType = TimerType.LongBreak;\n      } else {\n        currentTimerType = TimerType.ShortBreak;\n      }\n    } else {\n      currentTimerType = TimerType.Session;\n    }\n  }\n\n  dispatch(setCurrentTimerType({\n    currentTimerType,\n  }));\n\n  // get current time of timer type from config\n  let actualTime = formatActualTime(time.hours, time.minutes, time.seconds);\n\n  if (currentTimerType === TimerType.ShortBreak) {\n    actualTime = formatActualTime(shortBreak.hours, shortBreak.minutes, shortBreak.seconds);\n  } else if (currentTimerType === TimerType.LongBreak) {\n    actualTime = formatActualTime(longBreak.hours, longBreak.minutes, longBreak.seconds);\n  }\n\n  dispatch(stopTimer({\n    isCancelled,\n    isLongBreakSkipped,\n  }));\n\n  dispatch(setActualTime({\n    actualTime,\n  }));\n\n  // if session was not cancelled, save it\n  if (!isCancelled) {\n    dispatch(setSessionsForDay({\n      sessionsForDay: timer.sessionsForDay ? timer.sessionsForDay + 1 : 1,\n    }));\n\n    dispatch(incrementAllSessionsCompleted());\n  }\n\n  // if work in session is enabled, save session as completed or reset if type was long break\n  if (!isCancelled && !isUserFree && workInSession) {\n    if (previousTimerType === TimerType.Session) {\n      dispatch(setSessionsCompleted({\n        sessionsCompleted: sessionsCompleted + 1,\n      }));\n    }\n\n    if (previousTimerType === TimerType.LongBreak) {\n      dispatch(setSessionsCompleted({\n        sessionsCompleted: 0,\n      }));\n    }\n  }\n\n  // if work in session and autostart is enabled, run next session\n  if (!isCancelled && !isUserFree && timerConfig.workInSession\n    && timerConfig.autoStart && previousTimerType !== TimerType.LongBreak\n  ) {\n    dispatch(startTimerThunk());\n\n    // if next session is of type session, play last played combo\n    if (currentTimerType === TimerType.Session && !!activeCombo && !masterController.isPlaying) {\n      dispatch(setTimerComboPlayingThunk());\n    }\n  }\n\n  // if user set time end notification, play it now\n  if (!isCancelled && !isUserFree && timerConfig.timeEndNotification\n    && previousTimerType === TimerType.Session\n  ) {\n    playWebAudioTimeEndNotification().then((sound) => sound?.start(0));\n  }\n\n  // if user set break end notifiaction, play it now\n  if (!isCancelled && !isUserFree && timerConfig.breakEndNotification\n    && previousTimerType !== TimerType.Session\n  ) {\n    playWebAudioBreakEndNotification().then((sound) => sound?.start(0));\n  }\n\n  // if user set web notifications, push it now\n  if (!isCancelled && !isUserFree && timerConfig.webNotification && Push.Permission.has()) {\n    sendPushNotification(previousTimerType);\n  }\n\n  // if user set show timer on browser tab and does not use autostart, set title now\n  if (!isUserFree && timerConfig.showTimerOnBrowserTab && !timerConfig.autoStart) {\n    dispatch(setTimerTitle({\n      title: setTimerPageTitle(\n        currentTimerType,\n        actualTime,\n        true,\n      ),\n    }));\n  }\n\n  // if session that was stopped right now was not cancelled, save completed session for today\n  if (!isCancelled && previousTimerType === TimerType.Session) {\n    TimerApi.saveCompletedSession({\n      day: dayjs().format('YYYY-MM-DD'),\n    });\n  }\n\n  // if user set show timer on browser tab and is not working in session\n  if (!isUserFree && timerConfig.showTimerOnBrowserTab && !isCancelled\n    && (!timerConfig.workInSession || previousTimerType !== TimerType.Session)\n  ) {\n    dispatch(setTimerTitle({\n      title: formatSessionTime(actualTime),\n    }));\n  }\n\n  // set title if timer was cancelled\n  if (!isUserFree && timerConfig.showTimerOnBrowserTab && isCancelled) {\n    dispatch(setTimerTitle({\n      title: formatSessionTime(actualTime),\n    }));\n  }\n\n  // update config if timer was not cancelled\n  if (!isCancelled) {\n    const curState = getState();\n    dispatch(updateTimerConfig({\n      timerConfig: {\n        savedSessionState: {\n          sessionCount: curState.timer.sessionsCompleted,\n          sessionType: curState.timer.currentTimerType,\n        },\n      },\n    }));\n  }\n};\n\nexport const dismissSessionThunk = (\n): ThunkAction<void, RootState, null, AnyAction> => async (dispatch, getState) => {\n  const { players } = getState();\n\n  dispatch(stopTimerThunk(true));\n\n  if (players.masterController.isMuted) {\n    setTimeout(() => {\n      dispatch(setMasterPlayerIsMutedThunk({\n        isMuted: false,\n      }));\n    }, 500);\n  }\n\n  dispatch(setSessionsCompleted({\n    sessionsCompleted: 0,\n  }));\n\n  dispatch(resetSavedSessionState());\n};\n\n/**\n * Thunk that sets timer config recived from db\n * It respects if timer is running or not and drop update if timer is runnig\n * @param timerConfig\n * @returns {(dispatch, getState) => Promise<void>}\n */\nexport const setTimerConfigThunk = (\n  timerConfig: TimerConfig,\n): ThunkAction<void, RootState, null, AnyAction> => async (dispatch, getState) => {\n  dispatch(setTimerConfig({\n    timerConfig,\n  }));\n\n  const state = getState();\n  const { isActive } = state.timer;\n  let { actualTime } = state.timer;\n\n  if (!isActive) {\n    if (timerConfig.savedSessionState?.sessionType !== undefined) {\n      dispatch(setCurrentTimerType({\n        currentTimerType: timerConfig.savedSessionState.sessionType,\n      }));\n      dispatch(setSessionsCompleted({\n        sessionsCompleted: timerConfig.savedSessionState.sessionCount,\n      }));\n\n      const { time, shortBreak, longBreak } = timerConfig;\n\n      actualTime = formatActualTime(time.hours, time.minutes, time.seconds);\n\n      if (timerConfig.savedSessionState.sessionType === TimerType.ShortBreak) {\n        actualTime = formatActualTime(shortBreak.hours, shortBreak.minutes, shortBreak.seconds);\n      } else if (timerConfig.savedSessionState.sessionType === TimerType.LongBreak) {\n        actualTime = formatActualTime(longBreak.hours, longBreak.minutes, longBreak.seconds);\n      }\n\n      dispatch(setActualTime({\n        actualTime,\n      }));\n    }\n\n    if (!isActive && timerConfig.showTimerOnBrowserTab) {\n      dispatch(setTimerTitle({\n        title: formatSessionTime(actualTime),\n      }));\n    }\n  }\n};\n\nexport const updateTimerConfigThunk = (\n  timerConfig: Partial<TimerConfig>,\n): ThunkAction<void, RootState, null, AnyAction> => async (dispatch, getState) => {\n  dispatch(updateTimerConfig({\n    timerConfig,\n  }));\n\n  const state = getState();\n  const { isRunning, actualTime } = state.timer;\n\n  if (!isRunning && timerConfig.showTimerOnBrowserTab) {\n    dispatch(setTimerTitle({\n      title: formatSessionTime(actualTime),\n    }));\n  }\n};\n\nexport const reloadTimerConfigThunk = (\n  timerConfig: Partial<TimerConfig>,\n): ThunkAction<void, RootState, null, AnyAction> => async (dispatch, getState) => {\n  dispatch(reloadTimerConfig({\n    timerConfig,\n  }));\n\n  const state = getState();\n  const { isRunning, actualTime } = state.timer;\n\n  if (!isRunning && timerConfig.showTimerOnBrowserTab) {\n    dispatch(setTimerTitle({\n      title: formatSessionTime(actualTime),\n    }));\n  }\n};\n\nexport const saveReplayCount = (): ThunkAction<void, RootState, null, AnyAction> => async (dispatch) => {\n  const timerConfig = await TimerApi.getConfig();\n  dispatch(updateTimerConfigThunk({\n    replayCount: timerConfig.replayCount + 1,\n  }));\n};\n","import styled, { css } from 'styled-components';\nimport rwd, { Breakpoint } from 'app/styles/rwd';\n\nexport const ModalRoot = styled.div`\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10000;\n  background-color: ${(props) => props.theme.colors.black35};\n  overflow: auto;\n`;\n\nexport const Mask = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const Container = styled.div`\n  padding: 44px 12px 62px 12px;\n  overflow: visible;\n  background-color: ${(props) => props.theme.colors.white};\n  display: flex;\n  flex-direction: column;\n  width: 100vw;\n  min-height: 100vh;\n  position: relative;\n  box-shadow: 0 3px 6px ${(props) => props.theme.colors.black20};\n  flex-shrink: 0;\n  \n  ${rwd[Breakpoint.SMALL]`\n    width: 390px;\n    height: auto;\n    min-height: auto;\n    border-radius: 11px;\n    padding: 44px 50px 12px 50px;\n    margin: 88px auto;\n  `}\n`;\n\nexport const CloseButton = styled.button`\n  width: 14px;\n  height: 14px;\n  padding: 0;\n  margin: 0;\n  background-color: transparent;\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  border: none;\n  color: ${(props) => props.theme.colors.lightGrey3};\n  transition: ${(props) => props.theme.transition} color;\n  cursor: pointer;\n  \n  &:hover {\n    color: ${(props) => props.theme.colors.lightGrey1};\n  }\n`;\n\ninterface TitleProps {\n  primary?: boolean;\n  center?: boolean;\n}\n\nexport const Title = styled.p<TitleProps>`\n  font-size: 18px;\n  line-height: 30px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.lightGrey1};\n  text-align: center;\n  margin: 0;\n\n  ${(props) => props.primary && css`\n    color: ${props.theme.colors.primary};\n  `}\n`;\n\nexport const Text = styled.p<TitleProps>`\n  font-size: 13px;\n  line-height: 22px;\n  font-weight: 500;\n  margin: 0;\n  color: ${(props) => props.theme.colors.lightGrey1};\n  \n  ${(props) => props.center && css`\n    text-align: center;\n  `}\n  \n  strong {\n    font-weight: 700;\n    color: ${(props) => props.theme.colors.primary};\n  }\n`;\n","import styled, { css } from 'styled-components';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const Arrow = styled.span`\n  position: absolute;\n  font-size: 6px;\n\n  &::before {\n    content: \"\";\n    margin: auto;\n    display: block;\n    width: 0;\n    height: 0;\n    border-style: solid;\n  }\n`;\n\ninterface TooltipMessageProps {\n  useHomepage?: boolean;\n  white?: boolean;\n}\n\nexport const TooltipMessage = styled.span<TooltipMessageProps>`\n  font-family: ${(props) => props.theme.fontPrimary};\n  font-size: 12px;\n  line-height: 18px;\n  color: ${(props) => props.theme.colors.white};\n\n  strong {\n    color: ${(props) => props.theme.colors.primary};\n    font-weight: 700;\n  }\n  \n  ${(props) => props.useHomepage && css`\n    font-size: 14px;\n    line-height: 16px;\n    font-weight: 600;\n  `}\n  \n  ${(props) => props.white && css`\n    color: ${props.theme.colors.lightGrey1};\n    font-weight: 500;\n  `}\n`;\n\nexport const CancelAction = styled.span`\n  font-size: 12px;\n  line-height: 18px;\n  color: ${(props) => props.theme.colors.lightGrey1};\n  cursor: pointer;\n  \n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nexport const DeleteAction = styled.span`\n  font-size: 12px;\n  line-height: 18px;\n  color: ${(props) => props.theme.colors.red3};\n  cursor: pointer;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\ninterface ActionsWrapperProps {\n  dark?: boolean;\n  team?: boolean;\n}\n\nexport const ActionsWrapper = styled.div<ActionsWrapperProps>`\n  display: flex;\n  justify-content: space-between;\n  padding: 0 10px;\n  \n  ${(props) => props.dark && css`\n    ${CancelAction},\n    ${DeleteAction} {\n      color: ${props.theme.colors.white}\n    }\n  `}\n  \n  ${(props) => props.team && css`\n    padding: 0;\n    justify-content: center;\n    \n    ${CancelAction},\n    ${DeleteAction} {\n      margin: 0 12px;\n    }\n  `}\n`;\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"static/8ede052640bd2bf04ede.worker.js\");\n};","// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  MiddlewareAPI, Dispatch, Action,\n} from 'redux';\nimport { getActiveFavourite } from '@noisli/app/dist/redux/modules/favourites/favourites.selectors';\nimport { setFavourites } from '@noisli/app/dist/redux/modules/favourites';\nimport { PayloadAction } from 'redux-starter-kit';\nimport { Favourite as FavouriteFromApi } from '@noisli/common';\nimport { stopAllPlayers } from '@noisli/app/dist/redux/modules/players';\nimport { RootState } from '../../background';\n\nconst FavouritesObserverMiddleware = (\n  { dispatch, getState }: MiddlewareAPI<Dispatch, RootState>,\n) => (next: Dispatch) => (action: Action) => {\n  const state = getState();\n  const activeFavourite = getActiveFavourite(state);\n\n  switch (action.type) {\n    case (setFavourites.toString()): {\n      const { payload } = (action as PayloadAction<FavouriteFromApi[]>);\n      if (activeFavourite) {\n        const foundActiveFavourite = payload.find(\n          favourite => favourite.uuid === activeFavourite.id,\n        );\n        if (!foundActiveFavourite) {\n          dispatch(stopAllPlayers());\n        }\n      }\n      next(action);\n      break;\n    }\n\n    default:\n      next(action);\n      break;\n  }\n};\n\nexport default FavouritesObserverMiddleware;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  MiddlewareAPI, Dispatch, Action,\n} from 'redux';\nimport { RootState } from '../../background';\nimport { setOfflineState } from '../../modules/chromeExtension';\n\nconst OfflineStateObserverMiddleware = (\n  { dispatch }: MiddlewareAPI<Dispatch, RootState>,\n) => {\n  window.addEventListener('offline', () => {\n    dispatch(setOfflineState({\n      isOffline: true,\n    }));\n  });\n\n  window.addEventListener('online', () => {\n    dispatch(setOfflineState({\n      isOffline: false,\n    }));\n  });\n\n  return (next: Dispatch) => (action: Action) => next(action);\n};\n\nexport default OfflineStateObserverMiddleware;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  MiddlewareAPI, Dispatch, Action,\n} from 'redux';\nimport { setUser } from '@noisli/app/dist/redux/modules/users';\nimport { stopAllPlayers } from '@noisli/app/dist/redux/modules/players';\nimport { PayloadAction } from 'redux-starter-kit';\nimport { User } from '@noisli/common';\nimport { RootState } from '../../background';\n\nconst UserAccountChangeObserver = (\n  { dispatch, getState }: MiddlewareAPI<Dispatch, RootState>,\n) => (next: Dispatch) => (action: Action) => {\n  const state = getState();\n  const actualUser = state.users.user;\n\n  switch (action.type) {\n    case (setUser.toString()): {\n      const { payload } = (action as PayloadAction<User>);\n      if (actualUser.id && actualUser.accountType !== payload.accountType) {\n        // eslint-disable-next-line no-undef\n        dispatch(stopAllPlayers());\n      }\n      next(action);\n      break;\n    }\n\n    default:\n      next(action);\n      break;\n  }\n};\n\nexport default UserAccountChangeObserver;\n","// eslint-disable-next-line import/named\nimport { appReducerFactory, initializeStore, RootState as IRootState } from '@noisli/app/dist/redux';\nimport { alias, wrapStore } from 'webext-redux';\nimport createUserLimitMiddleware from '@noisli/app/dist/redux/middleware/UserLimitMiddleware/UserLimitMiddleware';\nimport aliases from './aliases';\nimport chromeExtensionReducer from '../modules/chromeExtension';\nimport { ChromeExtensionState } from '../modules/chromeExtension/chromeExtension.interfaces';\nimport FavouritesObserverMiddleware from '../middleware/FavouriteObserverMiddleware/FavouriteObserverMiddleware';\nimport OfflineStateObserverMiddleware\n  from '../middleware/OfflineStateObserverMiddleware/OfflineStateObserverMiddleware';\nimport UserAccountChangeObserver from '../middleware/UserAccountChangeObserver/UserAccountChangeObserver';\n\nexport interface RootState extends IRootState {\n  chromeExtension: ChromeExtensionState;\n}\n\nconst store = initializeStore(undefined, [\n  alias(aliases),\n  FavouritesObserverMiddleware,\n  OfflineStateObserverMiddleware,\n  UserAccountChangeObserver,\n  createUserLimitMiddleware(true),\n], appReducerFactory({\n  chromeExtension: chromeExtensionReducer,\n}));\n\nwrapStore(store);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(window as any).noisliStore = store;\n\nexport default store;\n","import { ChromeExtensionPage, ChromeExtensionState } from './chromeExtension.interfaces';\n\nconst state: ChromeExtensionState = {\n  page: ChromeExtensionPage.ONBOARDING,\n  isOffline: false,\n  hasAskForPermission: false,\n};\n\nexport default state;\n","import { createSlice } from 'redux-starter-kit';\nimport { userAccountTypeMismatch } from '@noisli/app/dist/redux/modules/users';\nimport state from './chromeExtension.state';\nimport {\n  setChromeExtensionPageReducer,\n  setOfflineStateReducer,\n  setHasAskForPermissionInSessionReducer,\n} from './chromeExtension.reducers';\n\nconst baseSlice = createSlice({\n  slice: 'chromeExtension',\n\n  initialState: state,\n\n  reducers: {\n    setChromeExtensionPage: setChromeExtensionPageReducer,\n    setOfflineState: setOfflineStateReducer,\n    setHasAskForPermissionInSession: setHasAskForPermissionInSessionReducer,\n  },\n\n  extraReducers: {\n    [userAccountTypeMismatch.toString()]: () => {\n      // eslint-disable-next-line no-undef\n      chrome.runtime.reload();\n    },\n  },\n});\n// Extract the action creators object and the reducer\nconst { actions, reducer, selectors } = baseSlice;\n// Extract and export each action creator by name\nexport const {\n  setChromeExtensionPage,\n  setOfflineState,\n  setHasAskForPermissionInSession,\n} = actions;\n\nexport const { getChromeExtension } = selectors;\n// Export the reducer, either as a default or named export\nexport default reducer;\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from 'redux-starter-kit';\nimport { ChromeExtensionState, SetChromeExtensionPage, SetIsOfflinePayload } from './chromeExtension.interfaces';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const setChromeExtensionPageReducer = (\n  state: ChromeExtensionState, action: PayloadAction<SetChromeExtensionPage>,\n) => {\n  state.page = action.payload.page;\n};\n\nexport const setOfflineStateReducer = (\n  state: ChromeExtensionState, action: PayloadAction<SetIsOfflinePayload>,\n) => {\n  state.isOffline = action.payload.isOffline;\n};\n\nexport const setHasAskForPermissionInSessionReducer = (\n  state: ChromeExtensionState,\n) => {\n  state.hasAskForPermission = true;\n};\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport createSelector from 'selectorator';\nimport { RootState } from 'app/redux';\nimport { Combo } from 'app/redux/modules/common/combos.interfaces';\nimport { getPlaylists } from '.';\nimport { PlaylistsState, Playlist } from './playlists.interfaces';\n\nexport const getActivePlaylist = createSelector<RootState, Playlist | undefined>(\n  [getPlaylists],\n  ({ playlists }: PlaylistsState) => playlists.find((playlist) => playlist.isPlaying),\n);\n\nexport const getActivePlaylistCombo = createSelector<RootState, Combo | undefined>(\n  [getPlaylists],\n  ({ playlists }: PlaylistsState) => {\n    const activePlaylist = playlists.find((playlist) => playlist.isPlaying);\n\n    if (!activePlaylist) {\n      return undefined;\n    }\n\n    return activePlaylist.items.find((combo) => combo.isPlaying);\n  },\n);\n","// eslint-disable-next-line import/prefer-default-export\nexport enum ChromeExtensionPage {\n  ONBOARDING,\n  FAVORITES,\n  PLAYLISTS,\n}\n\nexport interface ChromeExtensionState {\n  page: ChromeExtensionPage;\n  isOffline: boolean;\n  hasAskForPermission: boolean;\n}\n\nexport interface SetChromeExtensionPage {\n  page: ChromeExtensionPage;\n}\n\nexport interface SetIsOfflinePayload {\n  isOffline: boolean;\n}\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport createSelector from 'selectorator';\nimport { RootState } from 'app/redux';\nimport { getFavourites } from '.';\nimport { FavouritesState, Favourite } from './favourites.interfaces';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const getActiveFavourite = createSelector<RootState, Favourite | undefined>(\n  [getFavourites],\n  ({ favourites }: FavouritesState) => favourites.find((favourite) => favourite.isPlaying),\n);\n","import { UserDetails, User } from '@noisli/common';\nimport { UsersState } from './users.interfaces';\n\nconst state: UsersState = {\n  isLoading: false,\n  passwordLock: false,\n  limitReached: false,\n  showLimitReachedModal: false,\n  user: {} as unknown as User,\n  userDetails: {} as unknown as UserDetails,\n};\n\nexport default state;\n","import { createSlice } from 'redux-starter-kit';\nimport state from './users.state';\nimport {\n  setIsLoadingReducer,\n  setUserReducer,\n  setUserDetailsReducer,\n  resetUserReducer,\n  completeOnboardingReducer,\n  setLimitReachedReducer, setShowLimitReachedModalReducer, checkLimitReachedReducer,\n  setPasswordLockReducer,\n} from './users.reducers';\n\nconst favouritesSlice = createSlice({\n  slice: 'users',\n\n  initialState: state,\n\n  reducers: {\n    setIsLoading: setIsLoadingReducer,\n    setUser: setUserReducer,\n    setUserDetails: setUserDetailsReducer,\n    resetUser: resetUserReducer,\n    completeOnboarding: completeOnboardingReducer,\n    setLimitReached: setLimitReachedReducer,\n    setShowLimitReachedModal: setShowLimitReachedModalReducer,\n    checkLimitReached: checkLimitReachedReducer,\n    setPasswordLock: setPasswordLockReducer,\n\n    userAccountTypeMismatch: () => {},\n  },\n});\n// Extract the action creators object and the reducer\nconst { actions, reducer, selectors } = favouritesSlice;\n// Extract and export each action creator by name\nexport const {\n  setIsLoading,\n  setUser,\n  setUserDetails,\n  resetUser,\n  completeOnboarding,\n  setLimitReached,\n  setShowLimitReachedModal,\n  checkLimitReached,\n  setPasswordLock,\n  userAccountTypeMismatch,\n} = actions;\n\nexport const { getUsers } = selectors;\n\n// Export the reducer, either as a default or named export\nexport default reducer;\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from 'redux-starter-kit';\nimport { User, UserDetails } from '@noisli/common';\nimport {\n  SetLimitReachedPayload, SetShowLimitReachedModalPayload, UsersState, SetPasswordLockPayload,\n} from './users.interfaces';\nimport { IsLoadingPayload } from '../common/isLoading.interface';\n\nexport const setIsLoadingReducer = (\n  state: UsersState, action: PayloadAction<IsLoadingPayload>,\n) => {\n  state.isLoading = action.payload.isLoading;\n};\n\nexport const setUserReducer = (\n  state: UsersState, action: PayloadAction<User>,\n) => {\n  state.user = action.payload;\n};\n\nexport const setUserDetailsReducer = (\n  state: UsersState, action: PayloadAction<UserDetails>,\n) => {\n  if (action.payload.masterVolume === 0) {\n    action.payload.masterVolumeMuted = true;\n  }\n  state.userDetails = action.payload;\n};\n\nexport const resetUserReducer = (\n  state: UsersState,\n) => {\n  state.user = {} as unknown as User;\n  state.userDetails = {} as unknown as UserDetails;\n};\n\nexport const completeOnboardingReducer = (\n  state: UsersState,\n) => {\n  state.userDetails.didOnboarding = true;\n};\n\nexport const checkLimitReachedReducer = (\n) => {};\n\nexport const setLimitReachedReducer = (\n  state: UsersState, action: PayloadAction<SetLimitReachedPayload>,\n) => {\n  state.limitReached = action.payload.limitReached;\n};\n\nexport const setShowLimitReachedModalReducer = (\n  state: UsersState, action: PayloadAction<SetShowLimitReachedModalPayload>,\n) => {\n  state.showLimitReachedModal = action.payload.showModal;\n};\n\nexport const setPasswordLockReducer = (\n  state: UsersState, action: PayloadAction<SetPasswordLockPayload>,\n) => {\n  state.passwordLock = action.payload.passwordLock;\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport PlayerMasterController\n  from '@noisli/app/dist/components/_Core/PlayerMasterController/PlayerMasterController/PlayerMasterController';\nimport { setPlaylists } from '@noisli/app/dist/redux/modules/playlists';\nimport { generatePlaylistsState } from '@noisli/app/dist/redux/modules/playlists/playlists.utils';\nimport { performAuthCheck } from './auth';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    dispatch(setPlaylists(generatePlaylistsState()));\n    performAuthCheck();\n  }, []);\n\n  return <PlayerMasterController />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport axiosInstance from '@noisli/app/dist/Api/AxiosInstance';\nimport App from './App';\nimport store from '../redux/background';\nimport { setChromeExtensionPage } from '../redux/modules/chromeExtension';\nimport { ChromeExtensionPage } from '../redux/modules/chromeExtension/chromeExtension.interfaces';\n\naxiosInstance.interceptors.response.use(response => response, (error) => {\n  if (error.response.status === 401) {\n    if (window) {\n      // we need to check if we have user in store (if user is logged in)\n      if (store.getState()?.users?.user?.uuid) {\n        window.location.reload();\n        store.dispatch(setChromeExtensionPage({\n          page: ChromeExtensionPage.ONBOARDING,\n        }));\n      }\n    }\n  }\n  throw error;\n});\n\nReactDOM.render((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n","import homepagePlaylistsList from 'app/assets/playlists_homepage.json';\nimport playlistsList from 'app/assets/playlists.json';\n\nimport {\n  Playlist,\n  PlaylistListItem,\n} from './playlists.interfaces';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const generatePlaylistsState = (): Playlist[] => playlistsList.map(\n  (playlist: PlaylistListItem) => ({\n    id: playlist.id,\n    name: playlist.name,\n    icon: playlist.icon,\n    isPlaying: false,\n    isShuffling: false,\n    disabled: playlist.disabled,\n    pro: playlist.pro || false,\n    items: playlist.items.map((item) => ({\n      id: item.id,\n      items: item.items,\n      isPlaying: false,\n      isShuffling: false,\n      pro: item.pro,\n    })),\n  }),\n);\n\n// eslint-disable-next-line import/prefer-default-export\nexport const generateHomepagePlaylistsState = (): Playlist[] => homepagePlaylistsList.map(\n  (playlist: PlaylistListItem) => ({\n    id: playlist.id,\n    name: playlist.name,\n    icon: playlist.icon,\n    isPlaying: false,\n    isShuffling: false,\n    disabled: playlist.disabled,\n    pro: playlist.pro || false,\n    items: playlist.items.map((item) => ({\n      id: item.id,\n      items: item.items,\n      isPlaying: false,\n      isShuffling: false,\n    })),\n  }),\n);\n\nexport const generateBackgroundVariant = (backgroundVariant: string) => {\n  let variant = backgroundVariant;\n  while (variant === backgroundVariant) {\n    const variantsCount = 10;\n    const randomNumber = Math.floor(Math.random() * variantsCount + 1);\n    variant = randomNumber < 10 ? `0${randomNumber}` : `${randomNumber}`;\n  }\n  return variant;\n};\n","import axios from './AxiosInstance';\nimport {\n  GetPlansDto,\n  GetPaymentsHistoryDto,\n  UpdateBillingCycleDto,\n  UpdateBillingPlanDto,\n  TeamMember, CheckCouponDto, Subscription, HighRiskTransaction,\n} from '@noisli/common';\nimport { IncomingMessage } from 'http';\n\n/**\n * Static class that have all connection to API regarding Subscriptions module\n */\nexport default class SubscriptionsApi {\n  static apiUrl = `${process.env.REACT_APP_API_URL}/subscriptions`;\n\n  static async getPlans() {\n    const response = await axios.get<GetPlansDto>(`${SubscriptionsApi.apiUrl}/plans`, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async getUserSubscription() {\n    const response = await axios.get<Subscription>(`${SubscriptionsApi.apiUrl}/user-subscription`, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async getPaymentHistory() {\n    const response = await axios.get<GetPaymentsHistoryDto>(`${SubscriptionsApi.apiUrl}/history`, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async updateBillingCycle(body: UpdateBillingCycleDto) {\n    const response = await axios.put(`${SubscriptionsApi.apiUrl}/update-cycle`, body, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async updateBillingPlan(body: UpdateBillingPlanDto) {\n    const response = await axios.put(`${SubscriptionsApi.apiUrl}/update-plan`, body, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async cancelSubscription() {\n    const response = await axios.post(`${SubscriptionsApi.apiUrl}/cancel-subscription`, null, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async getTeamList() {\n    const response = await axios.get<{ data: TeamMember[] }>(`${SubscriptionsApi.apiUrl}/list-team`, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async checkCoupon(coupon: string) {\n    const response = await axios.post<CheckCouponDto>(`${SubscriptionsApi.apiUrl}/check-coupon`, {\n      coupon,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async getHighRiskTransaction() {\n    const response = await axios.get<{ data: HighRiskTransaction}>(`${SubscriptionsApi.apiUrl}/high-risk-transaction`, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async getPublicPlans(req?: IncomingMessage) {\n    let realIp;\n    const xForwardedFor = req?.headers['x-forwarded-for'];\n    if (xForwardedFor) {\n      if (typeof xForwardedFor === 'string') {\n        const ips = xForwardedFor.split(',');\n        const [userIp] = ips;\n        const ipChunks = userIp.split('.');\n        ipChunks[ipChunks.length - 1] = '0';\n        realIp = ipChunks.join('.');\n      }\n    }\n    const response = await axios.get<GetPlansDto>(`${SubscriptionsApi.apiUrl}/plans/public`, {\n      params: {\n        ip: realIp,\n      },\n    });\n    const { data } = response;\n\n    return data;\n  }\n}\n","import axios from './AxiosInstance';\nimport {\n  CreateTeamMemberDto,\n  TeamMember,\n} from '@noisli/common';\n\n/**\n * Static class that have all connection to API regarding Team module\n */\nexport default class TeamApi {\n  static apiUrl = `${process.env.REACT_APP_API_URL}/team`;\n\n  static async createTeamMember(body: CreateTeamMemberDto) {\n    const response = await axios.post<TeamMember>(`${TeamApi.apiUrl}/create-team-member`, body, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async deleteTeamMember(uuid: string) {\n    const response = await axios.delete<TeamMember>(`${TeamApi.apiUrl}/delete-team-member/${uuid}`, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n}\n","import { CreateTeamMemberDto, HighRiskTransaction, HighRiskTransactionStatus } from '@noisli/common';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { AnyAction } from 'redux';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from '../../index';\nimport {\n  addTeamMember,\n  removeTeamMember,\n  setHighRiskTransaction,\n  setHighRiskTransactionModalIsOpen,\n  setIsLoadingPlans,\n  setPaymentHistory,\n  setSubscription,\n  setSubscriptionPlans,\n  setTeamMembers,\n} from '.';\nimport SubscriptionsApi from '../../../Api/Subscriptions.api';\nimport TeamApi from '../../../Api/Team.api';\nimport UsersApi from \"../../../Api/Users.api\";\nimport {setUserDataWithIncludesThunk} from \"../users/users.thunks\";\n\nexport const getSubscriptionPlansThunk = (\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (dispatch) => {\n  try {\n    dispatch(setIsLoadingPlans({\n      isLoading: true,\n    }));\n\n    const data = await SubscriptionsApi.getPlans();\n\n    dispatch(setSubscriptionPlans({\n      plans: data.data,\n    }));\n  } finally {\n    dispatch(setIsLoadingPlans({\n      isLoading: false,\n    }));\n  }\n};\n\nexport const getPaymentHistoryThunk = (\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (dispatch, getState) => {\n  const { subscriptions } = getState();\n\n  if (subscriptions.paymentHistory.length) {\n    return;\n  }\n\n  const data = await SubscriptionsApi.getPaymentHistory();\n  dispatch(setPaymentHistory({\n    paymentHistory: data.data,\n  }));\n};\n\nexport const getUserSubscriptionFromPaddle = (\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (dispatch) => {\n  try {\n    dispatch(setIsLoadingPlans({\n      isLoading: true,\n    }));\n    const data = await SubscriptionsApi.getUserSubscription();\n    dispatch(setSubscription({\n      subscription: data,\n    }));\n    const userData = await UsersApi.getUser();\n    dispatch(setUserDataWithIncludesThunk(userData));\n  } finally {\n    dispatch(setIsLoadingPlans({\n      isLoading: false,\n    }));\n  }\n};\n\n\nexport const getTeamMembersThunk = (\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (dispatch) => {\n  const data = await SubscriptionsApi.getTeamList();\n\n  dispatch(setTeamMembers({\n    teamMembers: data.data,\n  }));\n};\n\nexport const createTeamMemberThunk = (\n  body: CreateTeamMemberDto,\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (dispatch) => {\n  const teamMember = await TeamApi.createTeamMember(body);\n\n  dispatch(addTeamMember({\n    teamMember,\n  }));\n};\n\nexport const deleteTeamMemberThunk = (\n  uuid: string,\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (dispatch) => {\n  await TeamApi.deleteTeamMember(uuid);\n\n  dispatch(removeTeamMember({\n    uuid,\n  }));\n};\n\nexport const setHighRiskTransactionThunk = (\n  highRiskTransaction: HighRiskTransaction,\n): ThunkAction<void, RootState, null, AnyAction> => (dispatch) => {\n  if (highRiskTransaction) {\n    dispatch(setHighRiskTransaction({\n      highRiskTransaction,\n    }));\n\n    if (highRiskTransaction.status === HighRiskTransactionStatus.PENDING) {\n      dispatch(setHighRiskTransactionModalIsOpen({\n        highRiskTransactionModalIsOpen: true,\n      }));\n    }\n  }\n};\n\nexport const getHighRiskTransactionThunk = (\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (dispatch, getState) => {\n  const { subscriptions } = getState();\n\n  if (subscriptions.highRiskTransaction) {\n    return;\n  }\n\n  const data = await SubscriptionsApi.getHighRiskTransaction();\n\n  dispatch(setHighRiskTransactionThunk(data.data));\n};\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { AnyAction } from 'redux';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { ThunkAction } from 'redux-thunk';\nimport { IncomingMessage, OutgoingHttpHeaders } from 'http';\nimport { setCookie } from 'nookies';\nimport dayjs from 'dayjs';\nimport {\n  LoginUserDto,\n  CreateUserDto,\n  ProfileUpdateDto,\n  PreferencesUpdateDto,\n  UserIncludes, UserRO, UserDetails, WithToken, WithMessage,\n} from '@noisli/common';\n\nimport { RootState } from 'app/redux';\nimport UsersApi from 'app/Api/Users.api';\nimport {\n  setIsLoading,\n  setUser,\n  setUserDetails,\n  resetUser,\n} from '.';\nimport {\n  setShuffleTime, setShufflingState, setMasterPlayerIsMuted, setMasterPlayerVolume, stopAllPlayers,\n} from '../players';\nimport { setFavourites } from '../favourites';\nimport { setAuthHeader } from '../../../components/withAuth/withAuth';\nimport { setSubscription, setUserWasSubscriber } from '../subscriptions';\nimport { setOscillationThunk } from '../players/players.thunks';\nimport { setText } from '../texts';\nimport { stopTimerThunk, setTimerConfigThunk } from '../timer/timer.thunks';\nimport { setHighRiskTransactionThunk } from '../subscriptions/subscriptions.thunks';\n\n/**\n * Thunk that is responsible for setting data pulled from backend\n * @param userData\n * @returns {(dispatch, getState) => void}\n */\nexport const setUserDataWithIncludesThunk = (\n  userData?: UserRO,\n): ThunkAction<void, RootState, null, AnyAction> => (dispatch, getState) => {\n  const { base, timer } = getState();\n  const { isMobile } = base;\n\n  if (!userData) {\n    return;\n  }\n  dispatch(setUser(userData.user));\n\n  if (userData.userDetails) {\n    dispatch(setUserDetails(userData.userDetails));\n\n    dispatch(setShuffleTime({\n      time: userData.userDetails.shuffleTime,\n    }));\n\n    dispatch(setOscillationThunk({\n      isOscillating: !isMobile && userData.userDetails.oscillation,\n    }));\n\n    dispatch(setShufflingState({\n      isShuffling: !isMobile && userData.userDetails.shuffle,\n    }));\n\n    if (!timer.isActive) {\n      dispatch(setMasterPlayerIsMuted({\n        isMuted: userData.userDetails.masterVolumeMuted,\n      }));\n\n      dispatch(setMasterPlayerVolume({\n        volume: userData.userDetails.masterVolume,\n      }));\n    }\n  }\n\n  if (userData.favourites) {\n    dispatch(setFavourites(userData.favourites));\n  }\n\n  if (userData.subscription) {\n    dispatch(setSubscription({\n      subscription: userData.subscription,\n    }));\n  }\n\n  if (userData.text) {\n    dispatch(setText({\n      text: userData.text,\n    }));\n  }\n\n  if (userData.timerConfig) {\n    dispatch(setTimerConfigThunk(userData.timerConfig));\n  }\n\n  if (userData.highRiskTransaction) {\n    setHighRiskTransactionThunk(userData.highRiskTransaction);\n  }\n\n  if (userData.wasSubscriber) {\n    dispatch(setUserWasSubscriber({\n      wasSubscriber: userData.wasSubscriber,\n    }));\n  }\n};\n\n/**\n * Thunk used to login and set auth credentials of user\n * @param data\n * @returns {(dispatch) => Promise<void>}\n */\nexport const loginUserThunk = (\n  data: WithToken<UserRO>,\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (\n  dispatch,\n) => {\n  dispatch(setUserDataWithIncludesThunk(data));\n\n  setCookie({}, 'jwt', data.token.accessToken, {\n    expires: dayjs().add(data.token.expiresIn, 'second').toDate(),\n    httpOnly: false,\n    secure: true,\n    path: '/',\n  });\n\n  setAuthHeader(data.token.accessToken);\n};\n\nexport const logoutUserThunk = (\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n): ThunkAction<Promise<any>, RootState, null, AnyAction> => async (dispatch) => {\n  dispatch(stopTimerThunk(true));\n  dispatch(stopAllPlayers());\n};\n\nexport const registerUserThunk = (\n  payload: CreateUserDto,\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (dispatch) => {\n  dispatch(setIsLoading({\n    isLoading: true,\n  }));\n\n  try {\n    await UsersApi.register(payload);\n  } finally {\n    dispatch(setIsLoading({\n      isLoading: false,\n    }));\n  }\n};\n\nexport const profileUpdateThunk = (\n  { message, data }: WithMessage<UserRO>,\n): ThunkAction<\n  Promise<{ message: string; data: UserRO }>, RootState, null, AnyAction\n> => async (dispatch) => {\n  dispatch(setUser(data.user));\n\n  if (data.userDetails) {\n    dispatch(setUserDetails(data.userDetails));\n    dispatch(setShuffleTime({\n      time: data.userDetails.shuffleTime,\n    }));\n  }\n\n  return {\n    message,\n    data,\n  };\n};\n\nexport const preferencesUpdateThunk = (\n  payload: PreferencesUpdateDto,\n): ThunkAction<Promise<void>, RootState, null, AnyAction> => async (dispatch) => {\n  dispatch(setIsLoading({\n    isLoading: true,\n  }));\n\n  try {\n    const data = await UsersApi.preferencesUpdate(payload);\n\n    dispatch(setUser(data.user));\n    if (data.userDetails) {\n      dispatch(setUserDetails(data.userDetails));\n      dispatch(setShuffleTime({\n        time: data.userDetails.shuffleTime,\n      }));\n    }\n  } finally {\n    dispatch(setIsLoading({\n      isLoading: false,\n    }));\n  }\n};\n\n/**\n * Thunk that handles unauthorized error (401)\n * @returns {(dispatch) => Promise<void>}\n */\nexport const handleUserUnauthorizedThunk = (\n\n): ThunkAction<void, RootState, null, AnyAction> => async (dispatch) => {\n  dispatch(resetUser());\n  window.location.replace('/logout/passthrough');\n};\n","const colors = {\n  primary: '#5ce5b4',\n  primaryDark: '#52CEA2',\n  primaryLight: '#DEFAF0',\n  primaryLighter: '#EEFCF7',\n  primary5: '#ADF2D9',\n  white: '#fff',\n  white15: 'rgba(255, 255, 255, 0.15)',\n  white30: 'rgba(255, 255, 255, 0.3)',\n  white40: 'rgba(255, 255, 255, 0.4)',\n  white50: 'rgba(255, 255, 255, 0.5)',\n  white66: 'rgba(255, 255, 255, 0.66)',\n  black: '#000',\n  black02: 'rgba(0, 0, 0, 0.02)',\n  black04: 'rgba(0, 0, 0, 0.04)',\n  black05: 'rgba(0, 0, 0, 0.05)',\n  black08: 'rgba(0, 0, 0, 0.08)',\n  black10: 'rgba(0, 0, 0, 0.10)',\n  black13: 'rgba(0, 0, 0, 0.13)',\n  black16: 'rgba(0, 0, 0, 0.16)',\n  black20: 'rgba(0, 0, 0, 0.20)',\n  black25: 'rgba(0, 0, 0, 0.25)',\n  black35: 'rgba(0, 0, 0, 0.35)',\n  grey50: 'rgba(102, 102, 102, 0.5)',\n  grey25: 'rgba(102, 102, 102, 0.25)',\n  lightGrey1: '#666666',\n  lightGrey2: '#F5F5F5',\n  lightGrey3: '#CBCBCB',\n  lightGrey4: '#FCFCFC',\n  lightGrey5: '#FAFAFA',\n  red1: '#F24E62',\n  red2: '#D94658',\n  red3: '#FF0000',\n  red4: '#FDEDEF',\n  error: '',\n};\n\ncolors.error = colors.red1;\n\nexport default colors;\n","import MobileDetect from 'mobile-detect';\n\nexport function isIOS() {\n  if (/iPad|iPhone|iPod/.test(navigator.platform)) {\n    return true;\n  }\n    return navigator.maxTouchPoints\n      && navigator.maxTouchPoints > 2\n      && /MacIntel/.test(navigator.platform);\n}\n\nexport function isIpadOS() {\n  return navigator.maxTouchPoints\n    && navigator.maxTouchPoints > 2\n    && /MacIntel/.test(navigator.platform);\n}\n\nexport function isSafariDesktop() {\n  const { userAgent, vendor } = navigator;\n  return /Safari/i.test(userAgent)\n    && /Apple Computer/.test(vendor)\n    && !/Mobi|Android/i.test(userAgent);\n}\n\nconst mobileDetect = () => {\n  const md = new MobileDetect(window.navigator.userAgent);\n  return !!md.mobile() || !!md.tablet() || !!isIOS() || !!isIpadOS();\n};\n\nexport default mobileDetect;\n","import { TimerType } from '@noisli/common';\nimport { TimerState } from './timer.interfaces';\n\nconst state: TimerState = {\n  isActive: false,\n  configLoaded: false,\n  isTerminatingSession: false,\n  isRunning: false,\n  isPaused: false,\n  isLongBreak: false,\n  isShortBreak: false,\n  actualTime: '00:25:00',\n  sessionsCompleted: 0,\n  sessionsForDay: undefined,\n  currentTimerType: TimerType.Session,\n  timerTitle: '',\n  activeCombo: undefined,\n  allSessionsCompleted: 0,\n\n  timerConfig: {\n    longBreak: {\n      hours: 0,\n      minutes: 15,\n      seconds: 0,\n    },\n    shortBreak: {\n      hours: 0,\n      minutes: 5,\n      seconds: 0,\n    },\n    time: {\n      hours: 0,\n      minutes: 25,\n      seconds: 0,\n    },\n    autoStart: false,\n    breakEndNotification: false,\n    sessionsCount: 4,\n    showTimerOnBrowserTab: false,\n    timeEndNotification: false,\n    webNotification: false,\n    workInSession: false,\n    savedSessionState: undefined,\n    wasTimerRun: false,\n    replayCount: 0,\n  },\n};\n\nexport default state;\n","/* eslint-disable no-param-reassign */\nimport {PayloadAction} from 'redux-starter-kit';\nimport {TimerType} from '@noisli/common';\nimport {\n  IsTerminatingSessionPayload,\n  SetActiveTimerComboPayload,\n  SetActualTimePayload,\n  SetAllSessionsCompletedPayload,\n  SetCurrentTimerTypePayload,\n  SetSessionsCompletedPayload,\n  SetSessionsForDayPayload,\n  SetTimerConfigPayload,\n  SetTimerIsActivePayload,\n  SetTimerTitlePayload,\n  StopTimerPayload,\n  TimerState,\n  UpdateTimerConfigPayload,\n} from './timer.interfaces';\nimport {formatActualTime} from './timer.helpers';\n\nexport const startTimerReducer = (\n  state: TimerState,\n) => {\n  state.isRunning = true;\n};\n\nexport const pauseTimerReducer = (\n  state: TimerState,\n) => {\n  state.isPaused = true;\n};\n\nexport const resumeTimerReducer = (\n  state: TimerState,\n) => {\n  state.isPaused = false;\n};\n\nexport const stopTimerReducer = (\n  state: TimerState,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  action: PayloadAction<StopTimerPayload>,\n) => {\n  state.isRunning = false;\n  state.isShortBreak = false;\n  state.isLongBreak = false;\n  state.isPaused = false;\n};\n\nexport const setActualTimeReducer = (\n  state: TimerState, action: PayloadAction<SetActualTimePayload>,\n) => {\n  state.actualTime = action.payload.actualTime;\n};\n\nexport const setCurrentTimerTypeReducer = (\n  state: TimerState, action: PayloadAction<SetCurrentTimerTypePayload>,\n) => {\n  state.currentTimerType = action.payload.currentTimerType;\n};\n\n/**\n * Reducer that set timer config after first time the config is loaded\n * @param state\n * @param action\n */\nexport const setTimerConfigReducer = (\n  state: TimerState, action: PayloadAction<SetTimerConfigPayload>,\n) => {\n  const { timerConfig } = action.payload;\n\n  if (state.configLoaded) {\n    state.timerConfig = timerConfig;\n    return;\n  }\n\n  state.timerConfig = timerConfig;\n\n  // if timer config have saved session\n  if (timerConfig.savedSessionState) {\n    // check if saved session count is greater then user set sessions count\n    if (timerConfig.savedSessionState.sessionCount > timerConfig.sessionsCount) {\n      state.sessionsCompleted = 0;\n    //  check if saved session count is equal to user set sessions count\n    } else if (timerConfig.savedSessionState.sessionCount === timerConfig.sessionsCount) {\n      // depending on saved type, set long break or reset timer\n      if (timerConfig.savedSessionState.sessionType === TimerType.LongBreak) {\n        state.sessionsCompleted = timerConfig.savedSessionState.sessionCount;\n        state.currentTimerType = timerConfig.savedSessionState.sessionType;\n      } else {\n        state.sessionsCompleted = 0;\n      }\n    } else {\n      // else just set sessions completed to saved sessions count\n      state.sessionsCompleted = timerConfig.savedSessionState.sessionCount;\n    }\n  }\n\n  // if there was saved combo in timer, use it as active combo to replay\n  if (timerConfig.savedTimerCombo) {\n    state.activeCombo = timerConfig.savedTimerCombo;\n  }\n\n  // set actual time depending savedSessionStateon current timer type\n  switch (state.currentTimerType) {\n    case (TimerType.Session):\n      if (timerConfig.time) {\n        const { hours, minutes, seconds } = timerConfig.time;\n        state.actualTime = formatActualTime(hours, minutes, seconds);\n      }\n      break;\n    case (TimerType.ShortBreak):\n      if (timerConfig.shortBreak) {\n        const { hours, minutes, seconds } = timerConfig.shortBreak;\n        state.actualTime = formatActualTime(hours, minutes, seconds);\n      }\n      break;\n    case (TimerType.LongBreak):\n      if (timerConfig.longBreak) {\n        const { hours, minutes, seconds } = timerConfig.longBreak;\n        state.actualTime = formatActualTime(hours, minutes, seconds);\n      }\n      break;\n    default:\n      break;\n  }\n\n  state.configLoaded = true;\n};\n\n/**\n * Reducer that is similar to {setTimerConfigReducer} but takes into account if timer is running\n * It is used later when appliaction is already loaded\n * @param state\n * @param action\n */\nexport const updateTimerConfigReducer = (\n  state: TimerState, action: PayloadAction<UpdateTimerConfigPayload>,\n) => {\n  const { isRunning } = state;\n  const { timerConfig } = action.payload;\n\n  // This condition checks saved session state from db with session count that is already loaded in state\n  if (timerConfig.savedSessionState && timerConfig.savedSessionState.sessionCount !== state.timerConfig.sessionsCount) {\n    if (timerConfig.savedSessionState.sessionCount > state.timerConfig.sessionsCount) {\n      state.sessionsCompleted = 0;\n    } else if (timerConfig.savedSessionState.sessionCount === timerConfig.sessionsCount) {\n      if (timerConfig.savedSessionState.sessionType === TimerType.LongBreak) {\n        state.sessionsCompleted = timerConfig.savedSessionState.sessionCount;\n        state.currentTimerType = timerConfig.savedSessionState.sessionType;\n      } else {\n        state.sessionsCompleted = 0;\n      }\n    } else {\n      state.sessionsCompleted = timerConfig.savedSessionState.sessionCount;\n    }\n  }\n\n  // This condition checks sessionCount from new config with saved session count in state\n  // we need to adjust the session counter, eg. if session counter is 5 and new session count is 3, we need to reset to 0 etc.\n  if (timerConfig.sessionsCount && state.timerConfig.savedSessionState) {\n    if (state.timerConfig.savedSessionState.sessionCount > timerConfig.sessionsCount) {\n      state.sessionsCompleted = 0;\n    } else if (state.timerConfig.savedSessionState.sessionCount === timerConfig.sessionsCount) {\n      if (state.timerConfig.savedSessionState.sessionType !== TimerType.LongBreak) {\n        state.sessionsCompleted = 0;\n        state.currentTimerType = TimerType.Session;\n        state.timerConfig.savedSessionState.sessionCount = 0;\n        state.timerConfig.savedSessionState.sessionType = TimerType.Session;\n      }\n    } else {\n      state.sessionsCompleted = state.timerConfig.savedSessionState?.sessionCount || 0;\n    }\n  }\n\n  if (!isRunning) {\n    switch (state.currentTimerType) {\n      case (TimerType.Session):\n        if (timerConfig.time) {\n          const { hours, minutes, seconds } = timerConfig.time;\n          state.actualTime = formatActualTime(hours, minutes, seconds);\n        }\n        break;\n      case (TimerType.ShortBreak):\n        if (timerConfig.shortBreak) {\n          const { hours, minutes, seconds } = timerConfig.shortBreak;\n          state.actualTime = formatActualTime(hours, minutes, seconds);\n        }\n        break;\n      case (TimerType.LongBreak):\n        if (timerConfig.longBreak) {\n          const { hours, minutes, seconds } = timerConfig.longBreak;\n          state.actualTime = formatActualTime(hours, minutes, seconds);\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  state.timerConfig = {\n    ...state.timerConfig,\n    ...timerConfig,\n  };\n};\n\nexport const reloadTimerConfigReducer = (\n  state: TimerState, action: PayloadAction<UpdateTimerConfigPayload>,\n) => updateTimerConfigReducer(state, action);\n\nexport const setIsTerminatingSessionReducer = (\n  state: TimerState, action: PayloadAction<IsTerminatingSessionPayload>,\n) => {\n  state.isTerminatingSession = action.payload.isTerminating;\n};\n\nexport const setActiveTimerComboReducer = (\n  state: TimerState, action: PayloadAction<SetActiveTimerComboPayload>,\n) => {\n  state.activeCombo = action.payload.timerCombo;\n  state.timerConfig.savedTimerCombo = action.payload.timerCombo;\n};\n\nexport const setSessionsCompletedReducer = (\n  state: TimerState, action: PayloadAction<SetSessionsCompletedPayload>,\n) => {\n  state.sessionsCompleted = action.payload.sessionsCompleted;\n};\n\nexport const setSessionsForDayReducer = (\n  state: TimerState, action: PayloadAction<SetSessionsForDayPayload>,\n) => {\n  state.sessionsForDay = action.payload.sessionsForDay;\n};\n\nexport const setTimerIsActiveReducer = (\n  state: TimerState, action: PayloadAction<SetTimerIsActivePayload>,\n) => {\n  state.isActive = action.payload.isActive;\n};\n\nexport const setTimerTitleReducer = (\n  state: TimerState, action: PayloadAction<SetTimerTitlePayload>,\n) => {\n  state.timerTitle = action.payload.title;\n};\n\nexport const setAllSessionsCompletedReducer = (\n  state: TimerState, action: PayloadAction<SetAllSessionsCompletedPayload>,\n) => {\n  state.allSessionsCompleted = action.payload.allSessionsCompleted;\n};\n\nexport const incrementAllSessionsCompletedReducer = (\n  state: TimerState,\n) => {\n  state.allSessionsCompleted += 1;\n};\n\nexport const resetSavedSessionStateReducer = (\n  state: TimerState,\n) => {\n  state.timerConfig.savedSessionState = {\n    sessionCount: 0,\n    sessionType: TimerType.Session,\n  };\n}\n","import { createSlice } from 'redux-starter-kit';\nimport state from './timer.state';\nimport {\n  startTimerReducer,\n  stopTimerReducer,\n  setActualTimeReducer,\n  setCurrentTimerTypeReducer,\n  pauseTimerReducer,\n  resumeTimerReducer,\n  setTimerConfigReducer,\n  updateTimerConfigReducer,\n  setIsTerminatingSessionReducer,\n  setActiveTimerComboReducer,\n  setSessionsCompletedReducer,\n  setSessionsForDayReducer,\n  setTimerIsActiveReducer,\n  setTimerTitleReducer,\n  reloadTimerConfigReducer,\n  setAllSessionsCompletedReducer,\n  incrementAllSessionsCompletedReducer,\n  resetSavedSessionStateReducer,\n} from './timer.reducers';\n\nconst textsSlice = createSlice({\n  slice: 'timer',\n\n  initialState: state,\n\n  reducers: {\n    startTimer: startTimerReducer,\n    stopTimer: stopTimerReducer,\n    pauseTimer: pauseTimerReducer,\n    resumeTimer: resumeTimerReducer,\n\n    setActualTime: setActualTimeReducer,\n\n    setTimerConfig: setTimerConfigReducer,\n    updateTimerConfig: updateTimerConfigReducer,\n    reloadTimerConfig: reloadTimerConfigReducer,\n\n    setCurrentTimerType: setCurrentTimerTypeReducer,\n\n    setIsTerminatingSession: setIsTerminatingSessionReducer,\n    setActiveTimerCombo: setActiveTimerComboReducer,\n\n    setSessionsCompleted: setSessionsCompletedReducer,\n    setSessionsForDay: setSessionsForDayReducer,\n\n    setTimerIsActive: setTimerIsActiveReducer,\n\n    setTimerTitle: setTimerTitleReducer,\n\n    setAllSessionsCompleted: setAllSessionsCompletedReducer,\n    incrementAllSessionsCompleted: incrementAllSessionsCompletedReducer,\n\n    resetSavedSessionState: resetSavedSessionStateReducer,\n  },\n});\n// Extract the action creators object and the reducer\nconst { actions, reducer, selectors } = textsSlice;\n// Extract and export each action creator by name\nexport const {\n  startTimer,\n  stopTimer,\n  setCurrentTimerType,\n  setActualTime,\n  pauseTimer,\n  resumeTimer,\n  setTimerConfig,\n  updateTimerConfig,\n  setActiveTimerCombo,\n  setIsTerminatingSession,\n  setSessionsCompleted,\n  setSessionsForDay,\n  setTimerIsActive,\n  setTimerTitle,\n  reloadTimerConfig,\n  setAllSessionsCompleted,\n  incrementAllSessionsCompleted,\n  resetSavedSessionState,\n} = actions;\n\nexport const { getTimer } = selectors;\n// Export the reducer, either as a default or named export\nexport default reducer;\n","import { TextsState } from './texts.interfaces';\n\nconst state: TextsState = {\n  text: '',\n  isLoading: false,\n};\n\nexport default state;\n","import { createSlice } from 'redux-starter-kit';\nimport state from './texts.state';\nimport { setTextReducer, setIsLoadingReducer, resetTextReducer } from './texts.reducers';\n\nconst textsSlice = createSlice({\n  slice: 'texts',\n\n  initialState: state,\n\n  reducers: {\n    setText: setTextReducer,\n    resetText: resetTextReducer,\n    setIsLoading: setIsLoadingReducer,\n  },\n});\n// Extract the action creators object and the reducer\nconst { actions, reducer, selectors } = textsSlice;\n// Extract and export each action creator by name\nexport const {\n  setText,\n  resetText,\n  setIsLoading,\n} = actions;\n\nexport const { getTexts } = selectors;\n// Export the reducer, either as a default or named export\nexport default reducer;\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction } from 'redux-starter-kit';\nimport { IsLoadingPayload } from '../common/isLoading.interface';\nimport { SetTextPayload, TextsState } from './texts.interfaces';\n\nexport const setTextReducer = (\n  state: TextsState, action: PayloadAction<SetTextPayload>,\n) => {\n  state.text = action.payload.text;\n};\n\nexport const setIsLoadingReducer = (\n  state: TextsState, action: PayloadAction<IsLoadingPayload>,\n) => {\n  state.isLoading = action.payload.isLoading;\n};\n\nexport const resetTextReducer = (\n  state: TextsState,\n) => {\n  state.text = '';\n};\n","import axios from './AxiosInstance';\nimport {\n  TimerConfig, TimerStats, TimerStatsSaveDto, TimerSessionCount,\n} from '@noisli/common';\n\n/**\n * Static class that have all connection to API regarding Timer module\n */\nexport default class TimerApi {\n  static apiUrl = `${process.env.REACT_APP_API_URL}/timer`;\n\n  static async getConfig() {\n    const response = await axios.get<TimerConfig>(`${TimerApi.apiUrl}`, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async updateConfig(body: TimerConfig) {\n    const response = await axios.put<string>(`${TimerApi.apiUrl}`, body, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async saveCompletedSession(body: TimerStatsSaveDto) {\n    const response = await axios.post<TimerStats>(`${TimerApi.apiUrl}/save-completed-session`, body, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async getTimerStats(body: TimerStatsSaveDto) {\n    const response = await axios.post<TimerStats[]>(`${TimerApi.apiUrl}`, body, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async getSessionCountForDay(body: TimerStatsSaveDto) {\n    const response = await axios.post<TimerSessionCount>(`${TimerApi.apiUrl}/session-count`, body, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n}\n","/* eslint-disable import/prefer-default-export */\n/**\n * Converts a CSS hex color value to RGB.\n * @param {string} hex - Expanded hexadecimal CSS color value.\n * @returns {string} RGB CSS color value.\n */\nexport const hex2Rgb = (hex: string) => {\n  const r = parseInt(hex.substring(1, 3), 16);\n  const g = parseInt(hex.substring(3, 5), 16);\n  const b = parseInt(hex.substring(5, 7), 16);\n  return `rgb(${r}, ${g}, ${b})`;\n};\n\n/**\n * Converts a CSS hex color value to RGBA.\n * @param {string} hex - Expanded hexadecimal CSS color value.\n * @param {number} alpha - Alpha as a decimal.\n * @returns {string} RGBA CSS color value.\n */\nexport const hex2Rgba = (hex: string, alpha: number) => {\n  const r = parseInt(hex.substring(1, 3), 16);\n  const g = parseInt(hex.substring(3, 5), 16);\n  const b = parseInt(hex.substring(5, 7), 16);\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\n/**\n * Converts a rgb color value to RGBA.\n * @param {string} rgb - Expanded hexadecimal CSS color value.\n * @param {number} alpha - Alpha as a decimal.\n * @returns {string} RGBA CSS color value.\n */\nexport const rgbaSetAlpha = (rgb: string, alpha: number) => {\n  const match = /rgba?\\((\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*\\d+[.\\d+]*)*\\)/g.exec(rgb);\n  if (!match) {\n    return rgb;\n  }\n  const [, r, g, b] = match;\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n","/**\n * Config object for players sounds\n */\nexport default {\n  cdnUrl: 'https://cdn2.noisli.com/hls/<sound-name>/<sound-name>.m3u8',\n  prodCdnUrl: 'https://cdn.noisli.com/hls/<sound-name>/<sound-name>.m3u8',\n  looptestCdnUrl: 'https://cdn2.noisli.com/looptest/<sound-name>/<sound-name>.m3u8',\n  webAudioUrl: 'https://cdn2.noisli.com/mp3/<sound-name>/<sound-name>.m3u8',\n  webAudioChunkUrl: 'https://cdn2.noisli.com/mp3/<sound-name>/',\n\n  timeEndNotificationUrl: 'https://cdn2.noisli.com/alerts/timerend.mp3',\n  breakEndNotificationUrl: 'https://cdn2.noisli.com/alerts/breakend.mp3',\n};\n","import axios from './AxiosInstance';\nimport {\n  Favourite,\n  CreateFavouriteDto,\n  UpdateFavouriteDto,\n} from '@noisli/common';\n\n/**\n * Static class that have all connection to API regarding Favourites module\n */\nexport default class FavouritesApi {\n  static apiUrl = `${process.env.REACT_APP_API_URL}/favourite`;\n\n  static async getAll() {\n    const response = await axios.get<Favourite[]>(`${FavouritesApi.apiUrl}`, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async getSingle(uuid: string) {\n    const response = await axios.get<Favourite>(`${FavouritesApi.apiUrl}/${uuid}`);\n    const { data } = response;\n\n    return data;\n  }\n\n\n  static async create(payload: CreateFavouriteDto) {\n    const response = await axios.post<Favourite>(`${FavouritesApi.apiUrl}/create`, payload, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async update(uuid: string, payload: UpdateFavouriteDto) {\n    const response = await axios.put<Favourite>(`${FavouritesApi.apiUrl}/${uuid}`, payload, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async delete(uuid: string) {\n    const response = await axios.delete<string>(`${FavouritesApi.apiUrl}/${uuid}`, {\n      withCredentials: true,\n    });\n    const { data } = response;\n\n    return data;\n  }\n\n  static async play() {\n    await axios.get(`${FavouritesApi.apiUrl}/play`, {\n      withCredentials: true,\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/camelcase */\nimport React from 'react';\nimport { AccountType } from '@noisli/common';\nimport { useSelector } from 'react-redux';\nimport { getUsers } from '@noisli/app/dist/redux/modules/users';\n\nexport const GA_TRACKING_ID = process.env.REACT_APP_GA_TRACKING_CODE;\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/pages\nexport const pageview = (url: string) => {\n  // eslint-disable-next-line no-unused-expressions\n  (window as any).ga?.('send', 'pageview', url);\n};\n\ninterface EventProps {\n  eventAction: string;\n  eventCategory: string;\n  eventLabel?: string;\n}\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/events\nexport const event = (props: EventProps) => {\n  // eslint-disable-next-line no-unused-expressions\n  (window as any).ga?.('send', 'event', props);\n};\n\ntype UseGoogleAnalyticsProps = {\n  action: string;\n  event_category: string;\n  accountType?: AccountType;\n}\n\nexport const useGoogleAnalytics = () => {\n  const { user } = useSelector(getUsers);\n\n  React.useEffect(() => {\n    const eventCategory = 'Pageview';\n    let actionName;\n    let eventLabel;\n\n    switch (user.accountType) {\n      case AccountType.FREE:\n        eventLabel = 'Free';\n        actionName = 'In';\n        break;\n      case AccountType.BUSINESS_MEMBER:\n      case AccountType.BUSINESS_ADMIN:\n        eventLabel = 'Business';\n        actionName = 'In';\n        break;\n      case AccountType.PRO:\n        eventLabel = 'Pro';\n        actionName = 'In';\n        break;\n      default:\n        actionName = 'Out';\n        break;\n    }\n\n    event({\n      eventAction: actionName,\n      eventCategory,\n      eventLabel,\n    });\n  }, []);\n};\n"],"sourceRoot":""}